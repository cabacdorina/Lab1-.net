{
  "C:\\Users\\User\\source\\repos\\Lab1\\UnitTestProject1\\bin\\Debug\\FluentAssertions.dll": {
    "C:\\projects\\fluentassertions-vf06b\\Src\\JetBrainsAnnotations.cs": {
      "JetBrains.Annotations.StringFormatMethodAttribute": {
        "System.String JetBrains.Annotations.StringFormatMethodAttribute::get_FormatParameterName()": {
          "Lines": {
            "122": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.StringFormatMethodAttribute::.ctor(System.String)": {
          "Lines": {
            "116": 0,
            "118": 0,
            "119": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.ValueProviderAttribute": {
        "System.String JetBrains.Annotations.ValueProviderAttribute::get_Name()": {
          "Lines": {
            "138": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.ValueProviderAttribute::.ctor(System.String)": {
          "Lines": {
            "132": 0,
            "134": 0,
            "135": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute": {
        "System.String JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute::get_ParameterName()": {
          "Lines": {
            "203": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute::.ctor()": {
          "Lines": {
            "196": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute::.ctor(System.String)": {
          "Lines": {
            "197": 0,
            "199": 0,
            "200": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.ContractAnnotationAttribute": {
        "System.String JetBrains.Annotations.ContractAnnotationAttribute::get_Contract()": {
          "Lines": {
            "262": 0
          },
          "Branches": []
        },
        "System.Boolean JetBrains.Annotations.ContractAnnotationAttribute::get_ForceFullStates()": {
          "Lines": {
            "263": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.ContractAnnotationAttribute::.ctor(System.String)": {
          "Lines": {
            "253": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.ContractAnnotationAttribute::.ctor(System.String,System.Boolean)": {
          "Lines": {
            "255": 0,
            "257": 0,
            "258": 0,
            "259": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.LocalizationRequiredAttribute": {
        "System.Boolean JetBrains.Annotations.LocalizationRequiredAttribute::get_Required()": {
          "Lines": {
            "284": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.LocalizationRequiredAttribute::.ctor()": {
          "Lines": {
            "278": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.LocalizationRequiredAttribute::.ctor(System.Boolean)": {
          "Lines": {
            "279": 0,
            "281": 0,
            "282": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.BaseTypeRequiredAttribute": {
        "System.Type JetBrains.Annotations.BaseTypeRequiredAttribute::get_BaseType()": {
          "Lines": {
            "331": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.BaseTypeRequiredAttribute::.ctor(System.Type)": {
          "Lines": {
            "325": 0,
            "327": 0,
            "328": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.UsedImplicitlyAttribute": {
        "JetBrains.Annotations.ImplicitUseKindFlags JetBrains.Annotations.UsedImplicitlyAttribute::get_UseKindFlags()": {
          "Lines": {
            "356": 0
          },
          "Branches": []
        },
        "JetBrains.Annotations.ImplicitUseTargetFlags JetBrains.Annotations.UsedImplicitlyAttribute::get_TargetFlags()": {
          "Lines": {
            "357": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.UsedImplicitlyAttribute::.ctor()": {
          "Lines": {
            "342": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.UsedImplicitlyAttribute::.ctor(JetBrains.Annotations.ImplicitUseKindFlags)": {
          "Lines": {
            "345": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.UsedImplicitlyAttribute::.ctor(JetBrains.Annotations.ImplicitUseTargetFlags)": {
          "Lines": {
            "348": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.UsedImplicitlyAttribute::.ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)": {
          "Lines": {
            "350": 0,
            "352": 0,
            "353": 0,
            "354": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.MeansImplicitUseAttribute": {
        "JetBrains.Annotations.ImplicitUseKindFlags JetBrains.Annotations.MeansImplicitUseAttribute::get_UseKindFlags()": {
          "Lines": {
            "383": 0
          },
          "Branches": []
        },
        "JetBrains.Annotations.ImplicitUseTargetFlags JetBrains.Annotations.MeansImplicitUseAttribute::get_TargetFlags()": {
          "Lines": {
            "385": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.MeansImplicitUseAttribute::.ctor()": {
          "Lines": {
            "368": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.MeansImplicitUseAttribute::.ctor(JetBrains.Annotations.ImplicitUseKindFlags)": {
          "Lines": {
            "371": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.MeansImplicitUseAttribute::.ctor(JetBrains.Annotations.ImplicitUseTargetFlags)": {
          "Lines": {
            "374": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.MeansImplicitUseAttribute::.ctor(JetBrains.Annotations.ImplicitUseKindFlags,JetBrains.Annotations.ImplicitUseTargetFlags)": {
          "Lines": {
            "376": 0,
            "378": 0,
            "379": 0,
            "380": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.PublicAPIAttribute": {
        "System.String JetBrains.Annotations.PublicAPIAttribute::get_Comment()": {
          "Lines": {
            "434": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.PublicAPIAttribute::.ctor()": {
          "Lines": {
            "427": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.PublicAPIAttribute::.ctor(System.String)": {
          "Lines": {
            "428": 0,
            "430": 0,
            "431": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.MustUseReturnValueAttribute": {
        "System.String JetBrains.Annotations.MustUseReturnValueAttribute::get_Justification()": {
          "Lines": {
            "472": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.MustUseReturnValueAttribute::.ctor()": {
          "Lines": {
            "465": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.MustUseReturnValueAttribute::.ctor(System.String)": {
          "Lines": {
            "466": 0,
            "468": 0,
            "469": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.PathReferenceAttribute": {
        "System.String JetBrains.Annotations.PathReferenceAttribute::get_BasePath()": {
          "Lines": {
            "509": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.PathReferenceAttribute::.ctor()": {
          "Lines": {
            "502": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.PathReferenceAttribute::.ctor(System.String)": {
          "Lines": {
            "503": 0,
            "505": 0,
            "506": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.MacroAttribute": {
        "System.String JetBrains.Annotations.MacroAttribute::get_Expression()": {
          "Lines": {
            "573": 0
          },
          "Branches": []
        },
        "System.Int32 JetBrains.Annotations.MacroAttribute::get_Editable()": {
          "Lines": {
            "583": 0
          },
          "Branches": []
        },
        "System.String JetBrains.Annotations.MacroAttribute::get_Target()": {
          "Lines": {
            "589": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute": {
        "System.String JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute::get_Format()": {
          "Lines": {
            "601": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute::.ctor(System.String)": {
          "Lines": {
            "595": 0,
            "597": 0,
            "598": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute": {
        "System.String JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute::get_Format()": {
          "Lines": {
            "613": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute::.ctor(System.String)": {
          "Lines": {
            "607": 0,
            "609": 0,
            "610": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute": {
        "System.String JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute::get_Format()": {
          "Lines": {
            "625": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute::.ctor(System.String)": {
          "Lines": {
            "619": 0,
            "621": 0,
            "622": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcMasterLocationFormatAttribute": {
        "System.String JetBrains.Annotations.AspMvcMasterLocationFormatAttribute::get_Format()": {
          "Lines": {
            "636": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcMasterLocationFormatAttribute::.ctor(System.String)": {
          "Lines": {
            "631": 0,
            "633": 0,
            "634": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute": {
        "System.String JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute::get_Format()": {
          "Lines": {
            "648": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute::.ctor(System.String)": {
          "Lines": {
            "642": 0,
            "644": 0,
            "645": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcViewLocationFormatAttribute": {
        "System.String JetBrains.Annotations.AspMvcViewLocationFormatAttribute::get_Format()": {
          "Lines": {
            "660": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcViewLocationFormatAttribute::.ctor(System.String)": {
          "Lines": {
            "654": 0,
            "656": 0,
            "657": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcActionAttribute": {
        "System.String JetBrains.Annotations.AspMvcActionAttribute::get_AnonymousProperty()": {
          "Lines": {
            "679": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcActionAttribute::.ctor()": {
          "Lines": {
            "672": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcActionAttribute::.ctor(System.String)": {
          "Lines": {
            "673": 0,
            "675": 0,
            "676": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcAreaAttribute": {
        "System.String JetBrains.Annotations.AspMvcAreaAttribute::get_AnonymousProperty()": {
          "Lines": {
            "697": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcAreaAttribute::.ctor()": {
          "Lines": {
            "690": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcAreaAttribute::.ctor(System.String)": {
          "Lines": {
            "691": 0,
            "693": 0,
            "694": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspMvcControllerAttribute": {
        "System.String JetBrains.Annotations.AspMvcControllerAttribute::get_AnonymousProperty()": {
          "Lines": {
            "716": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcControllerAttribute::.ctor()": {
          "Lines": {
            "709": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspMvcControllerAttribute::.ctor(System.String)": {
          "Lines": {
            "710": 0,
            "712": 0,
            "713": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.HtmlElementAttributesAttribute": {
        "System.String JetBrains.Annotations.HtmlElementAttributesAttribute::get_Name()": {
          "Lines": {
            "819": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.HtmlElementAttributesAttribute::.ctor()": {
          "Lines": {
            "812": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.HtmlElementAttributesAttribute::.ctor(System.String)": {
          "Lines": {
            "813": 0,
            "815": 0,
            "816": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.HtmlAttributeValueAttribute": {
        "System.String JetBrains.Annotations.HtmlAttributeValueAttribute::get_Name()": {
          "Lines": {
            "831": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.HtmlAttributeValueAttribute::.ctor(System.String)": {
          "Lines": {
            "825": 0,
            "827": 0,
            "828": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.CollectionAccessAttribute": {
        "JetBrains.Annotations.CollectionAccessType JetBrains.Annotations.CollectionAccessAttribute::get_CollectionAccessType()": {
          "Lines": {
            "854": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.CollectionAccessAttribute::.ctor(JetBrains.Annotations.CollectionAccessType)": {
          "Lines": {
            "849": 0,
            "851": 0,
            "852": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AssertionConditionAttribute": {
        "JetBrains.Annotations.AssertionConditionType JetBrains.Annotations.AssertionConditionAttribute::get_ConditionType()": {
          "Lines": {
            "891": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AssertionConditionAttribute::.ctor(JetBrains.Annotations.AssertionConditionType)": {
          "Lines": {
            "886": 0,
            "888": 0,
            "889": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspChildControlTypeAttribute": {
        "System.String JetBrains.Annotations.AspChildControlTypeAttribute::get_TagName()": {
          "Lines": {
            "967": 0
          },
          "Branches": []
        },
        "System.Type JetBrains.Annotations.AspChildControlTypeAttribute::get_ControlType()": {
          "Lines": {
            "969": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspChildControlTypeAttribute::.ctor(System.String,System.Type)": {
          "Lines": {
            "960": 0,
            "962": 0,
            "963": 0,
            "964": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspRequiredAttributeAttribute": {
        "System.String JetBrains.Annotations.AspRequiredAttributeAttribute::get_Attribute()": {
          "Lines": {
            "990": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspRequiredAttributeAttribute::.ctor(System.String)": {
          "Lines": {
            "984": 0,
            "986": 0,
            "987": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.AspTypePropertyAttribute": {
        "System.Boolean JetBrains.Annotations.AspTypePropertyAttribute::get_CreateConstructorReferences()": {
          "Lines": {
            "996": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.AspTypePropertyAttribute::.ctor(System.Boolean)": {
          "Lines": {
            "998": 0,
            "1000": 0,
            "1001": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.RazorImportNamespaceAttribute": {
        "System.String JetBrains.Annotations.RazorImportNamespaceAttribute::get_Name()": {
          "Lines": {
            "1013": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.RazorImportNamespaceAttribute::.ctor(System.String)": {
          "Lines": {
            "1007": 0,
            "1009": 0,
            "1010": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.RazorInjectionAttribute": {
        "System.String JetBrains.Annotations.RazorInjectionAttribute::get_Type()": {
          "Lines": {
            "1026": 0
          },
          "Branches": []
        },
        "System.String JetBrains.Annotations.RazorInjectionAttribute::get_FieldName()": {
          "Lines": {
            "1028": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.RazorInjectionAttribute::.ctor(System.String,System.String)": {
          "Lines": {
            "1019": 0,
            "1021": 0,
            "1022": 0,
            "1023": 0
          },
          "Branches": []
        }
      },
      "JetBrains.Annotations.RazorDirectiveAttribute": {
        "System.String JetBrains.Annotations.RazorDirectiveAttribute::get_Directive()": {
          "Lines": {
            "1040": 0
          },
          "Branches": []
        },
        "System.Void JetBrains.Annotations.RazorDirectiveAttribute::.ctor(System.String)": {
          "Lines": {
            "1034": 0,
            "1036": 0,
            "1037": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\AndConstraint.cs": {
      "FluentAssertions.AndConstraint`1": {
        "T FluentAssertions.AndConstraint`1::get_And()": {
          "Lines": {
            "8": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AndConstraint`1::.ctor(T)": {
          "Lines": {
            "13": 17,
            "15": 17,
            "16": 17
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\AndWhichConstraint.cs": {
      "FluentAssertions.AndWhichConstraint`2": {
        "TMatchedElement FluentAssertions.AndWhichConstraint`2::SingleOrDefault(System.Collections.Generic.IEnumerable`1<TMatchedElement>)": {
          "Lines": {
            "38": 0,
            "40": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "51": 0,
            "54": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 25,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 11,
              "EndOffset": 89,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "TMatchedElement FluentAssertions.AndWhichConstraint`2::get_Which()": {
          "Lines": {
            "60": 0
          },
          "Branches": []
        },
        "TMatchedElement FluentAssertions.AndWhichConstraint`2::get_Subject()": {
          "Lines": {
            "68": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AndWhichConstraint`2::.ctor(TParentConstraint,TMatchedElement)": {
          "Lines": {
            "21": 0,
            "23": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AndWhichConstraint`2::.ctor(TParentConstraint,System.Collections.Generic.IEnumerable`1<TMatchedElement>)": {
          "Lines": {
            "28": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\AssertionExtensions.Actions.cs": {
      "FluentAssertions.AssertionExtensions": {
        "FluentAssertions.Specialized.ExceptionAssertions`1<TException> FluentAssertions.AssertionExtensions::ThrowExactly(FluentAssertions.Specialized.ActionAssertions,System.String,System.Object[])": {
          "Lines": {
            "36": 0,
            "37": 0,
            "38": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.ExceptionAssertions`1<TException> FluentAssertions.AssertionExtensions::ThrowExactly(FluentAssertions.Specialized.AsyncFunctionAssertions,System.String,System.Object[])": {
          "Lines": {
            "62": 0,
            "63": 0,
            "64": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AssertionExtensions::.cctor()": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.AssertionExtensions/AggregateExceptionExtractor": {
        "System.Collections.Generic.IEnumerable`1<T> FluentAssertions.AssertionExtensions/AggregateExceptionExtractor::OfType(System.Exception)": {
          "Lines": {
            "72": 0,
            "74": 0,
            "77": 0
          },
          "Branches": [
            {
              "Line": 72,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 74,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 74,
              "Offset": 45,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 72,
              "Offset": 25,
              "EndOffset": 70,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.List`1<T> FluentAssertions.AssertionExtensions/AggregateExceptionExtractor::GetExtractedExceptions(System.Exception)": {
          "Lines": {
            "83": 0,
            "85": 0,
            "87": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "93": 0,
            "96": 0
          },
          "Branches": [
            {
              "Line": 85,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 14,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 91,
              "Offset": 60,
              "EndOffset": 62,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 91,
              "Offset": 60,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\AssertionExtensions.cs": {
      "FluentAssertions.AssertionExtensions": {
        "System.Action FluentAssertions.AssertionExtensions::Invoking(T,System.Action`1<T>)": {
          "Lines": {
            "34": 0
          },
          "Branches": []
        },
        "System.Func`1<System.Threading.Tasks.Task> FluentAssertions.AssertionExtensions::Awaiting(T,System.Func`2<T,System.Threading.Tasks.Task>)": {
          "Lines": {
            "40": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.MemberExecutionTime`1<T> FluentAssertions.AssertionExtensions::ExecutionTimeOf(T,System.Linq.Expressions.Expression`1<System.Action`1<T>>)": {
          "Lines": {
            "54": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.ExecutionTime FluentAssertions.AssertionExtensions::ExecutionTime(System.Action)": {
          "Lines": {
            "67": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.ExecutionTimeAssertions FluentAssertions.AssertionExtensions::Should(FluentAssertions.Specialized.ExecutionTime)": {
          "Lines": {
            "77": 0
          },
          "Branches": []
        },
        "FluentAssertions.Reflection.AssemblyAssertions FluentAssertions.AssertionExtensions::Should(System.Reflection.Assembly)": {
          "Lines": {
            "87": 0
          },
          "Branches": []
        },
        "FluentAssertions.Xml.XDocumentAssertions FluentAssertions.AssertionExtensions::Should(System.Xml.Linq.XDocument)": {
          "Lines": {
            "97": 0
          },
          "Branches": []
        },
        "FluentAssertions.Xml.XElementAssertions FluentAssertions.AssertionExtensions::Should(System.Xml.Linq.XElement)": {
          "Lines": {
            "107": 0
          },
          "Branches": []
        },
        "FluentAssertions.Xml.XAttributeAssertions FluentAssertions.AssertionExtensions::Should(System.Xml.Linq.XAttribute)": {
          "Lines": {
            "117": 0
          },
          "Branches": []
        },
        "System.Action FluentAssertions.AssertionExtensions::Enumerating(System.Func`1<System.Collections.IEnumerable>)": {
          "Lines": {
            "127": 0
          },
          "Branches": []
        },
        "System.Action FluentAssertions.AssertionExtensions::Enumerating(System.Func`1<System.Collections.Generic.IEnumerable`1<T>>)": {
          "Lines": {
            "137": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AssertionExtensions::ForceEnumeration(System.Func`1<System.Collections.IEnumerable>)": {
          "Lines": {
            "142": 0,
            "146": 0
          },
          "Branches": [
            {
              "Line": 142,
              "Offset": 27,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 142,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Primitives.ObjectAssertions FluentAssertions.AssertionExtensions::Should(System.Object)": {
          "Lines": {
            "155": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.BooleanAssertions FluentAssertions.AssertionExtensions::Should(System.Boolean)": {
          "Lines": {
            "165": 1
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.NullableBooleanAssertions FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Boolean>)": {
          "Lines": {
            "175": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.GuidAssertions FluentAssertions.AssertionExtensions::Should(System.Guid)": {
          "Lines": {
            "185": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.NullableGuidAssertions FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Guid>)": {
          "Lines": {
            "195": 0
          },
          "Branches": []
        },
        "FluentAssertions.Collections.NonGenericCollectionAssertions FluentAssertions.AssertionExtensions::Should(System.Collections.IEnumerable)": {
          "Lines": {
            "205": 0
          },
          "Branches": []
        },
        "FluentAssertions.Collections.GenericCollectionAssertions`1<T> FluentAssertions.AssertionExtensions::Should(System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "215": 0
          },
          "Branches": []
        },
        "FluentAssertions.Collections.StringCollectionAssertions FluentAssertions.AssertionExtensions::Should(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "225": 0
          },
          "Branches": []
        },
        "FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue> FluentAssertions.AssertionExtensions::Should(System.Collections.Generic.IDictionary`2<TKey,TValue>)": {
          "Lines": {
            "235": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeAssertions FluentAssertions.AssertionExtensions::Should(System.DateTime)": {
          "Lines": {
            "245": 12
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeOffsetAssertions FluentAssertions.AssertionExtensions::Should(System.DateTimeOffset)": {
          "Lines": {
            "255": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.NullableDateTimeAssertions FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.DateTime>)": {
          "Lines": {
            "265": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.NullableDateTimeOffsetAssertions FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.DateTimeOffset>)": {
          "Lines": {
            "275": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.ComparableTypeAssertions`1<T> FluentAssertions.AssertionExtensions::Should(System.IComparable`1<T>)": {
          "Lines": {
            "285": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Int32> FluentAssertions.AssertionExtensions::Should(System.Int32)": {
          "Lines": {
            "295": 2
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Int32> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Int32>)": {
          "Lines": {
            "305": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.UInt32> FluentAssertions.AssertionExtensions::Should(System.UInt32)": {
          "Lines": {
            "315": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.UInt32> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.UInt32>)": {
          "Lines": {
            "325": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Decimal> FluentAssertions.AssertionExtensions::Should(System.Decimal)": {
          "Lines": {
            "335": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Decimal> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Decimal>)": {
          "Lines": {
            "345": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Byte> FluentAssertions.AssertionExtensions::Should(System.Byte)": {
          "Lines": {
            "355": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Byte> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Byte>)": {
          "Lines": {
            "365": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.SByte> FluentAssertions.AssertionExtensions::Should(System.SByte)": {
          "Lines": {
            "375": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.SByte> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.SByte>)": {
          "Lines": {
            "385": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Int16> FluentAssertions.AssertionExtensions::Should(System.Int16)": {
          "Lines": {
            "395": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Int16> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Int16>)": {
          "Lines": {
            "405": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.UInt16> FluentAssertions.AssertionExtensions::Should(System.UInt16)": {
          "Lines": {
            "415": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.UInt16> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.UInt16>)": {
          "Lines": {
            "425": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Int64> FluentAssertions.AssertionExtensions::Should(System.Int64)": {
          "Lines": {
            "435": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Int64> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Int64>)": {
          "Lines": {
            "445": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.UInt64> FluentAssertions.AssertionExtensions::Should(System.UInt64)": {
          "Lines": {
            "455": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.UInt64> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.UInt64>)": {
          "Lines": {
            "465": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Single> FluentAssertions.AssertionExtensions::Should(System.Single)": {
          "Lines": {
            "475": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Single> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Single>)": {
          "Lines": {
            "485": 0
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NumericAssertions`1<System.Double> FluentAssertions.AssertionExtensions::Should(System.Double)": {
          "Lines": {
            "495": 2
          },
          "Branches": []
        },
        "FluentAssertions.Numeric.NullableNumericAssertions`1<System.Double> FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.Double>)": {
          "Lines": {
            "505": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.StringAssertions FluentAssertions.AssertionExtensions::Should(System.String)": {
          "Lines": {
            "515": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.SimpleTimeSpanAssertions FluentAssertions.AssertionExtensions::Should(System.TimeSpan)": {
          "Lines": {
            "525": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions FluentAssertions.AssertionExtensions::Should(System.Nullable`1<System.TimeSpan>)": {
          "Lines": {
            "535": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeAssertions FluentAssertions.AssertionExtensions::Should(System.Type)": {
          "Lines": {
            "545": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelectorAssertions FluentAssertions.AssertionExtensions::Should(FluentAssertions.Types.TypeSelector)": {
          "Lines": {
            "555": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.ConstructorInfoAssertions FluentAssertions.AssertionExtensions::Should(System.Reflection.ConstructorInfo)": {
          "Lines": {
            "566": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.MethodInfoAssertions FluentAssertions.AssertionExtensions::Should(System.Reflection.MethodInfo)": {
          "Lines": {
            "576": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.MethodInfoSelectorAssertions FluentAssertions.AssertionExtensions::Should(FluentAssertions.Types.MethodInfoSelector)": {
          "Lines": {
            "587": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.PropertyInfoAssertions FluentAssertions.AssertionExtensions::Should(System.Reflection.PropertyInfo)": {
          "Lines": {
            "598": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.PropertyInfoSelectorAssertions FluentAssertions.AssertionExtensions::Should(FluentAssertions.Types.PropertyInfoSelector)": {
          "Lines": {
            "609": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.ActionAssertions FluentAssertions.AssertionExtensions::Should(System.Action)": {
          "Lines": {
            "619": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.AsyncFunctionAssertions FluentAssertions.AssertionExtensions::Should(System.Func`1<System.Threading.Tasks.Task>)": {
          "Lines": {
            "629": 0
          },
          "Branches": []
        },
        "FluentAssertions.Events.IMonitor`1<T> FluentAssertions.AssertionExtensions::Monitor(T,System.Func`1<System.DateTime>)": {
          "Lines": {
            "645": 0
          },
          "Branches": [
            {
              "Line": 645,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 645,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 645,
              "Offset": 8,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 645,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "TTo FluentAssertions.AssertionExtensions::As(System.Object)": {
          "Lines": {
            "660": 0
          },
          "Branches": [
            {
              "Line": 660,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 660,
              "Offset": 6,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\AssertionOptions.cs": {
      "FluentAssertions.AssertionOptions": {
        "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<T> FluentAssertions.AssertionOptions::CloneDefaults()": {
          "Lines": {
            "25": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AssertionOptions::AssertEquivalencyUsing(System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions,FluentAssertions.Equivalency.EquivalencyAssertionOptions>)": {
          "Lines": {
            "37": 0,
            "38": 0
          },
          "Branches": []
        },
        "FluentAssertions.EquivalencyStepCollection FluentAssertions.AssertionOptions::get_EquivalencySteps()": {
          "Lines": {
            "44": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.AssertionOptions::.cctor()": {
          "Lines": {
            "16": 0,
            "20": 0,
            "21": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\CallerIdentifier.cs": {
      "FluentAssertions.CallerIdentifier": {
        "System.String FluentAssertions.CallerIdentifier::DetermineCallerIdentity()": {
          "Lines": {
            "21": 0,
            "23": 0,
            "25": 0,
            "27": 0,
            "29": 0,
            "31": 0,
            "32": 0,
            "36": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 92,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 44,
              "EndOffset": 46,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 60,
              "EndOffset": 62,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 68,
              "EndOffset": 70,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 77,
              "EndOffset": 79,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 77,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 44,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 52,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 60,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 68,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsCustomAssertion(System.Diagnostics.StackFrame)": {
          "Lines": {
            "41": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsDynamic(System.Diagnostics.StackFrame)": {
          "Lines": {
            "46": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsCurrentAssembly(System.Diagnostics.StackFrame)": {
          "Lines": {
            "51": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsDotNet(System.Diagnostics.StackFrame)": {
          "Lines": {
            "56": 0,
            "57": 0
          },
          "Branches": [
            {
              "Line": 56,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 56,
              "Offset": 17,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.CallerIdentifier::ExtractVariableNameFrom(System.Diagnostics.StackFrame)": {
          "Lines": {
            "62": 0,
            "64": 0,
            "65": 0,
            "67": 0,
            "69": 0,
            "71": 0,
            "73": 0,
            "74": 0,
            "76": 0,
            "78": 0,
            "80": 0,
            "81": 0,
            "83": 0,
            "88": 0
          },
          "Branches": [
            {
              "Line": 67,
              "Offset": 17,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 74,
              "Offset": 85,
              "EndOffset": 87,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 119,
              "EndOffset": 121,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 128,
              "EndOffset": 130,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 137,
              "EndOffset": 139,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 146,
              "EndOffset": 148,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 17,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 23,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 32,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 74,
              "Offset": 85,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 119,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 128,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 137,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 146,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.CallerIdentifier::GetSourceCodeLineFrom(System.Diagnostics.StackFrame)": {
          "Lines": {
            "93": 0,
            "94": 0,
            "96": 0,
            "98": 0,
            "103": 0,
            "106": 0,
            "108": 0,
            "110": 0,
            "113": 0,
            "116": 0,
            "119": 0,
            "121": 0
          },
          "Branches": [
            {
              "Line": 96,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 96,
              "Offset": 20,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 96,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 96,
              "Offset": 23,
              "EndOffset": 27,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 64,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 59,
              "EndOffset": 61,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 59,
              "EndOffset": 66,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 113,
              "Offset": 69,
              "EndOffset": 71,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 113,
              "Offset": 69,
              "EndOffset": 74,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.CallerIdentifier::UsesNewKeyword(System.String)": {
          "Lines": {
            "125": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsStringLiteral(System.String)": {
          "Lines": {
            "130": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsNumeric(System.String)": {
          "Lines": {
            "135": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.CallerIdentifier::IsBooleanLiteral(System.String)": {
          "Lines": {
            "140": 0
          },
          "Branches": [
            {
              "Line": 140,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 140,
              "Offset": 11,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.CallerIdentifier::.cctor()": {
          "Lines": {
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Disposable.cs": {
      "FluentAssertions.Disposable": {
        "System.Void FluentAssertions.Disposable::Dispose()": {
          "Lines": {
            "16": 0,
            "17": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Disposable::.ctor(System.Action)": {
          "Lines": {
            "9": 0,
            "11": 0,
            "12": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\EquivalencyStepCollection.cs": {
      "FluentAssertions.EquivalencyStepCollection": {
        "System.Collections.Generic.IEnumerator`1<FluentAssertions.Equivalency.IEquivalencyStep> FluentAssertions.EquivalencyStepCollection::GetEnumerator()": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Collections.IEnumerator FluentAssertions.EquivalencyStepCollection::System.Collections.IEnumerable.GetEnumerator()": {
          "Lines": {
            "33": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::Add()": {
          "Lines": {
            "43": 0,
            "44": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::AddAfter()": {
          "Lines": {
            "52": 0,
            "54": 0,
            "55": 0,
            "57": 0,
            "60": 0,
            "61": 0
          },
          "Branches": [
            {
              "Line": 54,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 32,
              "EndOffset": 57,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 64,
              "EndOffset": 87,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::Insert()": {
          "Lines": {
            "69": 0,
            "70": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::InsertBefore()": {
          "Lines": {
            "78": 0,
            "80": 0,
            "81": 0,
            "83": 0,
            "86": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 80,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 32,
              "EndOffset": 57,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 64,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::Remove()": {
          "Lines": {
            "95": 0,
            "96": 0
          },
          "Branches": [
            {
              "Line": 95,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 95,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::Clear()": {
          "Lines": {
            "103": 0,
            "104": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::Reset()": {
          "Lines": {
            "108": 0,
            "109": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.List`1<FluentAssertions.Equivalency.IEquivalencyStep> FluentAssertions.EquivalencyStepCollection::GetDefaultSteps()": {
          "Lines": {
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "126": 0,
            "127": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.EquivalencyStepCollection::.ctor()": {
          "Lines": {
            "21": 0,
            "23": 0,
            "24": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\EventRaisingExtensions.cs": {
      "FluentAssertions.EventRaisingExtensions": {
        "FluentAssertions.Events.IEventRecorder FluentAssertions.EventRaisingExtensions::WithSender(FluentAssertions.Events.IEventRecorder,System.Object)": {
          "Lines": {
            "22": 0,
            "24": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "37": 0
          },
          "Branches": [
            {
              "Line": 22,
              "Offset": 107,
              "EndOffset": 9,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 26,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 107,
              "EndOffset": 109,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Events.IEventRecorder FluentAssertions.EventRaisingExtensions::WithArgs(FluentAssertions.Events.IEventRecorder,System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>)": {
          "Lines": {
            "45": 0,
            "47": 0,
            "49": 0,
            "52": 0,
            "54": 0,
            "55": 0,
            "58": 0
          },
          "Branches": [
            {
              "Line": 47,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 39,
              "EndOffset": 104,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 122,
              "EndOffset": 124,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 122,
              "EndOffset": 155,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Events.IEventRecorder FluentAssertions.EventRaisingExtensions::WithArgs(FluentAssertions.Events.IEventRecorder,System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>[])": {
          "Lines": {
            "66": 0,
            "68": 0,
            "70": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "76": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "87": 0,
            "89": 0,
            "90": 0,
            "93": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 26,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 68,
              "Offset": 87,
              "EndOffset": 89,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 68,
              "Offset": 87,
              "EndOffset": 152,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 170,
              "EndOffset": 172,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 207,
              "EndOffset": 209,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 207,
              "EndOffset": 232,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 243,
              "EndOffset": 245,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 243,
              "EndOffset": 268,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 170,
              "EndOffset": 285,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.EventRaisingExtensions/<>c__DisplayClass1_0`1": {
        "System.Boolean FluentAssertions.EventRaisingExtensions/<>c__DisplayClass1_0`1::<WithArgs>b__0(FluentAssertions.Events.RecordedEvent)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 52,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 18,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.EventRaisingExtensions/<>c__DisplayClass2_0`1": {
        "System.Boolean FluentAssertions.EventRaisingExtensions/<>c__DisplayClass2_0`1::<WithArgs>b__1(FluentAssertions.Events.RecordedEvent)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 79,
              "Offset": 78,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 49,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 79,
              "Offset": 78,
              "EndOffset": 80,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\NumericAssertionsExtensions.cs": {
      "FluentAssertions.NumericAssertionsExtensions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.SByte>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.SByte>,System.SByte,System.Byte,System.String,System.Object[])": {
          "Lines": {
            "33": 0,
            "34": 0,
            "35": 0,
            "37": 0,
            "40": 0,
            "41": 0,
            "43": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "52": 0
          },
          "Branches": [
            {
              "Line": 35,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 19,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 31,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 43,
              "EndOffset": 54,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Byte>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Byte>,System.Byte,System.Byte,System.String,System.Object[])": {
          "Lines": {
            "76": 0,
            "77": 0,
            "78": 0,
            "80": 0,
            "83": 0,
            "84": 0,
            "86": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "93": 0,
            "95": 0
          },
          "Branches": [
            {
              "Line": 78,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 78,
              "Offset": 19,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 30,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 45,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Int16>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Int16>,System.Int16,System.UInt16,System.String,System.Object[])": {
          "Lines": {
            "119": 0,
            "120": 0,
            "121": 0,
            "123": 0,
            "126": 0,
            "127": 0,
            "129": 0,
            "132": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "138": 0
          },
          "Branches": [
            {
              "Line": 121,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 121,
              "Offset": 19,
              "EndOffset": 27,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 127,
              "Offset": 34,
              "EndOffset": 36,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 127,
              "Offset": 34,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 49,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.UInt16>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.UInt16>,System.UInt16,System.UInt16,System.String,System.Object[])": {
          "Lines": {
            "162": 0,
            "163": 0,
            "164": 0,
            "166": 0,
            "169": 0,
            "170": 0,
            "172": 0,
            "175": 0,
            "176": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "181": 0
          },
          "Branches": [
            {
              "Line": 164,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 164,
              "Offset": 19,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 170,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 170,
              "Offset": 30,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 175,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 175,
              "Offset": 45,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Int32>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Int32>,System.Int32,System.UInt32,System.String,System.Object[])": {
          "Lines": {
            "205": 0,
            "206": 0,
            "207": 0,
            "209": 0,
            "212": 0,
            "213": 0,
            "215": 0,
            "218": 0,
            "219": 0,
            "220": 0,
            "221": 0,
            "222": 0,
            "224": 0
          },
          "Branches": [
            {
              "Line": 207,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 207,
              "Offset": 21,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 38,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 218,
              "Offset": 53,
              "EndOffset": 55,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 218,
              "Offset": 53,
              "EndOffset": 64,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.UInt32>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.UInt32>,System.UInt32,System.UInt32,System.String,System.Object[])": {
          "Lines": {
            "248": 0,
            "249": 0,
            "250": 0,
            "252": 0,
            "255": 0,
            "256": 0,
            "258": 0,
            "261": 0,
            "262": 0,
            "263": 0,
            "264": 0,
            "265": 0,
            "267": 0
          },
          "Branches": [
            {
              "Line": 250,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 250,
              "Offset": 18,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 256,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 256,
              "Offset": 28,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 261,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 261,
              "Offset": 39,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Int64>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Int64>,System.Int64,System.UInt64,System.String,System.Object[])": {
          "Lines": {
            "291": 0,
            "292": 0,
            "293": 0,
            "295": 0,
            "296": 0,
            "297": 0,
            "298": 0,
            "299": 0,
            "301": 0
          },
          "Branches": [
            {
              "Line": 295,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 295,
              "Offset": 35,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.UInt64>> FluentAssertions.NumericAssertionsExtensions::BeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.UInt64>,System.UInt64,System.UInt64,System.String,System.Object[])": {
          "Lines": {
            "325": 0,
            "326": 0,
            "327": 0,
            "329": 0,
            "332": 0,
            "333": 0,
            "335": 0,
            "338": 0,
            "339": 0,
            "340": 0,
            "341": 0,
            "342": 0,
            "344": 0
          },
          "Branches": [
            {
              "Line": 327,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 327,
              "Offset": 18,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 333,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 333,
              "Offset": 29,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 338,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 338,
              "Offset": 41,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.SByte>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.SByte>,System.SByte,System.Byte,System.String,System.Object[])": {
          "Lines": {
            "368": 0,
            "369": 0,
            "370": 0,
            "372": 0,
            "375": 0,
            "376": 0,
            "378": 0,
            "381": 0,
            "382": 0,
            "383": 0,
            "384": 0,
            "385": 0,
            "387": 0
          },
          "Branches": [
            {
              "Line": 370,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 370,
              "Offset": 19,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 376,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 376,
              "Offset": 31,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 381,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 381,
              "Offset": 43,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Byte>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Byte>,System.Byte,System.Byte,System.String,System.Object[])": {
          "Lines": {
            "411": 0,
            "412": 0,
            "413": 0,
            "415": 0,
            "418": 0,
            "419": 0,
            "421": 0,
            "424": 0,
            "425": 0,
            "426": 0,
            "427": 0,
            "428": 0,
            "430": 0
          },
          "Branches": [
            {
              "Line": 413,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 413,
              "Offset": 19,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 419,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 419,
              "Offset": 30,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 424,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 424,
              "Offset": 45,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Int16>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Int16>,System.Int16,System.UInt16,System.String,System.Object[])": {
          "Lines": {
            "454": 0,
            "455": 0,
            "456": 0,
            "458": 0,
            "461": 0,
            "462": 0,
            "464": 0,
            "467": 0,
            "468": 0,
            "469": 0,
            "470": 0,
            "471": 0,
            "473": 0
          },
          "Branches": [
            {
              "Line": 456,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 456,
              "Offset": 19,
              "EndOffset": 27,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 462,
              "Offset": 34,
              "EndOffset": 36,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 462,
              "Offset": 34,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 467,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 467,
              "Offset": 49,
              "EndOffset": 57,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.UInt16>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.UInt16>,System.UInt16,System.UInt16,System.String,System.Object[])": {
          "Lines": {
            "497": 0,
            "498": 0,
            "499": 0,
            "501": 0,
            "504": 0,
            "505": 0,
            "507": 0,
            "510": 0,
            "511": 0,
            "512": 0,
            "513": 0,
            "514": 0,
            "516": 0
          },
          "Branches": [
            {
              "Line": 499,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 499,
              "Offset": 19,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 505,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 505,
              "Offset": 30,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 510,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 510,
              "Offset": 45,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Int32>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Int32>,System.Int32,System.UInt32,System.String,System.Object[])": {
          "Lines": {
            "540": 0,
            "541": 0,
            "542": 0,
            "544": 0,
            "547": 0,
            "548": 0,
            "550": 0,
            "553": 0,
            "554": 0,
            "555": 0,
            "556": 0,
            "557": 0,
            "559": 0
          },
          "Branches": [
            {
              "Line": 542,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 542,
              "Offset": 21,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 548,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 548,
              "Offset": 38,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 553,
              "Offset": 53,
              "EndOffset": 55,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 553,
              "Offset": 53,
              "EndOffset": 61,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.UInt32>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.UInt32>,System.UInt32,System.UInt32,System.String,System.Object[])": {
          "Lines": {
            "583": 0,
            "584": 0,
            "585": 0,
            "587": 0,
            "590": 0,
            "591": 0,
            "593": 0,
            "596": 0,
            "597": 0,
            "598": 0,
            "599": 0,
            "600": 0,
            "602": 0
          },
          "Branches": [
            {
              "Line": 585,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 585,
              "Offset": 18,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 591,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 591,
              "Offset": 28,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 596,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 596,
              "Offset": 39,
              "EndOffset": 47,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Int64>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.Int64>,System.Int64,System.UInt64,System.String,System.Object[])": {
          "Lines": {
            "626": 0,
            "627": 0,
            "628": 0,
            "630": 0,
            "631": 0,
            "632": 0,
            "633": 0,
            "634": 0,
            "636": 0
          },
          "Branches": [
            {
              "Line": 630,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 630,
              "Offset": 35,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.UInt64>> FluentAssertions.NumericAssertionsExtensions::NotBeCloseTo(FluentAssertions.Numeric.NumericAssertions`1<System.UInt64>,System.UInt64,System.UInt64,System.String,System.Object[])": {
          "Lines": {
            "660": 0,
            "661": 0,
            "662": 0,
            "664": 0,
            "667": 0,
            "668": 0,
            "670": 0,
            "673": 0,
            "674": 0,
            "675": 0,
            "676": 0,
            "677": 0,
            "679": 0
          },
          "Branches": [
            {
              "Line": 662,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 662,
              "Offset": 18,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 668,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 668,
              "Offset": 29,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 673,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 673,
              "Offset": 41,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<System.Single>> FluentAssertions.NumericAssertionsExtensions::BeApproximately(FluentAssertions.Numeric.NullableNumericAssertions`1<System.Single>,System.Single,System.Single,System.String,System.Object[])": {
          "Lines": {
            "703": 0,
            "704": 0,
            "705": 0,
            "706": 0,
            "708": 0,
            "709": 0,
            "711": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Single>> FluentAssertions.NumericAssertionsExtensions::BeApproximately(FluentAssertions.Numeric.NumericAssertions`1<System.Single>,System.Single,System.Single,System.String,System.Object[])": {
          "Lines": {
            "735": 0,
            "737": 0,
            "738": 0,
            "739": 0,
            "740": 0,
            "741": 0,
            "743": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<System.Double>> FluentAssertions.NumericAssertionsExtensions::BeApproximately(FluentAssertions.Numeric.NullableNumericAssertions`1<System.Double>,System.Double,System.Double,System.String,System.Object[])": {
          "Lines": {
            "767": 0,
            "768": 0,
            "769": 0,
            "770": 0,
            "772": 0,
            "773": 0,
            "775": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Double>> FluentAssertions.NumericAssertionsExtensions::BeApproximately(FluentAssertions.Numeric.NumericAssertions`1<System.Double>,System.Double,System.Double,System.String,System.Object[])": {
          "Lines": {
            "799": 0,
            "801": 0,
            "802": 0,
            "803": 0,
            "804": 0,
            "805": 0,
            "807": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<System.Decimal>> FluentAssertions.NumericAssertionsExtensions::BeApproximately(FluentAssertions.Numeric.NullableNumericAssertions`1<System.Decimal>,System.Decimal,System.Decimal,System.String,System.Object[])": {
          "Lines": {
            "831": 0,
            "832": 0,
            "833": 0,
            "834": 0,
            "836": 0,
            "837": 0,
            "839": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Decimal>> FluentAssertions.NumericAssertionsExtensions::BeApproximately(FluentAssertions.Numeric.NumericAssertions`1<System.Decimal>,System.Decimal,System.Decimal,System.String,System.Object[])": {
          "Lines": {
            "863": 0,
            "865": 0,
            "866": 0,
            "867": 0,
            "868": 0,
            "869": 0,
            "871": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<System.Single>> FluentAssertions.NumericAssertionsExtensions::NotBeApproximately(FluentAssertions.Numeric.NullableNumericAssertions`1<System.Single>,System.Single,System.Single,System.String,System.Object[])": {
          "Lines": {
            "895": 0,
            "896": 0,
            "897": 0,
            "898": 0,
            "900": 0,
            "901": 0,
            "903": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Single>> FluentAssertions.NumericAssertionsExtensions::NotBeApproximately(FluentAssertions.Numeric.NumericAssertions`1<System.Single>,System.Single,System.Single,System.String,System.Object[])": {
          "Lines": {
            "927": 0,
            "929": 0,
            "930": 0,
            "931": 0,
            "932": 0,
            "933": 0,
            "935": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<System.Double>> FluentAssertions.NumericAssertionsExtensions::NotBeApproximately(FluentAssertions.Numeric.NullableNumericAssertions`1<System.Double>,System.Double,System.Double,System.String,System.Object[])": {
          "Lines": {
            "959": 0,
            "960": 0,
            "961": 0,
            "962": 0,
            "964": 0,
            "965": 0,
            "967": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Double>> FluentAssertions.NumericAssertionsExtensions::NotBeApproximately(FluentAssertions.Numeric.NumericAssertions`1<System.Double>,System.Double,System.Double,System.String,System.Object[])": {
          "Lines": {
            "991": 0,
            "993": 0,
            "994": 0,
            "995": 0,
            "996": 0,
            "997": 0,
            "999": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<System.Decimal>> FluentAssertions.NumericAssertionsExtensions::NotBeApproximately(FluentAssertions.Numeric.NullableNumericAssertions`1<System.Decimal>,System.Decimal,System.Decimal,System.String,System.Object[])": {
          "Lines": {
            "1023": 0,
            "1024": 0,
            "1025": 0,
            "1026": 0,
            "1028": 0,
            "1029": 0,
            "1031": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<System.Decimal>> FluentAssertions.NumericAssertionsExtensions::NotBeApproximately(FluentAssertions.Numeric.NumericAssertions`1<System.Decimal>,System.Decimal,System.Decimal,System.String,System.Object[])": {
          "Lines": {
            "1055": 0,
            "1057": 0,
            "1058": 0,
            "1059": 0,
            "1060": 0,
            "1061": 0,
            "1063": 0
          },
          "Branches": []
        },
        "System.Int64 FluentAssertions.NumericAssertionsExtensions::GetMinValue(System.Int64,System.UInt64)": {
          "Lines": {
            "1068": 0,
            "1069": 0,
            "1070": 0,
            "1071": 0,
            "1072": 0,
            "1074": 0,
            "1076": 0,
            "1079": 0
          },
          "Branches": [
            {
              "Line": 1068,
              "Offset": 10,
              "EndOffset": 12,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1068,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1068,
              "Offset": 15,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1068,
              "Offset": 10,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1074,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1074,
              "Offset": 40,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Int64 FluentAssertions.NumericAssertionsExtensions::GetMaxValue(System.Int64,System.UInt64)": {
          "Lines": {
            "1084": 0,
            "1085": 0,
            "1086": 0,
            "1087": 0,
            "1088": 0,
            "1090": 0,
            "1092": 0,
            "1095": 0
          },
          "Branches": [
            {
              "Line": 1084,
              "Offset": 10,
              "EndOffset": 12,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1084,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1084,
              "Offset": 15,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1084,
              "Offset": 10,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1090,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1090,
              "Offset": 39,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\ObjectAssertionsExtensions.cs": {
      "FluentAssertions.ObjectAssertionsExtensions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.ObjectAssertionsExtensions::BeBinarySerializable(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])": {
          "Lines": {
            "30": 0
          },
          "Branches": [
            {
              "Line": 30,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.ObjectAssertionsExtensions::BeBinarySerializable(FluentAssertions.Primitives.ObjectAssertions,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<T>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<T>>,System.String,System.Object[])": {
          "Lines": {
            "50": 0,
            "52": 0,
            "53": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "67": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.ObjectAssertionsExtensions::BeDataContractSerializable(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])": {
          "Lines": {
            "84": 0
          },
          "Branches": [
            {
              "Line": 84,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.ObjectAssertionsExtensions::BeDataContractSerializable(FluentAssertions.Primitives.ObjectAssertions,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<T>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<T>>,System.String,System.Object[])": {
          "Lines": {
            "103": 0,
            "105": 0,
            "106": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "120": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.ObjectAssertionsExtensions::CreateCloneUsingBinarySerializer(System.Object)": {
          "Lines": {
            "125": 0,
            "126": 0,
            "127": 0,
            "128": 0,
            "129": 0,
            "131": 0,
            "132": 0,
            "133": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.ObjectAssertionsExtensions::CreateCloneUsingDataContractSerializer(System.Object)": {
          "Lines": {
            "160": 0,
            "162": 0,
            "163": 0,
            "164": 0,
            "165": 0,
            "167": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.ObjectAssertionsExtensions::BeXmlSerializable(FluentAssertions.Primitives.ObjectAssertions,System.String,System.Object[])": {
          "Lines": {
            "185": 0,
            "187": 0,
            "188": 0,
            "189": 0,
            "190": 0,
            "192": 0,
            "193": 0,
            "194": 0,
            "195": 0,
            "196": 0,
            "197": 0,
            "198": 0,
            "200": 0
          },
          "Branches": [
            {
              "Line": 187,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 187,
              "Offset": 28,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Object FluentAssertions.ObjectAssertionsExtensions::CreateCloneUsingXmlSerializer(System.Object)": {
          "Lines": {
            "205": 0,
            "206": 0,
            "207": 0,
            "209": 0,
            "210": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.ObjectAssertionsExtensions/SimpleBinder": {
        "System.Type FluentAssertions.ObjectAssertionsExtensions/SimpleBinder::BindToType(System.String,System.String)": {
          "Lines": {
            "147": 0,
            "149": 0,
            "153": 0
          },
          "Branches": [
            {
              "Line": 147,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 147,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 147,
              "Offset": 17,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 147,
              "Offset": 41,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.ObjectAssertionsExtensions/SimpleBinder::.ctor(System.Type)": {
          "Lines": {
            "140": 0,
            "142": 0,
            "143": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\TypeEnumerableExtensions.cs": {
      "FluentAssertions.TypeEnumerableExtensions": {
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatAreDecoratedWith(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatAreDecoratedWithOrInherit(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatAreNotDecoratedWith(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "37": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatAreNotDecoratedWithOrInherit(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "46": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatAreInNamespace(System.Collections.Generic.IEnumerable`1<System.Type>,System.String)": {
          "Lines": {
            "54": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatAreUnderNamespace(System.Collections.Generic.IEnumerable`1<System.Type>,System.String)": {
          "Lines": {
            "62": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatDeriveFrom(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "70": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.TypeEnumerableExtensions::ThatImplement(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "78": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\TypeExtensions.cs": {
      "FluentAssertions.TypeExtensions": {
        "FluentAssertions.Types.TypeSelector FluentAssertions.TypeExtensions::Types(System.Reflection.Assembly)": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.TypeExtensions::Types(System.Type)": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.TypeExtensions::Types(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "38": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.TypeExtensions::Methods(System.Type)": {
          "Lines": {
            "46": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.TypeExtensions::Methods(FluentAssertions.Types.TypeSelector)": {
          "Lines": {
            "54": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.TypeExtensions::Properties(System.Type)": {
          "Lines": {
            "62": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.TypeExtensions::Properties(FluentAssertions.Types.TypeSelector)": {
          "Lines": {
            "70": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XmlAssertionExtensions.cs": {
      "FluentAssertions.XmlAssertionExtensions": {
        "FluentAssertions.Xml.XmlNodeAssertions FluentAssertions.XmlAssertionExtensions::Should(System.Xml.XmlNode)": {
          "Lines": {
            "14": 0
          },
          "Branches": []
        },
        "FluentAssertions.Xml.XmlElementAssertions FluentAssertions.XmlAssertionExtensions::Should(System.Xml.XmlElement)": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XAttributeAssertions.cs": {
      "FluentAssertions.Xml.XAttributeAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XAttributeAssertions> FluentAssertions.Xml.XAttributeAssertions::Be(System.Xml.Linq.XAttribute)": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XAttributeAssertions> FluentAssertions.Xml.XAttributeAssertions::Be(System.Xml.Linq.XAttribute,System.String,System.Object[])": {
          "Lines": {
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 44,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 27,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XAttributeAssertions> FluentAssertions.Xml.XAttributeAssertions::NotBe(System.Xml.Linq.XAttribute)": {
          "Lines": {
            "59": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XAttributeAssertions> FluentAssertions.Xml.XAttributeAssertions::NotBe(System.Xml.Linq.XAttribute,System.String,System.Object[])": {
          "Lines": {
            "76": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "81": 0
          },
          "Branches": [
            {
              "Line": 76,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 27,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XAttributeAssertions> FluentAssertions.Xml.XAttributeAssertions::HaveValue(System.String)": {
          "Lines": {
            "90": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XAttributeAssertions> FluentAssertions.Xml.XAttributeAssertions::HaveValue(System.String,System.String,System.Object[])": {
          "Lines": {
            "106": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "112": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XAttributeAssertions::get_Identifier()": {
          "Lines": {
            "118": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Xml.XAttributeAssertions::.ctor(System.Xml.Linq.XAttribute)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XDocumentAssertions.cs": {
      "FluentAssertions.Xml.XDocumentAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::Be(System.Xml.Linq.XDocument)": {
          "Lines": {
            "32": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::Be(System.Xml.Linq.XDocument,System.String,System.Object[])": {
          "Lines": {
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "54": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::NotBe(System.Xml.Linq.XDocument)": {
          "Lines": {
            "64": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::NotBe(System.Xml.Linq.XDocument,System.String,System.Object[])": {
          "Lines": {
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 0,
            "91": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::BeEquivalentTo(System.Xml.Linq.XDocument)": {
          "Lines": {
            "101": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::BeEquivalentTo(System.Xml.Linq.XDocument,System.String,System.Object[])": {
          "Lines": {
            "118": 0,
            "119": 0,
            "121": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::NotBeEquivalentTo(System.Xml.Linq.XDocument)": {
          "Lines": {
            "131": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XDocumentAssertions> FluentAssertions.Xml.XDocumentAssertions::NotBeEquivalentTo(System.Xml.Linq.XDocument,System.String,System.Object[])": {
          "Lines": {
            "148": 0,
            "149": 0,
            "151": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveRoot(System.String)": {
          "Lines": {
            "161": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveRoot(System.Xml.Linq.XName)": {
          "Lines": {
            "171": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveRoot(System.String,System.String,System.Object[])": {
          "Lines": {
            "189": 0,
            "191": 0,
            "192": 0,
            "195": 0
          },
          "Branches": [
            {
              "Line": 189,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 189,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveRoot(System.Xml.Linq.XName,System.String,System.Object[])": {
          "Lines": {
            "212": 0,
            "214": 0,
            "217": 0,
            "219": 0,
            "220": 0,
            "223": 0,
            "225": 0,
            "226": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "231": 0
          },
          "Branches": [
            {
              "Line": 212,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 212,
              "Offset": 6,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 217,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 217,
              "Offset": 26,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 62,
              "EndOffset": 64,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 62,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveElement(System.String)": {
          "Lines": {
            "243": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveElement(System.Xml.Linq.XName)": {
          "Lines": {
            "255": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveElement(System.String,System.String,System.Object[])": {
          "Lines": {
            "275": 0,
            "277": 0,
            "278": 0,
            "281": 0
          },
          "Branches": [
            {
              "Line": 275,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 275,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XDocumentAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XDocumentAssertions::HaveElement(System.Xml.Linq.XName,System.String,System.Object[])": {
          "Lines": {
            "301": 0,
            "303": 0,
            "306": 0,
            "308": 0,
            "309": 0,
            "312": 0,
            "314": 0,
            "315": 0,
            "316": 0,
            "317": 0,
            "318": 0,
            "320": 0,
            "321": 0,
            "322": 0,
            "323": 0,
            "324": 0,
            "325": 0,
            "327": 0
          },
          "Branches": [
            {
              "Line": 301,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 301,
              "Offset": 6,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 306,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 306,
              "Offset": 26,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Xml.XDocumentAssertions::get_Identifier()": {
          "Lines": {
            "333": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Xml.XDocumentAssertions::.ctor(System.Xml.Linq.XDocument)": {
          "Lines": {
            "20": 0,
            "22": 0,
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XElementAssertions.cs": {
      "FluentAssertions.Xml.XElementAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::Be(System.Xml.Linq.XElement)": {
          "Lines": {
            "32": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::Be(System.Xml.Linq.XElement,System.String,System.Object[])": {
          "Lines": {
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "55": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::NotBe(System.Xml.Linq.XElement)": {
          "Lines": {
            "66": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::NotBe(System.Xml.Linq.XElement,System.String,System.Object[])": {
          "Lines": {
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "89": 0
          },
          "Branches": [
            {
              "Line": 84,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 11,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 14,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::BeEquivalentTo(System.Xml.Linq.XElement)": {
          "Lines": {
            "100": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::BeEquivalentTo(System.Xml.Linq.XElement,System.String,System.Object[])": {
          "Lines": {
            "118": 0,
            "119": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "125": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::NotBeEquivalentTo(System.Xml.Linq.XElement)": {
          "Lines": {
            "136": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::NotBeEquivalentTo(System.Xml.Linq.XElement,System.String,System.Object[])": {
          "Lines": {
            "154": 0,
            "155": 0,
            "157": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::HaveValue(System.String)": {
          "Lines": {
            "166": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::HaveValue(System.String,System.String,System.Object[])": {
          "Lines": {
            "182": 0,
            "183": 0,
            "184": 0,
            "185": 0,
            "186": 0,
            "188": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::HaveAttribute(System.String,System.String)": {
          "Lines": {
            "199": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::HaveAttribute(System.Xml.Linq.XName,System.String)": {
          "Lines": {
            "210": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::HaveAttribute(System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "229": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XElementAssertions> FluentAssertions.Xml.XElementAssertions::HaveAttribute(System.Xml.Linq.XName,System.String,System.String,System.Object[])": {
          "Lines": {
            "248": 0,
            "249": 0,
            "251": 0,
            "252": 0,
            "253": 0,
            "254": 0,
            "255": 0,
            "256": 0,
            "258": 0,
            "259": 0,
            "260": 0,
            "261": 0,
            "262": 0,
            "264": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XElementAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XElementAssertions::HaveElement(System.String)": {
          "Lines": {
            "274": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XElementAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XElementAssertions::HaveElement(System.Xml.Linq.XName)": {
          "Lines": {
            "284": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XElementAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XElementAssertions::HaveElement(System.String,System.String,System.Object[])": {
          "Lines": {
            "301": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XElementAssertions,System.Xml.Linq.XElement> FluentAssertions.Xml.XElementAssertions::HaveElement(System.Xml.Linq.XName,System.String,System.Object[])": {
          "Lines": {
            "318": 0,
            "319": 0,
            "320": 0,
            "321": 0,
            "322": 0,
            "323": 0,
            "325": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XElementAssertions::get_Identifier()": {
          "Lines": {
            "331": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Xml.XElementAssertions::.ctor(System.Xml.Linq.XElement)": {
          "Lines": {
            "19": 0,
            "21": 0,
            "22": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XmlElementAssertions.cs": {
      "FluentAssertions.Xml.XmlElementAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XmlElementAssertions> FluentAssertions.Xml.XmlElementAssertions::HaveInnerText(System.String)": {
          "Lines": {
            "34": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XmlElementAssertions> FluentAssertions.Xml.XmlElementAssertions::HaveInnerText(System.String,System.String,System.Object[])": {
          "Lines": {
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "57": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XmlElementAssertions> FluentAssertions.Xml.XmlElementAssertions::HaveAttribute(System.String,System.String)": {
          "Lines": {
            "69": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XmlElementAssertions> FluentAssertions.Xml.XmlElementAssertions::HaveAttribute(System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "88": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XmlElementAssertions> FluentAssertions.Xml.XmlElementAssertions::HaveAttributeWithNamespace(System.String,System.String,System.String)": {
          "Lines": {
            "100": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Xml.XmlElementAssertions> FluentAssertions.Xml.XmlElementAssertions::HaveAttributeWithNamespace(System.String,System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "123": 0,
            "125": 0,
            "126": 0,
            "127": 0,
            "129": 0,
            "130": 0,
            "131": 0,
            "132": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "137": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "141": 0,
            "142": 0,
            "144": 0
          },
          "Branches": [
            {
              "Line": 125,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 125,
              "Offset": 25,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XmlElementAssertions,System.Xml.XmlElement> FluentAssertions.Xml.XmlElementAssertions::HaveElement(System.String)": {
          "Lines": {
            "154": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XmlElementAssertions,System.Xml.XmlElement> FluentAssertions.Xml.XmlElementAssertions::HaveElement(System.String,System.String,System.Object[])": {
          "Lines": {
            "174": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XmlElementAssertions,System.Xml.XmlElement> FluentAssertions.Xml.XmlElementAssertions::HaveElementWithNamespace(System.String,System.String)": {
          "Lines": {
            "186": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Xml.XmlElementAssertions,System.Xml.XmlElement> FluentAssertions.Xml.XmlElementAssertions::HaveElementWithNamespace(System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "208": 0,
            "210": 0,
            "211": 0,
            "212": 0,
            "214": 0,
            "215": 0,
            "216": 0,
            "217": 0,
            "218": 0,
            "219": 0,
            "221": 0
          },
          "Branches": [
            {
              "Line": 210,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 210,
              "Offset": 20,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Xml.XmlElementAssertions::.ctor(System.Xml.XmlElement)": {
          "Lines": {
            "23": 0,
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XmlNodeAssertions.cs": {
      "FluentAssertions.Xml.XmlNodeAssertions": {
        "System.Void FluentAssertions.Xml.XmlNodeAssertions::.ctor(System.Xml.XmlNode)": {
          "Lines": {
            "15": 0,
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XmlNodeAssertionsofTSubjectTAssertions.cs": {
      "FluentAssertions.Xml.XmlNodeAssertions`2": {
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Xml.XmlNodeAssertions`2::BeEquivalentTo(System.Xml.XmlNode)": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Xml.XmlNodeAssertions`2::BeEquivalentTo(System.Xml.XmlNode,System.String,System.Object[])": {
          "Lines": {
            "44": 0,
            "45": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "51": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Xml.XmlNodeAssertions`2::NotBeEquivalentTo(System.Xml.XmlNode)": {
          "Lines": {
            "61": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Xml.XmlNodeAssertions`2::NotBeEquivalentTo(System.Xml.XmlNode,System.String,System.Object[])": {
          "Lines": {
            "79": 0,
            "80": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "86": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XmlNodeAssertions`2::get_Identifier()": {
          "Lines": {
            "92": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Xml.XmlNodeAssertions`2::.ctor(TSubject)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XmlNodeFormatter.cs": {
      "FluentAssertions.Xml.XmlNodeFormatter": {
        "System.Boolean FluentAssertions.Xml.XmlNodeFormatter::CanHandle(System.Object)": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XmlNodeFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "19": 0,
            "23": 0,
            "25": 0,
            "28": 0
          },
          "Branches": [
            {
              "Line": 23,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 20,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Xml\\XmlReaderValidator.cs": {
      "FluentAssertions.Xml.XmlReaderValidator": {
        "System.String FluentAssertions.Xml.XmlReaderValidator::GetCurrentLocation()": {
          "Lines": {
            "15": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Xml.XmlReaderValidator::Validate(System.Boolean)": {
          "Lines": {
            "42": 0,
            "44": 0,
            "46": 0,
            "49": 0,
            "51": 0,
            "53": 0
          },
          "Branches": [
            {
              "Line": 44,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 8,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 11,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 38,
              "EndOffset": 66,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 41,
              "EndOffset": 66,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Xml.XmlReaderValidator/ValidationResult FluentAssertions.Xml.XmlReaderValidator::Validate()": {
          "Lines": {
            "57": 0,
            "58": 0,
            "59": 0,
            "61": 0,
            "63": 0,
            "64": 0,
            "67": 0,
            "69": 0,
            "72": 0,
            "73": 0,
            "75": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "82": 0,
            "85": 0,
            "90": 0,
            "91": 0,
            "93": 0,
            "94": 0,
            "96": 0,
            "99": 0,
            "101": 0,
            "104": 0,
            "105": 0,
            "107": 0,
            "108": 0,
            "111": 0,
            "113": 0,
            "114": 0,
            "117": 0,
            "119": 0,
            "120": 0,
            "123": 0
          },
          "Branches": [
            {
              "Line": 59,
              "Offset": 352,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 17,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 51,
              "EndOffset": 53,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 51,
              "EndOffset": 117,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 133,
              "EndOffset": 135,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 137,
              "EndOffset": 139,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 133,
              "EndOffset": 146,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 73,
              "Offset": 154,
              "EndOffset": 156,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 73,
              "Offset": 154,
              "EndOffset": 158,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 198,
              "EndOffset": 200,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 142,
              "EndOffset": 214,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 137,
              "EndOffset": 228,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 142,
              "EndOffset": 237,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 198,
              "EndOffset": 275,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 276,
              "EndOffset": 278,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 276,
              "EndOffset": 280,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 59,
              "Offset": 339,
              "EndOffset": 341,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 59,
              "Offset": 339,
              "EndOffset": 357,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            },
            {
              "Line": 59,
              "Offset": 352,
              "EndOffset": 357,
              "Path": 0,
              "Ordinal": 16,
              "Hits": 0
            },
            {
              "Line": 111,
              "Offset": 368,
              "EndOffset": 370,
              "Path": 0,
              "Ordinal": 18,
              "Hits": 0
            },
            {
              "Line": 111,
              "Offset": 368,
              "EndOffset": 401,
              "Path": 1,
              "Ordinal": 19,
              "Hits": 0
            },
            {
              "Line": 117,
              "Offset": 412,
              "EndOffset": 414,
              "Path": 0,
              "Ordinal": 20,
              "Hits": 0
            },
            {
              "Line": 117,
              "Offset": 412,
              "EndOffset": 445,
              "Path": 1,
              "Ordinal": 21,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Xml.XmlReaderValidator/ValidationResult FluentAssertions.Xml.XmlReaderValidator::ValidateAttributes()": {
          "Lines": {
            "160": 0,
            "161": 0,
            "163": 0,
            "165": 0,
            "166": 0,
            "167": 0,
            "169": 0,
            "171": 0,
            "172": 0,
            "175": 0,
            "177": 0,
            "178": 0,
            "182": 0,
            "184": 0,
            "185": 0,
            "186": 0,
            "187": 0,
            "189": 0,
            "190": 0,
            "193": 0,
            "194": 0
          },
          "Branches": [
            {
              "Line": 163,
              "Offset": 240,
              "EndOffset": 54,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 169,
              "Offset": 94,
              "EndOffset": 96,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 169,
              "Offset": 94,
              "EndOffset": 142,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 175,
              "Offset": 165,
              "EndOffset": 167,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 175,
              "Offset": 165,
              "EndOffset": 234,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 163,
              "Offset": 240,
              "EndOffset": 245,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 274,
              "EndOffset": 276,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 274,
              "EndOffset": 332,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IList`1<FluentAssertions.Xml.XmlReaderValidator/AttributeData> FluentAssertions.Xml.XmlReaderValidator::GetAttributes(System.Xml.XmlReader)": {
          "Lines": {
            "198": 0,
            "200": 0,
            "204": 0,
            "206": 0,
            "209": 0,
            "212": 0
          },
          "Branches": [
            {
              "Line": 200,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 209,
              "Offset": 73,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 204,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 204,
              "Offset": 30,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 12,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 209,
              "Offset": 73,
              "EndOffset": 75,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Xml.XmlReaderValidator/ValidationResult FluentAssertions.Xml.XmlReaderValidator::ValidateStartElement()": {
          "Lines": {
            "217": 0,
            "219": 0,
            "220": 0,
            "223": 0,
            "225": 0,
            "226": 0,
            "229": 0
          },
          "Branches": [
            {
              "Line": 217,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 217,
              "Offset": 27,
              "EndOffset": 83,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 223,
              "Offset": 110,
              "EndOffset": 112,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 223,
              "Offset": 110,
              "EndOffset": 180,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Xml.XmlReaderValidator/ValidationResult FluentAssertions.Xml.XmlReaderValidator::ValidateText()": {
          "Lines": {
            "234": 0,
            "235": 0,
            "237": 0,
            "239": 0,
            "240": 0,
            "243": 0
          },
          "Branches": [
            {
              "Line": 237,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 237,
              "Offset": 31,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Xml.XmlReaderValidator::.ctor(System.Xml.XmlReader,System.Xml.XmlReader,System.String,System.Object[])": {
          "Lines": {
            "17": 0,
            "19": 0,
            "21": 0,
            "23": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Xml.XmlReaderValidator/ValidationResult": {
        "System.String FluentAssertions.Xml.XmlReaderValidator/ValidationResult::get_FormatString()": {
          "Lines": {
            "35": 0
          },
          "Branches": []
        },
        "System.Object[] FluentAssertions.Xml.XmlReaderValidator/ValidationResult::get_FormatParams()": {
          "Lines": {
            "37": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Xml.XmlReaderValidator/ValidationResult::.ctor(System.String,System.Object[])": {
          "Lines": {
            "29": 0,
            "31": 0,
            "32": 0,
            "33": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Xml.XmlReaderValidator/AttributeData": {
        "System.String FluentAssertions.Xml.XmlReaderValidator/AttributeData::get_NamespaceUri()": {
          "Lines": {
            "136": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XmlReaderValidator/AttributeData::get_LocalName()": {
          "Lines": {
            "138": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XmlReaderValidator/AttributeData::get_Value()": {
          "Lines": {
            "140": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XmlReaderValidator/AttributeData::get_Prefix()": {
          "Lines": {
            "142": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Xml.XmlReaderValidator/AttributeData::get_QualifiedName()": {
          "Lines": {
            "148": 0,
            "150": 0,
            "153": 0
          },
          "Branches": [
            {
              "Line": 148,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 148,
              "Offset": 11,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Xml.XmlReaderValidator/AttributeData::.ctor(System.String,System.String,System.String,System.String)": {
          "Lines": {
            "128": 0,
            "130": 0,
            "131": 0,
            "132": 0,
            "133": 0,
            "134": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Xml.XmlReaderValidator/<>c__DisplayClass10_1": {
        "System.Boolean FluentAssertions.Xml.XmlReaderValidator/<>c__DisplayClass10_1::<ValidateAttributes>b__0(FluentAssertions.Xml.XmlReaderValidator/AttributeData)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 166,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 166,
              "Offset": 22,
              "EndOffset": 47,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Xml.XmlReaderValidator/<>c__DisplayClass10_2": {
        "System.Boolean FluentAssertions.Xml.XmlReaderValidator/<>c__DisplayClass10_2::<ValidateAttributes>b__2(FluentAssertions.Xml.XmlReaderValidator/AttributeData)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 186,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 186,
              "Offset": 22,
              "EndOffset": 47,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\AllTypes.cs": {
      "FluentAssertions.Types.AllTypes": {
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.AllTypes::From(System.Reflection.Assembly)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\ConstructorInfoAssertions.cs": {
      "FluentAssertions.Types.ConstructorInfoAssertions": {
        "System.String FluentAssertions.Types.ConstructorInfoAssertions::GetDescriptionFor(System.Reflection.ConstructorInfo)": {
          "Lines": {
            "24": 0,
            "25": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.ConstructorInfoAssertions::get_SubjectDescription()": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.ConstructorInfoAssertions::get_Identifier()": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.ConstructorInfoAssertions::.ctor(System.Reflection.ConstructorInfo)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\MemberInfoAssertions.cs": {
      "FluentAssertions.Types.MemberInfoAssertions`2": {
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.MemberInfoAssertions`2<TSubject,TAssertions>,TAttribute> FluentAssertions.Types.MemberInfoAssertions`2::BeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "35": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Types.MemberInfoAssertions`2::NotBeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "52": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.MemberInfoAssertions`2<TSubject,TAssertions>,TAttribute> FluentAssertions.Types.MemberInfoAssertions`2::BeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "74": 0,
            "75": 0,
            "76": 0,
            "78": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "85": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Types.MemberInfoAssertions`2::NotBeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "107": 0,
            "108": 0,
            "109": 0,
            "111": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "118": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MemberInfoAssertions`2::get_Identifier()": {
          "Lines": {
            "121": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MemberInfoAssertions`2::get_SubjectDescription()": {
          "Lines": {
            "127": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\MethodBaseAssertions.cs": {
      "FluentAssertions.Types.MethodBaseAssertions`2": {
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Types.MethodBaseAssertions`2::HaveAccessModifier(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])": {
          "Lines": {
            "32": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "39": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Types.MethodBaseAssertions`2::NotHaveAccessModifier(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])": {
          "Lines": {
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "60": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodBaseAssertions`2::get_Identifier()": {
          "Lines": {
            "63": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodBaseAssertions`2::GetParameterString(System.Reflection.MethodBase)": {
          "Lines": {
            "67": 0,
            "69": 0
          },
          "Branches": [
            {
              "Line": 67,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 55,
              "EndOffset": 57,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 55,
              "EndOffset": 80,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\MethodInfoAssertions.cs": {
      "FluentAssertions.Types.MethodInfoAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoAssertions> FluentAssertions.Types.MethodInfoAssertions::BeVirtual(System.String,System.Object[])": {
          "Lines": {
            "34": 0,
            "35": 0,
            "36": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "43": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoAssertions> FluentAssertions.Types.MethodInfoAssertions::NotBeVirtual(System.String,System.Object[])": {
          "Lines": {
            "58": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "65": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoAssertions> FluentAssertions.Types.MethodInfoAssertions::BeAsync(System.String,System.Object[])": {
          "Lines": {
            "76": 0,
            "77": 0,
            "78": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "85": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoAssertions> FluentAssertions.Types.MethodInfoAssertions::NotBeAsync(System.String,System.Object[])": {
          "Lines": {
            "96": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "103": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodBaseAssertions`2<System.Reflection.MethodInfo,FluentAssertions.Types.MethodInfoAssertions>> FluentAssertions.Types.MethodInfoAssertions::ReturnVoid(System.String,System.Object[])": {
          "Lines": {
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "123": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodBaseAssertions`2<System.Reflection.MethodInfo,FluentAssertions.Types.MethodInfoAssertions>> FluentAssertions.Types.MethodInfoAssertions::Return(System.Type,System.String,System.Object[])": {
          "Lines": {
            "139": 0,
            "140": 0,
            "141": 0,
            "142": 0,
            "144": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodBaseAssertions`2<System.Reflection.MethodInfo,FluentAssertions.Types.MethodInfoAssertions>> FluentAssertions.Types.MethodInfoAssertions::Return(System.String,System.Object[])": {
          "Lines": {
            "160": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodBaseAssertions`2<System.Reflection.MethodInfo,FluentAssertions.Types.MethodInfoAssertions>> FluentAssertions.Types.MethodInfoAssertions::NotReturnVoid(System.String,System.Object[])": {
          "Lines": {
            "175": 0,
            "176": 0,
            "177": 0,
            "178": 0,
            "180": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodBaseAssertions`2<System.Reflection.MethodInfo,FluentAssertions.Types.MethodInfoAssertions>> FluentAssertions.Types.MethodInfoAssertions::NotReturn(System.Type,System.String,System.Object[])": {
          "Lines": {
            "196": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "201": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodBaseAssertions`2<System.Reflection.MethodInfo,FluentAssertions.Types.MethodInfoAssertions>> FluentAssertions.Types.MethodInfoAssertions::NotReturn(System.String,System.Object[])": {
          "Lines": {
            "217": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodInfoAssertions::GetDescriptionFor(System.Reflection.MethodInfo)": {
          "Lines": {
            "222": 0,
            "224": 0,
            "225": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodInfoAssertions::get_SubjectDescription()": {
          "Lines": {
            "228": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodInfoAssertions::get_Identifier()": {
          "Lines": {
            "230": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.MethodInfoAssertions::.ctor(System.Reflection.MethodInfo)": {
          "Lines": {
            "16": 0,
            "18": 0,
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\MethodInfoSelector.cs": {
      "FluentAssertions.Types.MethodInfoSelector": {
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::get_ThatArePublicOrInternal()": {
          "Lines": {
            "43": 0,
            "44": 0
          },
          "Branches": [
            {
              "Line": 43,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::get_ThatReturnVoid()": {
          "Lines": {
            "55": 0,
            "56": 0
          },
          "Branches": [
            {
              "Line": 55,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::get_ThatDoNotReturnVoid()": {
          "Lines": {
            "67": 0,
            "68": 0
          },
          "Branches": [
            {
              "Line": 67,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::ThatReturn()": {
          "Lines": {
            "77": 0,
            "78": 0
          },
          "Branches": [
            {
              "Line": 77,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::ThatDoNotReturn()": {
          "Lines": {
            "86": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 86,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::ThatAreDecoratedWith()": {
          "Lines": {
            "96": 0,
            "97": 0
          },
          "Branches": [
            {
              "Line": 96,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 96,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::ThatAreDecoratedWithOrInherit()": {
          "Lines": {
            "106": 0,
            "107": 0
          },
          "Branches": [
            {
              "Line": 106,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::ThatAreNotDecoratedWith()": {
          "Lines": {
            "116": 0,
            "117": 0
          },
          "Branches": [
            {
              "Line": 116,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 116,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.MethodInfoSelector FluentAssertions.Types.MethodInfoSelector::ThatAreNotDecoratedWithOrInherit()": {
          "Lines": {
            "126": 0,
            "127": 0
          },
          "Branches": [
            {
              "Line": 126,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 126,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Types.MethodInfoSelector::ToArray()": {
          "Lines": {
            "135": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Types.MethodInfoSelector::HasSpecialName(System.Reflection.MethodInfo)": {
          "Lines": {
            "143": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerator`1<System.Reflection.MethodInfo> FluentAssertions.Types.MethodInfoSelector::GetEnumerator()": {
          "Lines": {
            "155": 0
          },
          "Branches": []
        },
        "System.Collections.IEnumerator FluentAssertions.Types.MethodInfoSelector::System.Collections.IEnumerable.GetEnumerator()": {
          "Lines": {
            "167": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Reflection.MethodInfo> FluentAssertions.Types.MethodInfoSelector::<.ctor>b__2_0(System.Type)": {
          "Lines": {
            "31": 0,
            "32": 0,
            "33": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.MethodInfoSelector::.ctor(System.Type)": {
          "Lines": {
            "21": 0,
            "23": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.MethodInfoSelector::.ctor(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "14": 0,
            "29": 0,
            "34": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\MethodInfoSelectorAssertions.cs": {
      "FluentAssertions.Types.MethodInfoSelectorAssertions": {
        "System.Collections.Generic.IEnumerable`1<System.Reflection.MethodInfo> FluentAssertions.Types.MethodInfoSelectorAssertions::get_SubjectMethods()": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoSelectorAssertions> FluentAssertions.Types.MethodInfoSelectorAssertions::BeVirtual(System.String,System.Object[])": {
          "Lines": {
            "44": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "56": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoSelectorAssertions> FluentAssertions.Types.MethodInfoSelectorAssertions::NotBeVirtual(System.String,System.Object[])": {
          "Lines": {
            "71": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "76": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "83": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Types.MethodInfoSelectorAssertions::GetAllNonVirtualMethodsFromSelection()": {
          "Lines": {
            "88": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "93": 0
          },
          "Branches": [
            {
              "Line": 88,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 88,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Types.MethodInfoSelectorAssertions::GetAllVirtualMethodsFromSelection()": {
          "Lines": {
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "103": 0
          },
          "Branches": [
            {
              "Line": 98,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 98,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoSelectorAssertions> FluentAssertions.Types.MethodInfoSelectorAssertions::BeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "119": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoSelectorAssertions> FluentAssertions.Types.MethodInfoSelectorAssertions::BeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "140": 0,
            "142": 0,
            "143": 0,
            "144": 0,
            "145": 0,
            "147": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "152": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoSelectorAssertions> FluentAssertions.Types.MethodInfoSelectorAssertions::NotBeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "168": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.MethodInfoSelectorAssertions> FluentAssertions.Types.MethodInfoSelectorAssertions::NotBeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "189": 0,
            "191": 0,
            "192": 0,
            "193": 0,
            "194": 0,
            "196": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "201": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Types.MethodInfoSelectorAssertions::GetMethodsWithout(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>)": {
          "Lines": {
            "207": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Types.MethodInfoSelectorAssertions::GetMethodsWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>)": {
          "Lines": {
            "213": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodInfoSelectorAssertions::GetDescriptionsFor(System.Collections.Generic.IEnumerable`1<System.Reflection.MethodInfo>)": {
          "Lines": {
            "218": 0,
            "219": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.MethodInfoSelectorAssertions::get_Context()": {
          "Lines": {
            "225": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.MethodInfoSelectorAssertions::.ctor(System.Reflection.MethodInfo[])": {
          "Lines": {
            "22": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\PropertyInfoAssertions.cs": {
      "FluentAssertions.Types.PropertyInfoAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::BeVirtual(System.String,System.Object[])": {
          "Lines": {
            "34": 0,
            "35": 0,
            "36": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "43": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::NotBeVirtual(System.String,System.Object[])": {
          "Lines": {
            "58": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "65": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::BeWritable(System.String,System.Object[])": {
          "Lines": {
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "88": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::BeWritable(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])": {
          "Lines": {
            "104": 0,
            "106": 0,
            "108": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::NotBeWritable(System.String,System.Object[])": {
          "Lines": {
            "124": 0,
            "125": 0,
            "126": 0,
            "127": 0,
            "128": 0,
            "129": 0,
            "131": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::BeReadable(System.String,System.Object[])": {
          "Lines": {
            "146": 0,
            "147": 0,
            "148": 0,
            "150": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::BeReadable(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])": {
          "Lines": {
            "166": 0,
            "168": 0,
            "170": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::NotBeReadable(System.String,System.Object[])": {
          "Lines": {
            "186": 0,
            "187": 0,
            "188": 0,
            "189": 0,
            "190": 0,
            "191": 0,
            "193": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::Return(System.Type,System.String,System.Object[])": {
          "Lines": {
            "210": 0,
            "211": 0,
            "212": 0,
            "214": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::Return(System.String,System.Object[])": {
          "Lines": {
            "230": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::NotReturn(System.Type,System.String,System.Object[])": {
          "Lines": {
            "246": 0,
            "247": 0,
            "248": 0,
            "249": 0,
            "251": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoAssertions> FluentAssertions.Types.PropertyInfoAssertions::NotReturn(System.String,System.Object[])": {
          "Lines": {
            "267": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.PropertyInfoAssertions::GetDescriptionFor(System.Reflection.PropertyInfo)": {
          "Lines": {
            "272": 0,
            "273": 0,
            "274": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.PropertyInfoAssertions::get_SubjectDescription()": {
          "Lines": {
            "277": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.PropertyInfoAssertions::get_Identifier()": {
          "Lines": {
            "282": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.PropertyInfoAssertions::.ctor(System.Reflection.PropertyInfo)": {
          "Lines": {
            "16": 0,
            "18": 0,
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\PropertyInfoSelector.cs": {
      "FluentAssertions.Types.PropertyInfoSelector": {
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::get_ThatArePublicOrInternal()": {
          "Lines": {
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "48": 0
          },
          "Branches": [
            {
              "Line": 42,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::ThatAreDecoratedWith()": {
          "Lines": {
            "58": 0,
            "59": 0
          },
          "Branches": [
            {
              "Line": 58,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::ThatAreDecoratedWithOrInherit()": {
          "Lines": {
            "68": 0,
            "69": 0
          },
          "Branches": [
            {
              "Line": 68,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 68,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::ThatAreNotDecoratedWith()": {
          "Lines": {
            "78": 0,
            "79": 0
          },
          "Branches": [
            {
              "Line": 78,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 78,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::ThatAreNotDecoratedWithOrInherit()": {
          "Lines": {
            "88": 0,
            "89": 0
          },
          "Branches": [
            {
              "Line": 88,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 88,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::OfType()": {
          "Lines": {
            "97": 0,
            "98": 0
          },
          "Branches": [
            {
              "Line": 97,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 97,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.PropertyInfoSelector FluentAssertions.Types.PropertyInfoSelector::NotOfType()": {
          "Lines": {
            "106": 0,
            "107": 0
          },
          "Branches": [
            {
              "Line": 106,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Types.PropertyInfoSelector::ToArray()": {
          "Lines": {
            "115": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerator`1<System.Reflection.PropertyInfo> FluentAssertions.Types.PropertyInfoSelector::GetEnumerator()": {
          "Lines": {
            "127": 0
          },
          "Branches": []
        },
        "System.Collections.IEnumerator FluentAssertions.Types.PropertyInfoSelector::System.Collections.IEnumerable.GetEnumerator()": {
          "Lines": {
            "139": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.PropertyInfoSelector::.ctor(System.Type)": {
          "Lines": {
            "21": 0,
            "23": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.PropertyInfoSelector::.ctor(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "14": 0,
            "29": 0,
            "31": 0,
            "32": 0,
            "33": 0
          },
          "Branches": [
            {
              "Line": 31,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 25,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Types.PropertyInfoSelector/<>c": {
        "System.Boolean FluentAssertions.Types.PropertyInfoSelector/<>c::<get_ThatArePublicOrInternal>b__4_0(System.Reflection.PropertyInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 45,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 23,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 15,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\PropertyInfoSelectorAssertions.cs": {
      "FluentAssertions.Types.PropertyInfoSelectorAssertions": {
        "System.Collections.Generic.IEnumerable`1<System.Reflection.PropertyInfo> FluentAssertions.Types.PropertyInfoSelectorAssertions::get_SubjectProperties()": {
          "Lines": {
            "20": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoSelectorAssertions> FluentAssertions.Types.PropertyInfoSelectorAssertions::BeVirtual(System.String,System.Object[])": {
          "Lines": {
            "43": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "55": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoSelectorAssertions> FluentAssertions.Types.PropertyInfoSelectorAssertions::NotBeVirtual(System.String,System.Object[])": {
          "Lines": {
            "70": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "82": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoSelectorAssertions> FluentAssertions.Types.PropertyInfoSelectorAssertions::BeWritable(System.String,System.Object[])": {
          "Lines": {
            "97": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "107": 0,
            "109": 0
          },
          "Branches": []
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Types.PropertyInfoSelectorAssertions::GetAllReadOnlyPropertiesFromSelection()": {
          "Lines": {
            "114": 0
          },
          "Branches": [
            {
              "Line": 114,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 114,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Types.PropertyInfoSelectorAssertions::GetAllNonVirtualPropertiesFromSelection()": {
          "Lines": {
            "119": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "124": 0
          },
          "Branches": [
            {
              "Line": 119,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 119,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Types.PropertyInfoSelectorAssertions::GetAllVirtualPropertiesFromSelection()": {
          "Lines": {
            "129": 0,
            "130": 0,
            "131": 0,
            "132": 0,
            "134": 0
          },
          "Branches": [
            {
              "Line": 129,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 129,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoSelectorAssertions> FluentAssertions.Types.PropertyInfoSelectorAssertions::BeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "150": 0,
            "152": 0,
            "153": 0,
            "154": 0,
            "155": 0,
            "157": 0,
            "158": 0,
            "159": 0,
            "160": 0,
            "162": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.PropertyInfoSelectorAssertions> FluentAssertions.Types.PropertyInfoSelectorAssertions::NotBeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "178": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "185": 0,
            "186": 0,
            "187": 0,
            "188": 0,
            "190": 0
          },
          "Branches": []
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Types.PropertyInfoSelectorAssertions::GetPropertiesWithout()": {
          "Lines": {
            "196": 0
          },
          "Branches": [
            {
              "Line": 196,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 196,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Types.PropertyInfoSelectorAssertions::GetPropertiesWith()": {
          "Lines": {
            "202": 0
          },
          "Branches": [
            {
              "Line": 202,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 202,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Types.PropertyInfoSelectorAssertions::GetDescriptionsFor(System.Collections.Generic.IEnumerable`1<System.Reflection.PropertyInfo>)": {
          "Lines": {
            "207": 0,
            "208": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.PropertyInfoSelectorAssertions::get_Context()": {
          "Lines": {
            "214": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.PropertyInfoSelectorAssertions::.ctor(System.Reflection.PropertyInfo[])": {
          "Lines": {
            "26": 0,
            "28": 0,
            "29": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\TypeAssertions.cs": {
      "FluentAssertions.Types.TypeAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::Be(System.String,System.Object[])": {
          "Lines": {
            "39": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::Be(System.Type,System.String,System.Object[])": {
          "Lines": {
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "60": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeAssignableTo(System.String,System.Object[])": {
          "Lines": {
            "72": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeAssignableTo(System.Type,System.String,System.Object[])": {
          "Lines": {
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "92": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeAssignableTo(System.String,System.Object[])": {
          "Lines": {
            "104": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeAssignableTo(System.Type,System.String,System.Object[])": {
          "Lines": {
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "124": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.TypeAssertions::GetFailureMessageIfTypesAreDifferent(System.Type,System.Type)": {
          "Lines": {
            "137": 0,
            "139": 0,
            "142": 0,
            "143": 0,
            "145": 0,
            "147": 0,
            "148": 0,
            "151": 0
          },
          "Branches": [
            {
              "Line": 137,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 137,
              "Offset": 7,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 142,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 142,
              "Offset": 22,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 143,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 143,
              "Offset": 45,
              "EndOffset": 54,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 145,
              "Offset": 68,
              "EndOffset": 70,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 145,
              "Offset": 68,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBe(System.String,System.Object[])": {
          "Lines": {
            "166": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBe(System.Type,System.String,System.Object[])": {
          "Lines": {
            "182": 0,
            "184": 0,
            "185": 0,
            "186": 0,
            "187": 0,
            "189": 0
          },
          "Branches": [
            {
              "Line": 182,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "205": 0,
            "206": 0,
            "207": 0,
            "208": 0,
            "209": 0,
            "211": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "232": 0,
            "234": 0,
            "235": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "240": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeDecoratedWithOrInherit(System.String,System.Object[])": {
          "Lines": {
            "256": 0,
            "257": 0,
            "258": 0,
            "259": 0,
            "260": 0,
            "262": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeDecoratedWithOrInherit(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "283": 0,
            "285": 0,
            "286": 0,
            "287": 0,
            "288": 0,
            "289": 0,
            "291": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "307": 0,
            "308": 0,
            "309": 0,
            "310": 0,
            "311": 0,
            "313": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "334": 0,
            "335": 0,
            "336": 0,
            "337": 0,
            "338": 0,
            "340": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeDecoratedWithOrInherit(System.String,System.Object[])": {
          "Lines": {
            "356": 0,
            "357": 0,
            "358": 0,
            "359": 0,
            "360": 0,
            "362": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeDecoratedWithOrInherit(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "383": 0,
            "384": 0,
            "385": 0,
            "386": 0,
            "387": 0,
            "389": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::Implement(System.Type,System.String,System.Object[])": {
          "Lines": {
            "401": 0,
            "403": 0,
            "406": 0,
            "407": 0,
            "408": 0,
            "410": 0
          },
          "Branches": [
            {
              "Line": 401,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 401,
              "Offset": 11,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::Implement(System.String,System.Object[])": {
          "Lines": {
            "423": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotImplement(System.Type,System.String,System.Object[])": {
          "Lines": {
            "435": 0,
            "437": 0,
            "440": 0,
            "441": 0,
            "442": 0,
            "444": 0
          },
          "Branches": [
            {
              "Line": 435,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 435,
              "Offset": 11,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotImplement(System.String,System.Object[])": {
          "Lines": {
            "457": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeDerivedFrom(System.Type,System.String,System.Object[])": {
          "Lines": {
            "469": 0,
            "471": 0,
            "474": 0,
            "475": 0,
            "476": 0,
            "478": 0
          },
          "Branches": [
            {
              "Line": 469,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 469,
              "Offset": 11,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeDerivedFrom(System.String,System.Object[])": {
          "Lines": {
            "491": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeDerivedFrom(System.Type,System.String,System.Object[])": {
          "Lines": {
            "503": 0,
            "505": 0,
            "508": 0,
            "509": 0,
            "510": 0,
            "511": 0,
            "513": 0
          },
          "Branches": [
            {
              "Line": 503,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 503,
              "Offset": 11,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeDerivedFrom(System.String,System.Object[])": {
          "Lines": {
            "526": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeSealed(System.String,System.Object[])": {
          "Lines": {
            "538": 0,
            "540": 0,
            "541": 0,
            "542": 0,
            "543": 0,
            "545": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeSealed(System.String,System.Object[])": {
          "Lines": {
            "557": 0,
            "559": 0,
            "560": 0,
            "561": 0,
            "562": 0,
            "564": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeAbstract(System.String,System.Object[])": {
          "Lines": {
            "576": 0,
            "578": 0,
            "579": 0,
            "580": 0,
            "581": 0,
            "583": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeAbstract(System.String,System.Object[])": {
          "Lines": {
            "595": 0,
            "597": 0,
            "598": 0,
            "599": 0,
            "600": 0,
            "602": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::BeStatic(System.String,System.Object[])": {
          "Lines": {
            "614": 0,
            "616": 0,
            "617": 0,
            "618": 0,
            "619": 0,
            "621": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotBeStatic(System.String,System.Object[])": {
          "Lines": {
            "633": 0,
            "635": 0,
            "636": 0,
            "637": 0,
            "638": 0,
            "640": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.PropertyInfo> FluentAssertions.Types.TypeAssertions::HaveProperty(System.Type,System.String,System.String,System.Object[])": {
          "Lines": {
            "653": 0,
            "655": 0,
            "657": 0,
            "659": 0,
            "662": 0,
            "663": 0,
            "664": 0,
            "666": 0,
            "667": 0,
            "668": 0,
            "669": 0,
            "671": 0
          },
          "Branches": [
            {
              "Line": 657,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 657,
              "Offset": 26,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.PropertyInfo> FluentAssertions.Types.TypeAssertions::HaveProperty(System.String,System.String,System.Object[])": {
          "Lines": {
            "684": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveProperty(System.String,System.String,System.Object[])": {
          "Lines": {
            "696": 0,
            "698": 0,
            "700": 0,
            "702": 0,
            "705": 0,
            "706": 0,
            "707": 0,
            "709": 0
          },
          "Branches": [
            {
              "Line": 700,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 700,
              "Offset": 26,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::HaveExplicitProperty(System.Type,System.String,System.String,System.Object[])": {
          "Lines": {
            "723": 0,
            "725": 0,
            "727": 0,
            "728": 0,
            "729": 0,
            "730": 0,
            "732": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::HaveExplicitProperty(System.String,System.String,System.Object[])": {
          "Lines": {
            "747": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveExplicitProperty(System.Type,System.String,System.String,System.Object[])": {
          "Lines": {
            "761": 0,
            "763": 0,
            "765": 0,
            "766": 0,
            "767": 0,
            "768": 0,
            "770": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveExplicitProperty(System.String,System.String,System.Object[])": {
          "Lines": {
            "785": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::HaveExplicitMethod(System.Type,System.String,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "800": 0,
            "802": 0,
            "804": 0,
            "805": 0,
            "806": 0,
            "807": 0,
            "809": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::HaveExplicitMethod(System.String,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "825": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveExplicitMethod(System.Type,System.String,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "840": 0,
            "842": 0,
            "844": 0,
            "845": 0,
            "846": 0,
            "847": 0,
            "849": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveExplicitMethod(System.String,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "865": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.PropertyInfo> FluentAssertions.Types.TypeAssertions::HaveIndexer(System.Type,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "879": 0,
            "881": 0,
            "883": 0,
            "885": 0,
            "888": 0,
            "889": 0,
            "890": 0,
            "891": 0,
            "892": 0,
            "894": 0,
            "895": 0,
            "896": 0,
            "897": 0,
            "899": 0
          },
          "Branches": [
            {
              "Line": 883,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 883,
              "Offset": 26,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveIndexer(System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "911": 0,
            "913": 0,
            "914": 0,
            "915": 0,
            "916": 0,
            "917": 0,
            "919": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.MethodInfo> FluentAssertions.Types.TypeAssertions::HaveMethod(System.String,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "932": 0,
            "934": 0,
            "935": 0,
            "936": 0,
            "937": 0,
            "938": 0,
            "940": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveMethod(System.String,System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "954": 0,
            "956": 0,
            "958": 0,
            "960": 0,
            "963": 0,
            "964": 0,
            "965": 0,
            "966": 0,
            "968": 0
          },
          "Branches": [
            {
              "Line": 958,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 958,
              "Offset": 27,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.ConstructorInfo> FluentAssertions.Types.TypeAssertions::HaveConstructor(System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "980": 0,
            "982": 0,
            "983": 0,
            "984": 0,
            "985": 0,
            "986": 0,
            "988": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.ConstructorInfo> FluentAssertions.Types.TypeAssertions::HaveDefaultConstructor(System.String,System.Object[])": {
          "Lines": {
            "999": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.ConstructorInfo> FluentAssertions.Types.TypeAssertions::NotHaveConstructor(System.Collections.Generic.IEnumerable`1<System.Type>,System.String,System.Object[])": {
          "Lines": {
            "1011": 0,
            "1013": 0,
            "1014": 0,
            "1015": 0,
            "1016": 0,
            "1017": 0,
            "1018": 0,
            "1020": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.ConstructorInfo> FluentAssertions.Types.TypeAssertions::NotHaveDefaultConstructor(System.String,System.Object[])": {
          "Lines": {
            "1031": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.TypeAssertions::GetParameterString(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "1036": 0
          },
          "Branches": [
            {
              "Line": 1036,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1036,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<System.Type> FluentAssertions.Types.TypeAssertions::HaveAccessModifier(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])": {
          "Lines": {
            "1053": 0,
            "1055": 0,
            "1056": 0,
            "1057": 0,
            "1058": 0,
            "1060": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<System.Type> FluentAssertions.Types.TypeAssertions::NotHaveAccessModifier(FluentAssertions.Common.CSharpAccessModifier,System.String,System.Object[])": {
          "Lines": {
            "1076": 0,
            "1077": 0,
            "1078": 0,
            "1079": 0,
            "1080": 0,
            "1082": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.MethodInfo> FluentAssertions.Types.TypeAssertions::HaveImplictConversionOperator(System.String,System.Object[])": {
          "Lines": {
            "1095": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.MethodInfo> FluentAssertions.Types.TypeAssertions::HaveImplictConversionOperator(System.Type,System.Type,System.String,System.Object[])": {
          "Lines": {
            "1108": 0,
            "1110": 0,
            "1111": 0,
            "1112": 0,
            "1113": 0,
            "1115": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveImplictConversionOperator(System.String,System.Object[])": {
          "Lines": {
            "1128": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveImplictConversionOperator(System.Type,System.Type,System.String,System.Object[])": {
          "Lines": {
            "1141": 0,
            "1143": 0,
            "1144": 0,
            "1145": 0,
            "1146": 0,
            "1148": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.MethodInfo> FluentAssertions.Types.TypeAssertions::HaveExplictConversionOperator(System.String,System.Object[])": {
          "Lines": {
            "1161": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Types.TypeAssertions,System.Reflection.MethodInfo> FluentAssertions.Types.TypeAssertions::HaveExplictConversionOperator(System.Type,System.Type,System.String,System.Object[])": {
          "Lines": {
            "1174": 0,
            "1176": 0,
            "1177": 0,
            "1178": 0,
            "1179": 0,
            "1181": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveExplictConversionOperator(System.String,System.Object[])": {
          "Lines": {
            "1194": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeAssertions> FluentAssertions.Types.TypeAssertions::NotHaveExplictConversionOperator(System.Type,System.Type,System.String,System.Object[])": {
          "Lines": {
            "1207": 0,
            "1209": 0,
            "1210": 0,
            "1211": 0,
            "1212": 0,
            "1214": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.TypeAssertions::get_Identifier()": {
          "Lines": {
            "1220": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.TypeAssertions::AssertThatSubjectIsClass()": {
          "Lines": {
            "1224": 0,
            "1225": 0,
            "1227": 0,
            "1229": 0
          },
          "Branches": [
            {
              "Line": 1225,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1225,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1225,
              "Offset": 18,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1225,
              "Offset": 26,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1225,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1225,
              "Offset": 49,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Types.TypeAssertions::.ctor(System.Type)": {
          "Lines": {
            "22": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\TypeSelector.cs": {
      "FluentAssertions.Types.TypeSelector": {
        "System.Type[] FluentAssertions.Types.TypeSelector::ToArray()": {
          "Lines": {
            "31": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatDeriveFrom()": {
          "Lines": {
            "39": 0,
            "40": 0
          },
          "Branches": [
            {
              "Line": 39,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatDoNotDeriveFrom()": {
          "Lines": {
            "48": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 48,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatImplement()": {
          "Lines": {
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0
          },
          "Branches": [
            {
              "Line": 57,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatDoNotImplement()": {
          "Lines": {
            "69": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0
          },
          "Branches": [
            {
              "Line": 69,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreDecoratedWith()": {
          "Lines": {
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 82,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreDecoratedWithOrInherit()": {
          "Lines": {
            "96": 0,
            "97": 0,
            "98": 0,
            "99": 0,
            "101": 0
          },
          "Branches": [
            {
              "Line": 96,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 96,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreNotDecoratedWith()": {
          "Lines": {
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "115": 0
          },
          "Branches": [
            {
              "Line": 110,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 110,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreNotDecoratedWithOrInherit()": {
          "Lines": {
            "124": 0,
            "125": 0,
            "126": 0,
            "127": 0,
            "129": 0
          },
          "Branches": [
            {
              "Line": 124,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 124,
              "Offset": 13,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreInNamespace(System.String)": {
          "Lines": {
            "137": 0,
            "138": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreNotInNamespace(System.String)": {
          "Lines": {
            "146": 0,
            "147": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreUnderNamespace(System.String)": {
          "Lines": {
            "155": 0,
            "156": 0
          },
          "Branches": []
        },
        "FluentAssertions.Types.TypeSelector FluentAssertions.Types.TypeSelector::ThatAreNotUnderNamespace(System.String)": {
          "Lines": {
            "164": 0,
            "165": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerator`1<System.Type> FluentAssertions.Types.TypeSelector::GetEnumerator()": {
          "Lines": {
            "177": 0
          },
          "Branches": []
        },
        "System.Collections.IEnumerator FluentAssertions.Types.TypeSelector::System.Collections.IEnumerable.GetEnumerator()": {
          "Lines": {
            "189": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.TypeSelector::.ctor(System.Type)": {
          "Lines": {
            "17": 0,
            "19": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.TypeSelector::.ctor(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "21": 0,
            "23": 0,
            "24": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Types.TypeSelector/<>c__6`1": {
        "System.Boolean FluentAssertions.Types.TypeSelector/<>c__6`1::<ThatImplement>b__6_0(System.Type)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 58,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 16,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Types.TypeSelector/<>c__7`1": {
        "System.Boolean FluentAssertions.Types.TypeSelector/<>c__7`1::<ThatDoNotImplement>b__7_0(System.Type)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 70,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 16,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Types.TypeSelector/<>c__DisplayClass14_0": {
        "System.Boolean FluentAssertions.Types.TypeSelector/<>c__DisplayClass14_0::<ThatAreUnderNamespace>b__0(System.Type)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 155,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 155,
              "Offset": 7,
              "EndOffset": 12,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Types.TypeSelector/<>c__DisplayClass15_0": {
        "System.Boolean FluentAssertions.Types.TypeSelector/<>c__DisplayClass15_0::<ThatAreNotUnderNamespace>b__0(System.Type)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 164,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 164,
              "Offset": 7,
              "EndOffset": 12,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Types\\TypeSelectorAssertions.cs": {
      "FluentAssertions.Types.TypeSelectorAssertions": {
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.Types.TypeSelectorAssertions::get_Subject()": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::BeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "45": 0,
            "46": 0,
            "47": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "58": 0
          },
          "Branches": [
            {
              "Line": 45,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::BeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "79": 0,
            "80": 0,
            "81": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "93": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::BeDecoratedWithOrInherit(System.String,System.Object[])": {
          "Lines": {
            "109": 0,
            "110": 0,
            "111": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "122": 0
          },
          "Branches": [
            {
              "Line": 109,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 109,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::BeDecoratedWithOrInherit(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "143": 0,
            "144": 0,
            "145": 0,
            "147": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "152": 0,
            "153": 0,
            "154": 0,
            "155": 0,
            "157": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::NotBeDecoratedWith(System.String,System.Object[])": {
          "Lines": {
            "173": 0,
            "174": 0,
            "175": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "184": 0,
            "186": 0
          },
          "Branches": [
            {
              "Line": 173,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 173,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::NotBeDecoratedWith(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "207": 0,
            "208": 0,
            "209": 0,
            "211": 0,
            "212": 0,
            "213": 0,
            "214": 0,
            "215": 0,
            "216": 0,
            "217": 0,
            "218": 0,
            "219": 0,
            "221": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::NotBeDecoratedWithOrInherit(System.String,System.Object[])": {
          "Lines": {
            "237": 0,
            "238": 0,
            "239": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "244": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "248": 0,
            "250": 0
          },
          "Branches": [
            {
              "Line": 237,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 237,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Types.TypeSelectorAssertions> FluentAssertions.Types.TypeSelectorAssertions::NotBeDecoratedWithOrInherit(System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "271": 0,
            "272": 0,
            "273": 0,
            "275": 0,
            "276": 0,
            "277": 0,
            "278": 0,
            "279": 0,
            "280": 0,
            "281": 0,
            "282": 0,
            "283": 0,
            "285": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.TypeSelectorAssertions::GetDescriptionsFor(System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "290": 0,
            "291": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Types.TypeSelectorAssertions::GetDescriptionFor(System.Type)": {
          "Lines": {
            "296": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Types.TypeSelectorAssertions::.ctor(System.Type[])": {
          "Lines": {
            "22": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Specialized\\AssemblyAssertions.cs": {
      "FluentAssertions.Reflection.AssemblyAssertions": {
        "System.Void FluentAssertions.Reflection.AssemblyAssertions::NotReference(System.Reflection.Assembly)": {
          "Lines": {
            "30": 0,
            "31": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Reflection.AssemblyAssertions::NotReference(System.Reflection.Assembly,System.String,System.String[])": {
          "Lines": {
            "46": 0,
            "47": 0,
            "49": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0
          },
          "Branches": [
            {
              "Line": 49,
              "Offset": 57,
              "EndOffset": 59,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 57,
              "EndOffset": 82,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Reflection.AssemblyAssertions::Reference(System.Reflection.Assembly)": {
          "Lines": {
            "63": 0,
            "64": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Reflection.AssemblyAssertions::Reference(System.Reflection.Assembly,System.String,System.String[])": {
          "Lines": {
            "79": 0,
            "80": 0,
            "82": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0
          },
          "Branches": [
            {
              "Line": 82,
              "Offset": 57,
              "EndOffset": 59,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 57,
              "EndOffset": 82,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Reflection.AssemblyAssertions,System.Type> FluentAssertions.Reflection.AssemblyAssertions::DefineType(System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "101": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "108": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Reflection.AssemblyAssertions::get_Identifier()": {
          "Lines": {
            "114": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Reflection.AssemblyAssertions::.ctor(System.Reflection.Assembly)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Reflection.AssemblyAssertions/<>c__DisplayClass5_0": {
        "System.Boolean FluentAssertions.Reflection.AssemblyAssertions/<>c__DisplayClass5_0::<DefineType>b__0(System.Type)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 101,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 17,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Specialized\\ActionAssertions.cs": {
      "FluentAssertions.Specialized.ActionAssertions": {
        "FluentAssertions.Specialized.ExceptionAssertions`1<TException> FluentAssertions.Specialized.ActionAssertions::Throw(System.String,System.Object[])": {
          "Lines": {
            "41": 0,
            "43": 0,
            "44": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "60": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ActionAssertions::NotThrow(System.String,System.Object[])": {
          "Lines": {
            "76": 0,
            "78": 0,
            "80": 0,
            "82": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "89": 0,
            "103": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0
          },
          "Branches": [
            {
              "Line": 80,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 14,
              "EndOffset": 89,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Exception FluentAssertions.Specialized.ActionAssertions::InvokeSubjectWithInterception()": {
          "Lines": {
            "119": 0,
            "123": 0,
            "124": 0,
            "127": 0,
            "128": 0,
            "130": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ActionAssertions::FailIfSubjectIsAsyncVoid()": {
          "Lines": {
            "135": 0,
            "137": 0,
            "139": 0
          },
          "Branches": [
            {
              "Line": 135,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 135,
              "Offset": 16,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Specialized.ActionAssertions::get_Identifier()": {
          "Lines": {
            "144": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ActionAssertions::.ctor(System.Action,FluentAssertions.Specialized.IExtractExceptions)": {
          "Lines": {
            "22": 0,
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Specialized\\AsyncFunctionAssertions.cs": {
      "FluentAssertions.Specialized.AsyncFunctionAssertions": {
        "System.Func`1<System.Threading.Tasks.Task> FluentAssertions.Specialized.AsyncFunctionAssertions::get_Subject()": {
          "Lines": {
            "27": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.ExceptionAssertions`1<TException> FluentAssertions.Specialized.AsyncFunctionAssertions::Throw(System.String,System.Object[])": {
          "Lines": {
            "42": 0,
            "43": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "55": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.AsyncFunctionAssertions::NotThrow(System.String,System.Object[])": {
          "Lines": {
            "72": 0,
            "73": 0,
            "76": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "100": 0,
            "101": 0,
            "104": 0,
            "106": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "114": 0,
            "115": 0
          },
          "Branches": [
            {
              "Line": 106,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 25,
              "EndOffset": 95,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Exception FluentAssertions.Specialized.AsyncFunctionAssertions::GetFirstNonAggregateException(System.Exception)": {
          "Lines": {
            "119": 0,
            "120": 0,
            "122": 0,
            "125": 0
          },
          "Branches": [
            {
              "Line": 120,
              "Offset": 17,
              "EndOffset": 4,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 120,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Exception FluentAssertions.Specialized.AsyncFunctionAssertions::InvokeSubjectWithInterception()": {
          "Lines": {
            "130": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "138": 0,
            "139": 0,
            "141": 0,
            "142": 0,
            "145": 0,
            "147": 0,
            "149": 0
          },
          "Branches": [
            {
              "Line": 139,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 139,
              "Offset": 29,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 139,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 139,
              "Offset": 45,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.AsyncFunctionAssertions::.ctor(System.Func`1<System.Threading.Tasks.Task>,FluentAssertions.Specialized.IExtractExceptions)": {
          "Lines": {
            "18": 0,
            "20": 0,
            "21": 0,
            "22": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Specialized\\ExceptionAssertions.cs": {
      "FluentAssertions.Specialized.ExceptionAssertions`1": {
        "TException FluentAssertions.Specialized.ExceptionAssertions`1::get_And()": {
          "Lines": {
            "37": 0
          },
          "Branches": []
        },
        "TException FluentAssertions.Specialized.ExceptionAssertions`1::get_Which()": {
          "Lines": {
            "42": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Specialized.ExceptionAssertions`1::get_Identifier()": {
          "Lines": {
            "47": 0
          },
          "Branches": []
        },
        "FluentAssertions.Specialized.ExceptionAssertions`1<TException> FluentAssertions.Specialized.ExceptionAssertions`1::WithMessage(System.String,System.String,System.Object[])": {
          "Lines": {
            "66": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "72": 0,
            "74": 0
          },
          "Branches": [
            {
              "Line": 72,
              "Offset": 71,
              "EndOffset": 73,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 72,
              "Offset": 71,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Specialized.ExceptionAssertions`1<TInnerException> FluentAssertions.Specialized.ExceptionAssertions`1::WithInnerException(System.String,System.Object[])": {
          "Lines": {
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "92": 0,
            "93": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "108": 0
          },
          "Branches": [
            {
              "Line": 92,
              "Offset": 73,
              "EndOffset": 75,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 73,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 98,
              "Offset": 157,
              "EndOffset": 159,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 98,
              "Offset": 157,
              "EndOffset": 182,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Specialized.ExceptionAssertions`1<TInnerException> FluentAssertions.Specialized.ExceptionAssertions`1::WithInnerExceptionExactly(System.String,System.Object[])": {
          "Lines": {
            "121": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "126": 0,
            "128": 0,
            "129": 0,
            "130": 0,
            "131": 0,
            "133": 0
          },
          "Branches": [
            {
              "Line": 123,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 123,
              "Offset": 21,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 123,
              "Offset": 62,
              "EndOffset": 64,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 123,
              "Offset": 62,
              "EndOffset": 87,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Specialized.ExceptionAssertions`1<TException> FluentAssertions.Specialized.ExceptionAssertions`1::Where(System.Linq.Expressions.Expression`1<System.Func`2<TException,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "152": 0,
            "153": 0,
            "154": 0,
            "155": 0,
            "156": 0,
            "157": 0,
            "159": 0
          },
          "Branches": []
        },
        "TException FluentAssertions.Specialized.ExceptionAssertions`1::get_SingleSubject()": {
          "Lines": {
            "166": 0,
            "168": 0,
            "169": 0,
            "170": 0,
            "171": 0,
            "172": 0,
            "175": 0
          },
          "Branches": [
            {
              "Line": 166,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 166,
              "Offset": 12,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Specialized.ExceptionAssertions`1::BuildExceptionsString(System.Collections.Generic.IEnumerable`1<TException>)": {
          "Lines": {
            "181": 0,
            "182": 0,
            "183": 0,
            "184": 0
          },
          "Branches": [
            {
              "Line": 181,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 181,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExceptionAssertions`1::.ctor(System.Collections.Generic.IEnumerable`1<TException>)": {
          "Lines": {
            "29": 0,
            "31": 0,
            "32": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ExceptionAssertions`1::.cctor()": {
          "Lines": {
            "25": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExceptionAssertions`1/ExceptionMessageAssertion": {
        "System.String FluentAssertions.Specialized.ExceptionAssertions`1/ExceptionMessageAssertion::get_Context()": {
          "Lines": {
            "194": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ExceptionAssertions`1/ExceptionMessageAssertion::Execute(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.String,System.Object[])": {
          "Lines": {
            "198": 0,
            "200": 0,
            "202": 0,
            "204": 0,
            "206": 0,
            "208": 0,
            "210": 0,
            "211": 0,
            "213": 0,
            "215": 0,
            "219": 0,
            "221": 0,
            "223": 0,
            "224": 0
          },
          "Branches": [
            {
              "Line": 202,
              "Offset": 108,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 98,
              "EndOffset": 102,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 202,
              "Offset": 108,
              "EndOffset": 110,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 219,
              "Offset": 204,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 219,
              "Offset": 204,
              "EndOffset": 206,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExceptionAssertions`1/ExceptionMessageAssertion::.ctor()": {
          "Lines": {
            "189": 0,
            "191": 0,
            "192": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExceptionAssertions`1/<>c__10`1": {
        "System.Boolean FluentAssertions.Specialized.ExceptionAssertions`1/<>c__10`1::<WithInnerExceptionExactly>b__10_1(TInnerException)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 126,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 126,
              "Offset": 7,
              "EndOffset": 13,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Specialized\\ExecutionTimeAssertions.cs": {
      "FluentAssertions.Specialized.ExecutionTimeAssertions": {
        "System.ValueTuple`2<System.Boolean,System.TimeSpan> FluentAssertions.Specialized.ExecutionTimeAssertions::PollUntil(System.Func`2<System.TimeSpan,System.Boolean>,System.Boolean,System.TimeSpan)": {
          "Lines": {
            "36": 0,
            "37": 0,
            "39": 0,
            "41": 0,
            "46": 0,
            "47": 0,
            "50": 0,
            "53": 0,
            "56": 0
          },
          "Branches": [
            {
              "Line": 39,
              "Offset": 70,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 34,
              "EndOffset": 36,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 34,
              "EndOffset": 72,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 70,
              "EndOffset": 72,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 83,
              "EndOffset": 85,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 83,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExecutionTimeAssertions::BeLessOrEqualTo(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "75": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0
          },
          "Branches": [
            {
              "Line": 77,
              "Offset": 114,
              "EndOffset": 116,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 114,
              "EndOffset": 123,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExecutionTimeAssertions::BeLessThan(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "103": 0,
            "105": 0,
            "106": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0
          },
          "Branches": [
            {
              "Line": 105,
              "Offset": 124,
              "EndOffset": 126,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 124,
              "EndOffset": 133,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExecutionTimeAssertions::BeGreaterOrEqualTo(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "131": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "137": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "141": 0
          },
          "Branches": [
            {
              "Line": 133,
              "Offset": 114,
              "EndOffset": 116,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 114,
              "EndOffset": 123,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExecutionTimeAssertions::BeGreaterThan(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "159": 0,
            "161": 0,
            "162": 0,
            "163": 0,
            "164": 0,
            "165": 0,
            "166": 0,
            "167": 0,
            "168": 0,
            "169": 0
          },
          "Branches": [
            {
              "Line": 161,
              "Offset": 114,
              "EndOffset": 116,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 161,
              "Offset": 114,
              "EndOffset": 123,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExecutionTimeAssertions::BeCloseTo(System.TimeSpan,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "190": 0,
            "191": 0,
            "198": 0,
            "200": 0,
            "201": 0,
            "202": 0,
            "203": 0,
            "204": 0,
            "205": 0,
            "206": 0,
            "207": 0,
            "208": 0,
            "209": 0
          },
          "Branches": [
            {
              "Line": 200,
              "Offset": 82,
              "EndOffset": 84,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 82,
              "EndOffset": 93,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 146,
              "EndOffset": 148,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 146,
              "EndOffset": 155,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Specialized.ExecutionTimeAssertions::.ctor(FluentAssertions.Specialized.ExecutionTime)": {
          "Lines": {
            "21": 0,
            "23": 0,
            "24": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass3_0": {
        "System.Boolean FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass3_0::<BeLessOrEqualTo>g__Condition|0(System.TimeSpan)": {
          "Lines": {
            "74": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass4_0": {
        "System.Boolean FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass4_0::<BeLessThan>g__Condition|0(System.TimeSpan)": {
          "Lines": {
            "102": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass5_0": {
        "System.Boolean FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass5_0::<BeGreaterOrEqualTo>g__Condition|0(System.TimeSpan)": {
          "Lines": {
            "130": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass6_0": {
        "System.Boolean FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass6_0::<BeGreaterThan>g__Condition|0(System.TimeSpan)": {
          "Lines": {
            "158": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass7_0": {
        "System.Boolean FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass7_0::<BeCloseTo>g__MaxCondition|0(System.TimeSpan)": {
          "Lines": {
            "193": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Specialized.ExecutionTimeAssertions/<>c__DisplayClass7_0::<BeCloseTo>g__MinCondition|1(System.TimeSpan)": {
          "Lines": {
            "194": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.ExecutionTime": {
        "System.TimeSpan FluentAssertions.Specialized.ExecutionTime::get_ElapsedTime()": {
          "Lines": {
            "250": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Specialized.ExecutionTime::get_IsRunning()": {
          "Lines": {
            "252": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Specialized.ExecutionTime::get_ActionDescription()": {
          "Lines": {
            "254": 0
          },
          "Branches": []
        },
        "System.Threading.Tasks.Task FluentAssertions.Specialized.ExecutionTime::get_Task()": {
          "Lines": {
            "256": 0
          },
          "Branches": []
        },
        "System.Exception FluentAssertions.Specialized.ExecutionTime::get_Exception()": {
          "Lines": {
            "258": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ExecutionTime::.ctor(System.Action)": {
          "Lines": {
            "219": 0,
            "221": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Specialized.ExecutionTime::.ctor(System.Action,System.String)": {
          "Lines": {
            "223": 0,
            "225": 0,
            "226": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "230": 0,
            "231": 0,
            "232": 0,
            "233": 0,
            "234": 0,
            "235": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "239": 0,
            "240": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "244": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "248": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Specialized.MemberExecutionTime`1": {
        "System.Void FluentAssertions.Specialized.MemberExecutionTime`1::.ctor(T,System.Linq.Expressions.Expression`1<System.Action`1<T>>)": {
          "Lines": {
            "271": 0,
            "273": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\BooleanAssertions.cs": {
      "FluentAssertions.Primitives.BooleanAssertions": {
        "System.Nullable`1<System.Boolean> FluentAssertions.Primitives.BooleanAssertions::get_Subject()": {
          "Lines": {
            "21": 4
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.BooleanAssertions> FluentAssertions.Primitives.BooleanAssertions::BeFalse(System.String,System.Object[])": {
          "Lines": {
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "40": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.BooleanAssertions> FluentAssertions.Primitives.BooleanAssertions::BeTrue(System.String,System.Object[])": {
          "Lines": {
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "60": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.BooleanAssertions> FluentAssertions.Primitives.BooleanAssertions::Be(System.Boolean,System.String,System.Object[])": {
          "Lines": {
            "76": 1,
            "77": 1,
            "78": 1,
            "79": 1,
            "81": 1
          },
          "Branches": [
            {
              "Line": 76,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 1
            },
            {
              "Line": 76,
              "Offset": 19,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.BooleanAssertions::.ctor(System.Nullable`1<System.Boolean>)": {
          "Lines": {
            "13": 1,
            "15": 1,
            "16": 1
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\DateTimeAssertions.cs": {
      "FluentAssertions.Primitives.DateTimeAssertions": {
        "System.Nullable`1<System.DateTime> FluentAssertions.Primitives.DateTimeAssertions::get_Subject()": {
          "Lines": {
            "27": 48
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::Be(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "48": 0
          },
          "Branches": [
            {
              "Line": 42,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 19,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 92,
              "EndOffset": 105,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBe(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "70": 0
          },
          "Branches": [
            {
              "Line": 65,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 19,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeCloseTo(System.DateTime,System.Int32,System.String,System.Object[])": {
          "Lines": {
            "97": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeCloseTo(System.DateTime,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "124": 0,
            "125": 0,
            "127": 0,
            "128": 0,
            "130": 0,
            "131": 0,
            "132": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "137": 0
          },
          "Branches": [
            {
              "Line": 130,
              "Offset": 105,
              "EndOffset": 107,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 130,
              "Offset": 128,
              "EndOffset": 130,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 130,
              "Offset": 105,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 130,
              "Offset": 128,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 130,
              "Offset": 213,
              "EndOffset": 215,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 130,
              "Offset": 213,
              "EndOffset": 227,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeCloseTo(System.DateTime,System.Int32,System.String,System.Object[])": {
          "Lines": {
            "164": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeCloseTo(System.DateTime,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "191": 0,
            "192": 0,
            "194": 0,
            "195": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "200": 0,
            "201": 0,
            "202": 0,
            "203": 0,
            "205": 0
          },
          "Branches": [
            {
              "Line": 197,
              "Offset": 105,
              "EndOffset": 107,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 197,
              "Offset": 128,
              "EndOffset": 130,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 197,
              "Offset": 128,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 197,
              "Offset": 105,
              "EndOffset": 156,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 197,
              "Offset": 216,
              "EndOffset": 218,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 197,
              "Offset": 216,
              "EndOffset": 230,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeBefore(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "222": 0,
            "223": 0,
            "224": 0,
            "225": 0,
            "226": 0,
            "228": 0
          },
          "Branches": [
            {
              "Line": 222,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 222,
              "Offset": 19,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 222,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 222,
              "Offset": 98,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeBefore(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "245": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeOnOrBefore(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "262": 0,
            "263": 0,
            "264": 0,
            "265": 0,
            "266": 0,
            "268": 0
          },
          "Branches": [
            {
              "Line": 262,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 262,
              "Offset": 19,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 262,
              "Offset": 101,
              "EndOffset": 103,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 262,
              "Offset": 101,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeOnOrBefore(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "285": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeAfter(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "302": 0,
            "303": 0,
            "304": 0,
            "305": 0,
            "306": 0,
            "308": 0
          },
          "Branches": [
            {
              "Line": 302,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 302,
              "Offset": 19,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 302,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 302,
              "Offset": 98,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeAfter(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "325": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeOnOrAfter(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "342": 0,
            "343": 0,
            "344": 0,
            "345": 0,
            "346": 0,
            "348": 0
          },
          "Branches": [
            {
              "Line": 342,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 342,
              "Offset": 19,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 342,
              "Offset": 101,
              "EndOffset": 103,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 342,
              "Offset": 101,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeOnOrAfter(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "365": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::HaveYear(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "381": 4,
            "382": 4,
            "383": 4,
            "384": 4,
            "385": 4,
            "386": 4,
            "387": 4,
            "388": 4,
            "389": 4,
            "391": 4
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotHaveYear(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "407": 0,
            "408": 0,
            "409": 0,
            "410": 0,
            "411": 0,
            "412": 0,
            "413": 0,
            "414": 0,
            "415": 0,
            "417": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::HaveMonth(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "433": 4,
            "434": 4,
            "435": 4,
            "436": 4,
            "437": 4,
            "438": 4,
            "439": 4,
            "440": 4,
            "441": 4,
            "443": 4
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotHaveMonth(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "459": 0,
            "460": 0,
            "461": 0,
            "462": 0,
            "463": 0,
            "464": 0,
            "465": 0,
            "466": 0,
            "467": 0,
            "469": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::HaveDay(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "485": 4,
            "486": 4,
            "487": 4,
            "488": 4,
            "489": 4,
            "490": 4,
            "491": 4,
            "492": 4,
            "493": 4,
            "495": 4
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotHaveDay(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "511": 0,
            "512": 0,
            "513": 0,
            "514": 0,
            "515": 0,
            "516": 0,
            "517": 0,
            "518": 0,
            "519": 0,
            "521": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::HaveHour(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "537": 0,
            "538": 0,
            "539": 0,
            "540": 0,
            "541": 0,
            "542": 0,
            "543": 0,
            "544": 0,
            "545": 0,
            "547": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotHaveHour(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "563": 0,
            "564": 0,
            "565": 0,
            "566": 0,
            "567": 0,
            "568": 0,
            "569": 0,
            "570": 0,
            "571": 0,
            "572": 0,
            "574": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::HaveMinute(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "591": 0,
            "592": 0,
            "593": 0,
            "594": 0,
            "595": 0,
            "596": 0,
            "597": 0,
            "598": 0,
            "599": 0,
            "601": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotHaveMinute(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "618": 0,
            "619": 0,
            "620": 0,
            "621": 0,
            "622": 0,
            "623": 0,
            "624": 0,
            "625": 0,
            "626": 0,
            "627": 0,
            "629": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::HaveSecond(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "646": 0,
            "647": 0,
            "648": 0,
            "649": 0,
            "650": 0,
            "651": 0,
            "652": 0,
            "653": 0,
            "654": 0,
            "656": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotHaveSecond(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "673": 0,
            "674": 0,
            "675": 0,
            "676": 0,
            "677": 0,
            "678": 0,
            "679": 0,
            "680": 0,
            "681": 0,
            "683": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeRangeAssertions FluentAssertions.Primitives.DateTimeAssertions::BeMoreThan(System.TimeSpan)": {
          "Lines": {
            "695": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeRangeAssertions FluentAssertions.Primitives.DateTimeAssertions::BeAtLeast(System.TimeSpan)": {
          "Lines": {
            "708": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeRangeAssertions FluentAssertions.Primitives.DateTimeAssertions::BeExactly(System.TimeSpan)": {
          "Lines": {
            "720": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeRangeAssertions FluentAssertions.Primitives.DateTimeAssertions::BeWithin(System.TimeSpan)": {
          "Lines": {
            "732": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeRangeAssertions FluentAssertions.Primitives.DateTimeAssertions::BeLessThan(System.TimeSpan)": {
          "Lines": {
            "744": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeSameDateAs(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "761": 0,
            "763": 0,
            "764": 0,
            "765": 0,
            "766": 0,
            "767": 0,
            "768": 0,
            "769": 0,
            "770": 0,
            "771": 0,
            "773": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::NotBeSameDateAs(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "790": 0,
            "792": 0,
            "793": 0,
            "794": 0,
            "795": 0,
            "796": 0,
            "797": 0,
            "798": 0,
            "799": 0,
            "800": 0,
            "802": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeOneOf(System.Nullable`1<System.DateTime>[])": {
          "Lines": {
            "813": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeOneOf(System.DateTime[])": {
          "Lines": {
            "824": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeOneOf(System.Collections.Generic.IEnumerable`1<System.DateTime>,System.String,System.Object[])": {
          "Lines": {
            "842": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeOneOf(System.Collections.Generic.IEnumerable`1<System.Nullable`1<System.DateTime>>,System.String,System.Object[])": {
          "Lines": {
            "860": 0,
            "861": 0,
            "862": 0,
            "863": 0,
            "865": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeAssertions::BeIn(System.DateTimeKind,System.String,System.Object[])": {
          "Lines": {
            "883": 0,
            "884": 0,
            "885": 0,
            "886": 0,
            "887": 0,
            "888": 0,
            "889": 0,
            "890": 0,
            "891": 0,
            "893": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.DateTimeAssertions::.ctor(System.Nullable`1<System.DateTime>)": {
          "Lines": {
            "19": 12,
            "21": 12,
            "22": 12
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\DateTimeOffsetAssertions.cs": {
      "FluentAssertions.Primitives.DateTimeOffsetAssertions": {
        "System.Nullable`1<System.DateTimeOffset> FluentAssertions.Primitives.DateTimeOffsetAssertions::get_Subject()": {
          "Lines": {
            "27": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::Be(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 43,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 19,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 92,
              "EndOffset": 105,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBe(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "71": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 19,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeCloseTo(System.DateTimeOffset,System.Int32,System.String,System.Object[])": {
          "Lines": {
            "99": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeCloseTo(System.DateTimeOffset,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "127": 0,
            "128": 0,
            "130": 0,
            "131": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "137": 0,
            "138": 0,
            "140": 0
          },
          "Branches": [
            {
              "Line": 133,
              "Offset": 105,
              "EndOffset": 107,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 128,
              "EndOffset": 130,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 105,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 128,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 213,
              "EndOffset": 215,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 213,
              "EndOffset": 227,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeCloseTo(System.DateTimeOffset,System.Int32,System.String,System.Object[])": {
          "Lines": {
            "167": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeCloseTo(System.DateTimeOffset,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "194": 0,
            "195": 0,
            "197": 0,
            "198": 0,
            "200": 0,
            "201": 0,
            "202": 0,
            "203": 0,
            "204": 0,
            "205": 0,
            "206": 0,
            "208": 0
          },
          "Branches": [
            {
              "Line": 200,
              "Offset": 105,
              "EndOffset": 107,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 128,
              "EndOffset": 130,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 128,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 105,
              "EndOffset": 156,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 216,
              "EndOffset": 218,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 216,
              "EndOffset": 230,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeBefore(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "225": 0,
            "226": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "231": 0
          },
          "Branches": [
            {
              "Line": 225,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 19,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 98,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeBefore(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "248": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeOnOrBefore(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "265": 0,
            "266": 0,
            "267": 0,
            "268": 0,
            "269": 0,
            "271": 0
          },
          "Branches": [
            {
              "Line": 265,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 265,
              "Offset": 19,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 265,
              "Offset": 101,
              "EndOffset": 103,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 265,
              "Offset": 101,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeOnOrBefore(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "288": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeAfter(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "305": 0,
            "306": 0,
            "307": 0,
            "308": 0,
            "309": 0,
            "311": 0
          },
          "Branches": [
            {
              "Line": 305,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 305,
              "Offset": 19,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 305,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 305,
              "Offset": 98,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeAfter(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "328": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeOnOrAfter(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "345": 0,
            "346": 0,
            "347": 0,
            "348": 0,
            "349": 0,
            "351": 0
          },
          "Branches": [
            {
              "Line": 345,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 345,
              "Offset": 19,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 345,
              "Offset": 101,
              "EndOffset": 103,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 345,
              "Offset": 101,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeOnOrAfter(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "368": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveYear(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "385": 0,
            "386": 0,
            "387": 0,
            "388": 0,
            "389": 0,
            "390": 0,
            "391": 0,
            "392": 0,
            "393": 0,
            "395": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveYear(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "411": 0,
            "412": 0,
            "413": 0,
            "414": 0,
            "415": 0,
            "416": 0,
            "417": 0,
            "418": 0,
            "419": 0,
            "421": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveMonth(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "438": 0,
            "439": 0,
            "440": 0,
            "441": 0,
            "442": 0,
            "443": 0,
            "444": 0,
            "445": 0,
            "446": 0,
            "448": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveMonth(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "464": 0,
            "465": 0,
            "466": 0,
            "467": 0,
            "468": 0,
            "469": 0,
            "470": 0,
            "471": 0,
            "472": 0,
            "474": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveDay(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "491": 0,
            "492": 0,
            "493": 0,
            "494": 0,
            "495": 0,
            "496": 0,
            "497": 0,
            "498": 0,
            "499": 0,
            "501": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveDay(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "517": 0,
            "518": 0,
            "519": 0,
            "520": 0,
            "521": 0,
            "522": 0,
            "523": 0,
            "524": 0,
            "525": 0,
            "527": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveHour(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "544": 0,
            "545": 0,
            "546": 0,
            "547": 0,
            "548": 0,
            "549": 0,
            "550": 0,
            "551": 0,
            "552": 0,
            "554": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveHour(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "570": 0,
            "571": 0,
            "572": 0,
            "573": 0,
            "574": 0,
            "575": 0,
            "576": 0,
            "577": 0,
            "578": 0,
            "580": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveMinute(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "597": 0,
            "598": 0,
            "599": 0,
            "600": 0,
            "601": 0,
            "602": 0,
            "603": 0,
            "604": 0,
            "605": 0,
            "607": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveMinute(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "624": 0,
            "625": 0,
            "626": 0,
            "627": 0,
            "628": 0,
            "629": 0,
            "630": 0,
            "631": 0,
            "632": 0,
            "634": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveSecond(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "651": 0,
            "652": 0,
            "653": 0,
            "654": 0,
            "655": 0,
            "656": 0,
            "657": 0,
            "658": 0,
            "659": 0,
            "661": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveSecond(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "678": 0,
            "679": 0,
            "680": 0,
            "681": 0,
            "682": 0,
            "683": 0,
            "684": 0,
            "685": 0,
            "686": 0,
            "688": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::HaveOffset(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "705": 0,
            "706": 0,
            "707": 0,
            "708": 0,
            "709": 0,
            "710": 0,
            "711": 0,
            "712": 0,
            "713": 0,
            "715": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotHaveOffset(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "732": 0,
            "733": 0,
            "734": 0,
            "735": 0,
            "736": 0,
            "737": 0,
            "738": 0,
            "739": 0,
            "740": 0,
            "742": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeOffsetRangeAssertions FluentAssertions.Primitives.DateTimeOffsetAssertions::BeMoreThan(System.TimeSpan)": {
          "Lines": {
            "754": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeOffsetRangeAssertions FluentAssertions.Primitives.DateTimeOffsetAssertions::BeAtLeast(System.TimeSpan)": {
          "Lines": {
            "767": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeOffsetRangeAssertions FluentAssertions.Primitives.DateTimeOffsetAssertions::BeExactly(System.TimeSpan)": {
          "Lines": {
            "779": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeOffsetRangeAssertions FluentAssertions.Primitives.DateTimeOffsetAssertions::BeWithin(System.TimeSpan)": {
          "Lines": {
            "791": 0
          },
          "Branches": []
        },
        "FluentAssertions.Primitives.DateTimeOffsetRangeAssertions FluentAssertions.Primitives.DateTimeOffsetAssertions::BeLessThan(System.TimeSpan)": {
          "Lines": {
            "803": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeSameDateAs(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "820": 0,
            "822": 0,
            "823": 0,
            "824": 0,
            "825": 0,
            "826": 0,
            "827": 0,
            "828": 0,
            "829": 0,
            "830": 0,
            "832": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::NotBeSameDateAs(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "849": 0,
            "851": 0,
            "852": 0,
            "853": 0,
            "854": 0,
            "855": 0,
            "856": 0,
            "857": 0,
            "858": 0,
            "859": 0,
            "861": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeOneOf(System.Nullable`1<System.DateTimeOffset>[])": {
          "Lines": {
            "872": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeOneOf(System.DateTimeOffset[])": {
          "Lines": {
            "883": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeOneOf(System.Collections.Generic.IEnumerable`1<System.DateTimeOffset>,System.String,System.Object[])": {
          "Lines": {
            "901": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetAssertions::BeOneOf(System.Collections.Generic.IEnumerable`1<System.Nullable`1<System.DateTimeOffset>>,System.String,System.Object[])": {
          "Lines": {
            "919": 0,
            "920": 0,
            "921": 0,
            "922": 0,
            "924": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.DateTimeOffsetAssertions::.ctor(System.Nullable`1<System.DateTimeOffset>)": {
          "Lines": {
            "19": 0,
            "21": 0,
            "22": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\DateTimeOffsetRangeAssertions.cs": {
      "FluentAssertions.Primitives.DateTimeOffsetRangeAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetRangeAssertions::Before(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "72": 0,
            "74": 0,
            "76": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "86": 0
          },
          "Branches": [
            {
              "Line": 72,
              "Offset": 96,
              "EndOffset": 101,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 141,
              "EndOffset": 143,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 72,
              "Offset": 96,
              "EndOffset": 239,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 141,
              "EndOffset": 239,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.DateTimeOffsetRangeAssertions::After(System.DateTimeOffset,System.String,System.Object[])": {
          "Lines": {
            "104": 0,
            "105": 0,
            "106": 0,
            "107": 0,
            "108": 0,
            "110": 0,
            "112": 0,
            "114": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "125": 0
          },
          "Branches": [
            {
              "Line": 110,
              "Offset": 96,
              "EndOffset": 101,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 114,
              "Offset": 143,
              "EndOffset": 145,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 110,
              "Offset": 96,
              "EndOffset": 241,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 114,
              "Offset": 143,
              "EndOffset": 241,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.DateTimeOffsetRangeAssertions::.ctor(FluentAssertions.Primitives.DateTimeOffsetAssertions,System.Nullable`1<System.DateTimeOffset>,FluentAssertions.Primitives.TimeSpanCondition,System.TimeSpan)": {
          "Lines": {
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "47": 0,
            "48": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 14,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 62,
              "EndOffset": 64,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 62,
              "EndOffset": 87,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 110,
              "EndOffset": 112,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 110,
              "EndOffset": 135,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 158,
              "EndOffset": 160,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 158,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 206,
              "EndOffset": 208,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 206,
              "EndOffset": 231,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\DateTimeRangeAssertions.cs": {
      "FluentAssertions.Primitives.DateTimeRangeAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeRangeAssertions::Before(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "71": 0,
            "73": 0,
            "75": 0,
            "77": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "88": 0
          },
          "Branches": [
            {
              "Line": 73,
              "Offset": 110,
              "EndOffset": 115,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 155,
              "EndOffset": 157,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 73,
              "Offset": 110,
              "EndOffset": 253,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 155,
              "EndOffset": 253,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.DateTimeRangeAssertions::After(System.DateTime,System.String,System.Object[])": {
          "Lines": {
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "114": 0,
            "116": 0,
            "118": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "129": 0
          },
          "Branches": [
            {
              "Line": 114,
              "Offset": 110,
              "EndOffset": 115,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 118,
              "Offset": 157,
              "EndOffset": 159,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 114,
              "Offset": 110,
              "EndOffset": 255,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 118,
              "Offset": 157,
              "EndOffset": 255,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.DateTimeRangeAssertions::.ctor(FluentAssertions.Primitives.DateTimeAssertions,System.Nullable`1<System.DateTime>,FluentAssertions.Primitives.TimeSpanCondition,System.TimeSpan)": {
          "Lines": {
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "47": 0,
            "48": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 14,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 62,
              "EndOffset": 64,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 62,
              "EndOffset": 87,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 110,
              "EndOffset": 112,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 110,
              "EndOffset": 135,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 158,
              "EndOffset": 160,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 158,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 206,
              "EndOffset": 208,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 206,
              "EndOffset": 231,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\GuidAssertions.cs": {
      "FluentAssertions.Primitives.GuidAssertions": {
        "System.Nullable`1<System.Guid> FluentAssertions.Primitives.GuidAssertions::get_Subject()": {
          "Lines": {
            "21": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.GuidAssertions> FluentAssertions.Primitives.GuidAssertions::BeEmpty(System.String,System.Object[])": {
          "Lines": {
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 19,
              "EndOffset": 47,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.GuidAssertions> FluentAssertions.Primitives.GuidAssertions::NotBeEmpty(System.String,System.Object[])": {
          "Lines": {
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "62": 0
          },
          "Branches": [
            {
              "Line": 57,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 19,
              "EndOffset": 47,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.GuidAssertions> FluentAssertions.Primitives.GuidAssertions::Be(System.String,System.String,System.Object[])": {
          "Lines": {
            "82": 0,
            "83": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.GuidAssertions> FluentAssertions.Primitives.GuidAssertions::Be(System.Guid,System.String,System.Object[])": {
          "Lines": {
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "104": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.GuidAssertions> FluentAssertions.Primitives.GuidAssertions::NotBe(System.Guid,System.String,System.Object[])": {
          "Lines": {
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "125": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.GuidAssertions::.ctor(System.Nullable`1<System.Guid>)": {
          "Lines": {
            "13": 0,
            "15": 0,
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\NegatedStringStartValidator.cs": {
      "FluentAssertions.Primitives.NegatedStringStartValidator": {
        "System.String FluentAssertions.Primitives.NegatedStringStartValidator::get_ExpectationDescription()": {
          "Lines": {
            "20": 0,
            "21": 0
          },
          "Branches": [
            {
              "Line": 20,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.NegatedStringStartValidator::get_IgnoreCase()": {
          "Lines": {
            "29": 0,
            "30": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 7,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NegatedStringStartValidator::ValidateAgainstMismatch()": {
          "Lines": {
            "36": 0,
            "37": 0,
            "39": 0,
            "40": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 23,
              "EndOffset": 77,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NegatedStringStartValidator::.ctor(System.String,System.String,System.StringComparison,System.String,System.Object[])": {
          "Lines": {
            "11": 0,
            "13": 0,
            "14": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\NullableBooleanAssertions.cs": {
      "FluentAssertions.Primitives.NullableBooleanAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableBooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::HaveValue(System.String,System.Object[])": {
          "Lines": {
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "35": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableBooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "50": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableBooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::NotHaveValue(System.String,System.Object[])": {
          "Lines": {
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "70": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableBooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::BeNull(System.String,System.Object[])": {
          "Lines": {
            "85": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.BooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::Be(System.Nullable`1<System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "106": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.BooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::NotBeFalse(System.String,System.Object[])": {
          "Lines": {
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "126": 0
          },
          "Branches": [
            {
              "Line": 121,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 121,
              "Offset": 19,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.BooleanAssertions> FluentAssertions.Primitives.NullableBooleanAssertions::NotBeTrue(System.String,System.Object[])": {
          "Lines": {
            "141": 0,
            "142": 0,
            "143": 0,
            "144": 0,
            "146": 0
          },
          "Branches": [
            {
              "Line": 141,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 141,
              "Offset": 19,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NullableBooleanAssertions::.ctor(System.Nullable`1<System.Boolean>)": {
          "Lines": {
            "14": 0,
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\NullableDateTimeAssertions.cs": {
      "FluentAssertions.Primitives.NullableDateTimeAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeAssertions> FluentAssertions.Primitives.NullableDateTimeAssertions::HaveValue(System.String,System.Object[])": {
          "Lines": {
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "39": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeAssertions> FluentAssertions.Primitives.NullableDateTimeAssertions::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "54": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeAssertions> FluentAssertions.Primitives.NullableDateTimeAssertions::NotHaveValue(System.String,System.Object[])": {
          "Lines": {
            "69": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "74": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeAssertions> FluentAssertions.Primitives.NullableDateTimeAssertions::BeNull(System.String,System.Object[])": {
          "Lines": {
            "89": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeAssertions> FluentAssertions.Primitives.NullableDateTimeAssertions::Be(System.Nullable`1<System.DateTime>,System.String,System.Object[])": {
          "Lines": {
            "105": 0,
            "106": 0,
            "107": 0,
            "108": 0,
            "110": 0
          },
          "Branches": [
            {
              "Line": 105,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 28,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 40,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NullableDateTimeAssertions::.ctor(System.Nullable`1<System.DateTime>)": {
          "Lines": {
            "18": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\NullableDateTimeOffsetAssertions.cs": {
      "FluentAssertions.Primitives.NullableDateTimeOffsetAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeOffsetAssertions> FluentAssertions.Primitives.NullableDateTimeOffsetAssertions::HaveValue(System.String,System.Object[])": {
          "Lines": {
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "39": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeOffsetAssertions> FluentAssertions.Primitives.NullableDateTimeOffsetAssertions::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "54": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeOffsetAssertions> FluentAssertions.Primitives.NullableDateTimeOffsetAssertions::NotHaveValue(System.String,System.Object[])": {
          "Lines": {
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "75": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableDateTimeOffsetAssertions> FluentAssertions.Primitives.NullableDateTimeOffsetAssertions::BeNull(System.String,System.Object[])": {
          "Lines": {
            "91": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.DateTimeOffsetAssertions> FluentAssertions.Primitives.NullableDateTimeOffsetAssertions::Be(System.Nullable`1<System.DateTimeOffset>,System.String,System.Object[])": {
          "Lines": {
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "113": 0
          },
          "Branches": [
            {
              "Line": 108,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 28,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 40,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NullableDateTimeOffsetAssertions::.ctor(System.Nullable`1<System.DateTimeOffset>)": {
          "Lines": {
            "18": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\NullableGuidAssertions.cs": {
      "FluentAssertions.Primitives.NullableGuidAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableGuidAssertions> FluentAssertions.Primitives.NullableGuidAssertions::HaveValue(System.String,System.Object[])": {
          "Lines": {
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "35": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableGuidAssertions> FluentAssertions.Primitives.NullableGuidAssertions::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "50": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableGuidAssertions> FluentAssertions.Primitives.NullableGuidAssertions::NotHaveValue(System.String,System.Object[])": {
          "Lines": {
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "70": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableGuidAssertions> FluentAssertions.Primitives.NullableGuidAssertions::BeNull(System.String,System.Object[])": {
          "Lines": {
            "85": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableGuidAssertions> FluentAssertions.Primitives.NullableGuidAssertions::Be(System.Nullable`1<System.Guid>,System.String,System.Object[])": {
          "Lines": {
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "106": 0
          },
          "Branches": [
            {
              "Line": 101,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 28,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 40,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NullableGuidAssertions::.ctor(System.Nullable`1<System.Guid>)": {
          "Lines": {
            "14": 0,
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\NullableSimpleTimeSpanAssertions.cs": {
      "FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions> FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions::HaveValue(System.String,System.Object[])": {
          "Lines": {
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "40": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions> FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "55": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions> FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions::NotHaveValue(System.String,System.Object[])": {
          "Lines": {
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "75": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions> FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions::BeNull(System.String,System.Object[])": {
          "Lines": {
            "90": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions> FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions::Be(System.Nullable`1<System.TimeSpan>,System.String,System.Object[])": {
          "Lines": {
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "112": 0
          },
          "Branches": [
            {
              "Line": 107,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 28,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 40,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.NullableSimpleTimeSpanAssertions::.ctor(System.Nullable`1<System.TimeSpan>)": {
          "Lines": {
            "19": 0,
            "21": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\ObjectAssertions.cs": {
      "FluentAssertions.Primitives.ObjectAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.Primitives.ObjectAssertions::Be(System.Object,System.String,System.Object[])": {
          "Lines": {
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "42": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.Primitives.ObjectAssertions::NotBe(System.Object,System.String,System.Object[])": {
          "Lines": {
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "63": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.ObjectAssertions::BeEquivalentTo(TExpectation,System.String,System.Object[])": {
          "Lines": {
            "86": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 86,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.ObjectAssertions::BeEquivalentTo(TExpectation,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>>,System.String,System.Object[])": {
          "Lines": {
            "115": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "127": 0,
            "128": 0,
            "129": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.Primitives.ObjectAssertions::HaveFlag(System.Enum,System.String,System.Object[])": {
          "Lines": {
            "145": 0,
            "146": 0,
            "147": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "152": 0,
            "153": 0,
            "154": 0,
            "155": 0,
            "157": 0
          },
          "Branches": [
            {
              "Line": 145,
              "Offset": 230,
              "EndOffset": 232,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 145,
              "Offset": 230,
              "EndOffset": 255,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.ObjectAssertions> FluentAssertions.Primitives.ObjectAssertions::NotHaveFlag(System.Enum,System.String,System.Object[])": {
          "Lines": {
            "174": 0,
            "175": 0,
            "176": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "184": 0,
            "186": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Primitives.ObjectAssertions::get_Identifier()": {
          "Lines": {
            "192": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.ObjectAssertions::.ctor(System.Object)": {
          "Lines": {
            "18": 0,
            "20": 0,
            "21": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\ReferenceTypeAssertions.cs": {
      "FluentAssertions.Primitives.ReferenceTypeAssertions`2": {
        "TSubject FluentAssertions.Primitives.ReferenceTypeAssertions`2::get_Subject()": {
          "Lines": {
            "20": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::BeNull(System.String,System.Object[])": {
          "Lines": {
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "40": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "61": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::BeSameAs(TSubject,System.String,System.Object[])": {
          "Lines": {
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "84": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::NotBeSameAs(TSubject,System.String,System.Object[])": {
          "Lines": {
            "100": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "107": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Primitives.ReferenceTypeAssertions`2::BeOfType(System.String,System.Object[])": {
          "Lines": {
            "123": 0,
            "125": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::BeOfType(System.Type,System.String,System.Object[])": {
          "Lines": {
            "143": 0,
            "144": 0,
            "145": 0,
            "146": 0,
            "147": 0,
            "149": 0,
            "150": 0,
            "152": 0,
            "153": 0,
            "156": 0,
            "159": 0
          },
          "Branches": [
            {
              "Line": 150,
              "Offset": 94,
              "EndOffset": 96,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 150,
              "Offset": 107,
              "EndOffset": 109,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 150,
              "Offset": 94,
              "EndOffset": 131,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 150,
              "Offset": 107,
              "EndOffset": 131,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::NotBeOfType(System.String,System.Object[])": {
          "Lines": {
            "175": 0,
            "177": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::NotBeOfType(System.Type,System.String,System.Object[])": {
          "Lines": {
            "195": 0,
            "196": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "201": 0,
            "203": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Primitives.ReferenceTypeAssertions`2::BeAssignableTo(System.String,System.Object[])": {
          "Lines": {
            "215": 0,
            "216": 0,
            "217": 0,
            "218": 0,
            "219": 0,
            "220": 0,
            "221": 0,
            "223": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::BeAssignableTo(System.Type,System.String,System.Object[])": {
          "Lines": {
            "235": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "239": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "244": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "249": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::NotBeAssignableTo(System.String,System.Object[])": {
          "Lines": {
            "261": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::NotBeAssignableTo(System.Type,System.String,System.Object[])": {
          "Lines": {
            "273": 0,
            "274": 0,
            "275": 0,
            "276": 0,
            "277": 0,
            "279": 0,
            "280": 0,
            "281": 0,
            "282": 0,
            "283": 0,
            "284": 0,
            "285": 0,
            "287": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::Match(System.Linq.Expressions.Expression`1<System.Func`2<TSubject,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "301": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Primitives.ReferenceTypeAssertions`2::Match(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "316": 0,
            "318": 0,
            "321": 0,
            "322": 0,
            "323": 0,
            "324": 0,
            "325": 0,
            "327": 0
          },
          "Branches": [
            {
              "Line": 316,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 316,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\SimpleTimeSpanAssertions.cs": {
      "FluentAssertions.Primitives.SimpleTimeSpanAssertions": {
        "System.Nullable`1<System.TimeSpan> FluentAssertions.Primitives.SimpleTimeSpanAssertions::get_Subject()": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.SimpleTimeSpanAssertions::set_Subject(System.Nullable`1<System.TimeSpan>)": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BePositive(System.String,System.Object[])": {
          "Lines": {
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "44": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeNegative(System.String,System.Object[])": {
          "Lines": {
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "64": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::Be(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "86": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::NotBe(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "103": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "108": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeLessThan(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "125": 0,
            "126": 0,
            "127": 0,
            "128": 0,
            "130": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeLessOrEqualTo(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "147": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "152": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeGreaterThan(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "169": 0,
            "170": 0,
            "171": 0,
            "172": 0,
            "174": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeGreaterOrEqualTo(System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "192": 0,
            "193": 0,
            "194": 0,
            "195": 0,
            "197": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeCloseTo(System.TimeSpan,System.Int32,System.String,System.Object[])": {
          "Lines": {
            "224": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::BeCloseTo(System.TimeSpan,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "251": 0,
            "252": 0,
            "254": 0,
            "255": 0,
            "256": 0,
            "257": 0,
            "258": 0,
            "259": 0,
            "261": 0
          },
          "Branches": [
            {
              "Line": 254,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 254,
              "Offset": 57,
              "EndOffset": 59,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 254,
              "Offset": 35,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 254,
              "Offset": 57,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 254,
              "Offset": 140,
              "EndOffset": 142,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 254,
              "Offset": 140,
              "EndOffset": 153,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::NotBeCloseTo(System.TimeSpan,System.Int32,System.String,System.Object[])": {
          "Lines": {
            "288": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.SimpleTimeSpanAssertions> FluentAssertions.Primitives.SimpleTimeSpanAssertions::NotBeCloseTo(System.TimeSpan,System.TimeSpan,System.String,System.Object[])": {
          "Lines": {
            "315": 0,
            "316": 0,
            "318": 0,
            "319": 0,
            "320": 0,
            "321": 0,
            "322": 0,
            "323": 0,
            "325": 0
          },
          "Branches": [
            {
              "Line": 318,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 318,
              "Offset": 57,
              "EndOffset": 59,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 318,
              "Offset": 57,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 318,
              "Offset": 35,
              "EndOffset": 87,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 318,
              "Offset": 146,
              "EndOffset": 148,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 318,
              "Offset": 146,
              "EndOffset": 159,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.SimpleTimeSpanAssertions::.ctor(System.Nullable`1<System.TimeSpan>)": {
          "Lines": {
            "13": 0,
            "15": 0,
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\StringAssertions.cs": {
      "FluentAssertions.Primitives.StringAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::Be(System.String,System.String,System.Object[])": {
          "Lines": {
            "39": 0,
            "40": 0,
            "42": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::BeOneOf(System.String[])": {
          "Lines": {
            "53": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::BeOneOf(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "71": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "76": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::BeEquivalentTo(System.String,System.String,System.Object[])": {
          "Lines": {
            "96": 0,
            "97": 0,
            "99": 0,
            "101": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotBe(System.String,System.String,System.Object[])": {
          "Lines": {
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "123": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::Match(System.String,System.String,System.Object[])": {
          "Lines": {
            "141": 0,
            "142": 0,
            "144": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotMatch(System.String,System.String,System.Object[])": {
          "Lines": {
            "162": 0,
            "163": 0,
            "164": 0,
            "165": 0,
            "167": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::MatchEquivalentOf(System.String,System.String,System.Object[])": {
          "Lines": {
            "186": 0,
            "187": 0,
            "188": 0,
            "189": 0,
            "190": 0,
            "192": 0,
            "194": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotMatchEquivalentOf(System.String,System.String,System.Object[])": {
          "Lines": {
            "213": 0,
            "214": 0,
            "215": 0,
            "216": 0,
            "217": 0,
            "218": 0,
            "220": 0,
            "222": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::MatchRegex(System.String,System.String,System.Object[])": {
          "Lines": {
            "240": 0,
            "242": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "248": 0,
            "249": 0,
            "251": 0,
            "254": 0,
            "255": 0,
            "256": 0,
            "258": 0,
            "259": 0,
            "260": 0,
            "262": 0,
            "263": 0,
            "264": 0,
            "265": 0,
            "266": 0,
            "268": 0
          },
          "Branches": [
            {
              "Line": 240,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 240,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotMatchRegex(System.String,System.String,System.Object[])": {
          "Lines": {
            "286": 0,
            "288": 0,
            "291": 0,
            "292": 0,
            "293": 0,
            "294": 0,
            "295": 0,
            "297": 0,
            "300": 0,
            "301": 0,
            "302": 0,
            "304": 0,
            "305": 0,
            "306": 0,
            "308": 0,
            "309": 0,
            "310": 0,
            "311": 0,
            "312": 0,
            "314": 0
          },
          "Branches": [
            {
              "Line": 286,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 286,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::StartWith(System.String,System.String,System.Object[])": {
          "Lines": {
            "331": 0,
            "333": 0,
            "336": 0,
            "338": 0,
            "341": 0,
            "342": 0,
            "344": 0
          },
          "Branches": [
            {
              "Line": 331,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 331,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 336,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 336,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotStartWith(System.String,System.String,System.Object[])": {
          "Lines": {
            "361": 0,
            "363": 0,
            "366": 0,
            "368": 0,
            "371": 0,
            "372": 0,
            "374": 0
          },
          "Branches": [
            {
              "Line": 361,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 361,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 366,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 366,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::StartWithEquivalent(System.String,System.String,System.Object[])": {
          "Lines": {
            "392": 0,
            "394": 0,
            "397": 0,
            "399": 0,
            "402": 0,
            "403": 0,
            "405": 0
          },
          "Branches": [
            {
              "Line": 392,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 392,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 397,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 397,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotStartWithEquivalentOf(System.String,System.String,System.Object[])": {
          "Lines": {
            "422": 0,
            "424": 0,
            "427": 0,
            "429": 0,
            "432": 0,
            "433": 0,
            "435": 0
          },
          "Branches": [
            {
              "Line": 422,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 422,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 427,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 427,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::EndWith(System.String,System.String,System.Object[])": {
          "Lines": {
            "452": 0,
            "454": 0,
            "457": 0,
            "459": 0,
            "462": 0,
            "464": 0,
            "465": 0,
            "466": 0,
            "469": 0,
            "471": 0,
            "472": 0,
            "473": 0,
            "476": 0,
            "477": 0,
            "478": 0,
            "479": 0,
            "481": 0
          },
          "Branches": [
            {
              "Line": 452,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 452,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 457,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 457,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 462,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 462,
              "Offset": 49,
              "EndOffset": 93,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 469,
              "Offset": 110,
              "EndOffset": 112,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 469,
              "Offset": 110,
              "EndOffset": 154,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotEndWith(System.String,System.String,System.Object[])": {
          "Lines": {
            "498": 0,
            "500": 0,
            "503": 0,
            "505": 0,
            "508": 0,
            "510": 0,
            "511": 0,
            "512": 0,
            "515": 0,
            "516": 0,
            "517": 0,
            "518": 0,
            "520": 0
          },
          "Branches": [
            {
              "Line": 498,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 498,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 503,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 503,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 508,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 508,
              "Offset": 49,
              "EndOffset": 93,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::EndWithEquivalent(System.String,System.String,System.Object[])": {
          "Lines": {
            "537": 0,
            "539": 0,
            "542": 0,
            "544": 0,
            "547": 0,
            "549": 0,
            "550": 0,
            "551": 0,
            "554": 0,
            "556": 0,
            "557": 0,
            "558": 0,
            "561": 0,
            "562": 0,
            "563": 0,
            "564": 0,
            "566": 0
          },
          "Branches": [
            {
              "Line": 537,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 537,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 542,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 542,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 547,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 547,
              "Offset": 49,
              "EndOffset": 93,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 554,
              "Offset": 110,
              "EndOffset": 112,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 554,
              "Offset": 110,
              "EndOffset": 154,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotEndWithEquivalentOf(System.String,System.String,System.Object[])": {
          "Lines": {
            "583": 0,
            "585": 0,
            "588": 0,
            "590": 0,
            "593": 0,
            "595": 0,
            "596": 0,
            "597": 0,
            "600": 0,
            "601": 0,
            "602": 0,
            "603": 0,
            "605": 0
          },
          "Branches": [
            {
              "Line": 583,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 583,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 588,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 588,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 593,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 593,
              "Offset": 49,
              "EndOffset": 93,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::Contain(System.String,System.String,System.Object[])": {
          "Lines": {
            "623": 0,
            "625": 0,
            "628": 0,
            "630": 0,
            "633": 0,
            "634": 0,
            "635": 0,
            "636": 0,
            "638": 0
          },
          "Branches": [
            {
              "Line": 623,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 623,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 628,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 628,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::ContainEquivalentOf(System.String,System.String,System.Object[])": {
          "Lines": {
            "655": 0,
            "657": 0,
            "660": 0,
            "662": 0,
            "665": 0,
            "666": 0,
            "667": 0,
            "668": 0,
            "670": 0
          },
          "Branches": [
            {
              "Line": 655,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 655,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 660,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 660,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::ContainAll(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "688": 0,
            "690": 0,
            "691": 0,
            "692": 0,
            "693": 0,
            "694": 0,
            "696": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::ContainAll(System.String[])": {
          "Lines": {
            "707": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::ContainAny(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "725": 0,
            "727": 0,
            "728": 0,
            "729": 0,
            "730": 0,
            "732": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::ContainAny(System.String[])": {
          "Lines": {
            "743": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotContain(System.String,System.String,System.Object[])": {
          "Lines": {
            "762": 0,
            "764": 0,
            "767": 0,
            "769": 0,
            "772": 0,
            "773": 0,
            "774": 0,
            "775": 0,
            "777": 0
          },
          "Branches": [
            {
              "Line": 762,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 762,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 767,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 767,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotContainAll(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "797": 0,
            "799": 0,
            "801": 0,
            "802": 0,
            "803": 0,
            "804": 0,
            "806": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotContainAll(System.String[])": {
          "Lines": {
            "818": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotContainAny(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "837": 0,
            "839": 0,
            "841": 0,
            "842": 0,
            "843": 0,
            "844": 0,
            "846": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotContainAny(System.String[])": {
          "Lines": {
            "857": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotContainEquivalentOf(System.String,System.String,System.Object[])": {
          "Lines": {
            "875": 0,
            "876": 0,
            "877": 0,
            "878": 0,
            "880": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Primitives.StringAssertions::Contains(System.String,System.String,System.StringComparison)": {
          "Lines": {
            "885": 0
          },
          "Branches": [
            {
              "Line": 885,
              "Offset": 2,
              "EndOffset": 4,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 885,
              "Offset": 2,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 885,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 885,
              "Offset": 12,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::BeEmpty(System.String,System.Object[])": {
          "Lines": {
            "900": 0,
            "901": 0,
            "902": 0,
            "903": 0,
            "905": 0
          },
          "Branches": [
            {
              "Line": 900,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 900,
              "Offset": 12,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotBeEmpty(System.String,System.Object[])": {
          "Lines": {
            "920": 0,
            "921": 0,
            "922": 0,
            "923": 0,
            "925": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::HaveLength(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "941": 0,
            "942": 0,
            "943": 0,
            "944": 0,
            "945": 0,
            "947": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotBeNullOrEmpty(System.String,System.Object[])": {
          "Lines": {
            "962": 0,
            "963": 0,
            "964": 0,
            "965": 0,
            "967": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::BeNullOrEmpty(System.String,System.Object[])": {
          "Lines": {
            "982": 0,
            "983": 0,
            "984": 0,
            "985": 0,
            "987": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::NotBeNullOrWhiteSpace(System.String,System.Object[])": {
          "Lines": {
            "1002": 0,
            "1003": 0,
            "1004": 0,
            "1005": 0,
            "1007": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Primitives.StringAssertions> FluentAssertions.Primitives.StringAssertions::BeNullOrWhiteSpace(System.String,System.Object[])": {
          "Lines": {
            "1022": 0,
            "1023": 0,
            "1024": 0,
            "1025": 0,
            "1027": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.StringAssertions::ThrowIfValuesNullOrEmpty(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "1032": 0,
            "1034": 0,
            "1037": 0,
            "1039": 0,
            "1041": 0
          },
          "Branches": [
            {
              "Line": 1032,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1032,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1037,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1037,
              "Offset": 25,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Primitives.StringAssertions::get_Identifier()": {
          "Lines": {
            "1046": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.StringAssertions::.ctor(System.String)": {
          "Lines": {
            "21": 0,
            "23": 0,
            "24": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\StringEqualityValidator.cs": {
      "FluentAssertions.Primitives.StringEqualityValidator": {
        "System.Boolean FluentAssertions.Primitives.StringEqualityValidator::ValidateAgainstSuperfluousWhitespace()": {
          "Lines": {
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0
          },
          "Branches": [
            {
              "Line": 19,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 28,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 138,
              "EndOffset": 140,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 138,
              "EndOffset": 179,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringEqualityValidator::ValidateAgainstLengthDifferences()": {
          "Lines": {
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.StringEqualityValidator::ValidateAgainstMismatch()": {
          "Lines": {
            "40": 0,
            "41": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "47": 0
          },
          "Branches": [
            {
              "Line": 41,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 26,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Primitives.StringEqualityValidator::get_ExpectationDescription()": {
          "Lines": {
            "53": 0,
            "54": 0
          },
          "Branches": [
            {
              "Line": 53,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 53,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringEqualityValidator::get_IgnoreCase()": {
          "Lines": {
            "62": 0,
            "63": 0
          },
          "Branches": [
            {
              "Line": 62,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 62,
              "Offset": 7,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.StringEqualityValidator::.ctor(System.String,System.String,System.StringComparison,System.String,System.Object[])": {
          "Lines": {
            "12": 0,
            "14": 0,
            "15": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\StringStartValidator.cs": {
      "FluentAssertions.Primitives.StringStartValidator": {
        "System.String FluentAssertions.Primitives.StringStartValidator::get_ExpectationDescription()": {
          "Lines": {
            "21": 0,
            "22": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringStartValidator::get_IgnoreCase()": {
          "Lines": {
            "30": 0,
            "31": 0
          },
          "Branches": [
            {
              "Line": 30,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 7,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringStartValidator::ValidateAgainstLengthDifferences()": {
          "Lines": {
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.StringStartValidator::ValidateAgainstMismatch()": {
          "Lines": {
            "45": 0,
            "46": 0,
            "48": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "54": 0
          },
          "Branches": [
            {
              "Line": 46,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 26,
              "EndOffset": 121,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Primitives.StringStartValidator::.ctor(System.String,System.String,System.StringComparison,System.String,System.Object[])": {
          "Lines": {
            "12": 0,
            "14": 0,
            "15": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\StringValidator.cs": {
      "FluentAssertions.Primitives.StringValidator": {
        "System.Void FluentAssertions.Primitives.StringValidator::Validate()": {
          "Lines": {
            "30": 0,
            "32": 0,
            "34": 0,
            "36": 0,
            "39": 0,
            "41": 0,
            "43": 0,
            "48": 0
          },
          "Branches": [
            {
              "Line": 30,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 6,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 36,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 50,
              "EndOffset": 52,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 50,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 75,
              "EndOffset": 77,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 83,
              "EndOffset": 85,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 14,
              "EndOffset": 91,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 22,
              "EndOffset": 91,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 75,
              "EndOffset": 91,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 83,
              "EndOffset": 91,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringValidator::ValidateAgainstNulls()": {
          "Lines": {
            "52": 0,
            "54": 0,
            "55": 0,
            "58": 0
          },
          "Branches": [
            {
              "Line": 52,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 6,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 14,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 22,
              "EndOffset": 86,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 30,
              "EndOffset": 86,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringValidator::IsLongOrMultiline(System.String)": {
          "Lines": {
            "63": 0
          },
          "Branches": [
            {
              "Line": 63,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 63,
              "Offset": 7,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringValidator::ValidateAgainstSuperfluousWhitespace()": {
          "Lines": {
            "68": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Primitives.StringValidator::ValidateAgainstLengthDifferences()": {
          "Lines": {
            "73": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.StringValidator::.ctor(System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "20": 0,
            "22": 0,
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\StringWildcardMatchingValidator.cs": {
      "FluentAssertions.Primitives.StringWildcardMatchingValidator": {
        "System.Void FluentAssertions.Primitives.StringWildcardMatchingValidator::ValidateAgainstMismatch()": {
          "Lines": {
            "17": 0,
            "19": 0,
            "22": 0,
            "24": 0,
            "26": 0
          },
          "Branches": [
            {
              "Line": 17,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 6,
              "EndOffset": 68,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 14,
              "EndOffset": 68,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 74,
              "EndOffset": 76,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 82,
              "EndOffset": 84,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 74,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 82,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringWildcardMatchingValidator::get_IsMatch()": {
          "Lines": {
            "32": 0,
            "34": 0,
            "35": 0,
            "37": 0
          },
          "Branches": [
            {
              "Line": 32,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 6,
              "EndOffset": 11,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Primitives.StringWildcardMatchingValidator::ConvertWildcardToRegEx(System.String)": {
          "Lines": {
            "43": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Primitives.StringWildcardMatchingValidator::CleanNewLines(System.String)": {
          "Lines": {
            "48": 0,
            "50": 0,
            "53": 0
          },
          "Branches": [
            {
              "Line": 48,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 1,
              "EndOffset": 5,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 53,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 53,
              "Offset": 11,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Primitives.StringWildcardMatchingValidator::get_ExpectationDescription()": {
          "Lines": {
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "66": 0
          },
          "Branches": [
            {
              "Line": 61,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 12,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 63,
              "Offset": 51,
              "EndOffset": 53,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 63,
              "Offset": 51,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Primitives.StringWildcardMatchingValidator::get_Negate()": {
          "Lines": {
            "73": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Primitives.StringWildcardMatchingValidator::get_IgnoreCase()": {
          "Lines": {
            "78": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Primitives.StringWildcardMatchingValidator::get_IgnoreNewLineDifferences()": {
          "Lines": {
            "83": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.StringWildcardMatchingValidator::.ctor(System.String,System.String,System.String,System.Object[])": {
          "Lines": {
            "11": 0,
            "13": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Primitives\\TimeSpanPredicate.cs": {
      "FluentAssertions.Primitives.TimeSpanPredicate": {
        "System.String FluentAssertions.Primitives.TimeSpanPredicate::get_DisplayText()": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Primitives.TimeSpanPredicate::IsMatchedBy(System.TimeSpan,System.TimeSpan)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Primitives.TimeSpanPredicate::.ctor(System.Func`3<System.TimeSpan,System.TimeSpan,System.Boolean>,System.String)": {
          "Lines": {
            "13": 0,
            "15": 0,
            "16": 0,
            "17": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Numeric\\ComparableTypeAssertions.cs": {
      "FluentAssertions.Numeric.ComparableTypeAssertions`1": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::Be(T,System.String,System.Object[])": {
          "Lines": {
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 17,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Numeric.ComparableTypeAssertions`1::BeEquivalentTo(TExpectation,System.String,System.Object[])": {
          "Lines": {
            "65": 0,
            "66": 0
          },
          "Branches": [
            {
              "Line": 65,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Numeric.ComparableTypeAssertions`1::BeEquivalentTo(TExpectation,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>>,System.String,System.Object[])": {
          "Lines": {
            "94": 0,
            "96": 0,
            "97": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "106": 0,
            "107": 0,
            "108": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::NotBe(T,System.String,System.Object[])": {
          "Lines": {
            "125": 0,
            "126": 0,
            "127": 0,
            "128": 0,
            "130": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::BeLessThan(T,System.String,System.Object[])": {
          "Lines": {
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "153": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::BeLessOrEqualTo(T,System.String,System.Object[])": {
          "Lines": {
            "171": 0,
            "172": 0,
            "173": 0,
            "174": 0,
            "176": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::BeGreaterThan(T,System.String,System.Object[])": {
          "Lines": {
            "194": 0,
            "195": 0,
            "196": 0,
            "197": 0,
            "199": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::BeGreaterOrEqualTo(T,System.String,System.Object[])": {
          "Lines": {
            "217": 0,
            "218": 0,
            "219": 0,
            "220": 0,
            "222": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::BeInRange(T,T,System.String,System.Object[])": {
          "Lines": {
            "247": 0,
            "248": 0,
            "249": 0,
            "250": 0,
            "251": 0,
            "253": 0
          },
          "Branches": [
            {
              "Line": 247,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 247,
              "Offset": 18,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.ComparableTypeAssertions`1<T>> FluentAssertions.Numeric.ComparableTypeAssertions`1::NotBeInRange(T,T,System.String,System.Object[])": {
          "Lines": {
            "278": 0,
            "279": 0,
            "280": 0,
            "281": 0,
            "282": 0,
            "284": 0
          },
          "Branches": [
            {
              "Line": 278,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 278,
              "Offset": 18,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Numeric.ComparableTypeAssertions`1::get_Identifier()": {
          "Lines": {
            "290": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Numeric.ComparableTypeAssertions`1::.ctor(System.IComparable`1<T>)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Numeric\\NullableNumericAssertions.cs": {
      "FluentAssertions.Numeric.NullableNumericAssertions`1": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<T>> FluentAssertions.Numeric.NullableNumericAssertions`1::HaveValue(System.String,System.Object[])": {
          "Lines": {
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "32": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<T>> FluentAssertions.Numeric.NullableNumericAssertions`1::NotBeNull(System.String,System.Object[])": {
          "Lines": {
            "47": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<T>> FluentAssertions.Numeric.NullableNumericAssertions`1::NotHaveValue(System.String,System.Object[])": {
          "Lines": {
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "67": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NullableNumericAssertions`1<T>> FluentAssertions.Numeric.NullableNumericAssertions`1::BeNull(System.String,System.Object[])": {
          "Lines": {
            "82": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Numeric.NullableNumericAssertions`1::.ctor(System.Nullable`1<T>)": {
          "Lines": {
            "11": 0,
            "13": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Numeric\\NumericAssertions.cs": {
      "FluentAssertions.Numeric.NumericAssertions`1": {
        "System.IComparable FluentAssertions.Numeric.NumericAssertions`1::get_Subject()": {
          "Lines": {
            "30": 20
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::Be(T,System.String,System.Object[])": {
          "Lines": {
            "45": 4,
            "46": 4,
            "47": 4,
            "48": 4,
            "50": 4
          },
          "Branches": [
            {
              "Line": 45,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 4
            },
            {
              "Line": 45,
              "Offset": 11,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::Be(System.Nullable`1<T>,System.String,System.Object[])": {
          "Lines": {
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "71": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 11,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 28,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 20,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::NotBe(T,System.String,System.Object[])": {
          "Lines": {
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "92": 0
          },
          "Branches": [
            {
              "Line": 87,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 11,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::NotBe(System.Nullable`1<T>,System.String,System.Object[])": {
          "Lines": {
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "113": 0
          },
          "Branches": [
            {
              "Line": 108,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 29,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 21,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BePositive(System.String,System.Object[])": {
          "Lines": {
            "128": 0,
            "129": 0,
            "130": 0,
            "131": 0,
            "133": 0
          },
          "Branches": [
            {
              "Line": 128,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 128,
              "Offset": 11,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeNegative(System.String,System.Object[])": {
          "Lines": {
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "153": 0
          },
          "Branches": [
            {
              "Line": 148,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 148,
              "Offset": 11,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeLessThan(T,System.String,System.Object[])": {
          "Lines": {
            "169": 0,
            "170": 0,
            "171": 0,
            "172": 0,
            "174": 0
          },
          "Branches": [
            {
              "Line": 169,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 169,
              "Offset": 11,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeLessOrEqualTo(T,System.String,System.Object[])": {
          "Lines": {
            "191": 0,
            "192": 0,
            "193": 0,
            "194": 0,
            "196": 0
          },
          "Branches": [
            {
              "Line": 191,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 191,
              "Offset": 11,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeGreaterThan(T,System.String,System.Object[])": {
          "Lines": {
            "213": 0,
            "214": 0,
            "215": 0,
            "216": 0,
            "218": 0
          },
          "Branches": [
            {
              "Line": 213,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 11,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeGreaterOrEqualTo(T,System.String,System.Object[])": {
          "Lines": {
            "235": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "240": 0
          },
          "Branches": [
            {
              "Line": 235,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 235,
              "Offset": 11,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeInRange(T,T,System.String,System.Object[])": {
          "Lines": {
            "265": 0,
            "266": 0,
            "267": 0,
            "268": 0,
            "269": 0,
            "271": 0
          },
          "Branches": [
            {
              "Line": 265,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 265,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 265,
              "Offset": 11,
              "EndOffset": 58,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 265,
              "Offset": 31,
              "EndOffset": 58,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::NotBeInRange(T,T,System.String,System.Object[])": {
          "Lines": {
            "296": 0,
            "297": 0,
            "298": 0,
            "299": 0,
            "300": 0,
            "302": 0
          },
          "Branches": [
            {
              "Line": 296,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 296,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 296,
              "Offset": 31,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 296,
              "Offset": 11,
              "EndOffset": 58,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeOneOf(T[])": {
          "Lines": {
            "313": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeOneOf(System.Collections.Generic.IEnumerable`1<T>,System.String,System.Object[])": {
          "Lines": {
            "332": 0,
            "333": 0,
            "334": 0,
            "335": 0,
            "337": 0
          },
          "Branches": [
            {
              "Line": 332,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 332,
              "Offset": 11,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::BeOfType(System.Type,System.String,System.Object[])": {
          "Lines": {
            "355": 0,
            "356": 0,
            "358": 0,
            "359": 0,
            "362": 0,
            "365": 0
          },
          "Branches": [
            {
              "Line": 356,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 356,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 356,
              "Offset": 23,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 356,
              "Offset": 36,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Numeric.NumericAssertions`1<T>> FluentAssertions.Numeric.NumericAssertions`1::NotBeOfType(System.Type,System.String,System.Object[])": {
          "Lines": {
            "383": 0,
            "385": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Numeric.NumericAssertions`1::.ctor(System.Object)": {
          "Lines": {
            "18": 4,
            "20": 4,
            "22": 4,
            "23": 4,
            "25": 0,
            "28": 4
          },
          "Branches": [
            {
              "Line": 20,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 4
            },
            {
              "Line": 23,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 7,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 4
            },
            {
              "Line": 23,
              "Offset": 27,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 4
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\AggregateExceptionValueFormatter.cs": {
      "FluentAssertions.Formatting.AggregateExceptionValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.AggregateExceptionValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.AggregateExceptionValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "39": 0,
            "40": 0,
            "42": 0,
            "46": 0,
            "48": 0,
            "50": 0,
            "52": 0,
            "53": 0,
            "56": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 19,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 136,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 136,
              "EndOffset": 138,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\AttributeBasedFormatter.cs": {
      "FluentAssertions.Formatting.AttributeBasedFormatter": {
        "System.Boolean FluentAssertions.Formatting.AttributeBasedFormatter::CanHandle(System.Object)": {
          "Lines": {
            "29": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 5,
              "EndOffset": 7,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 5,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 8,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Formatting.AttributeBasedFormatter::get_IsScanningEnabled()": {
          "Lines": {
            "34": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.AttributeBasedFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "40": 0,
            "42": 0,
            "44": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo FluentAssertions.Formatting.AttributeBasedFormatter::GetFormatter(System.Object)": {
          "Lines": {
            "49": 0,
            "50": 0,
            "52": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Formatting.AttributeBasedFormatter::get_Formatters()": {
          "Lines": {
            "59": 0,
            "61": 0
          },
          "Branches": [
            {
              "Line": 61,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 13,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.AttributeBasedFormatter::HandleValueFormatterDetectionModeChanges()": {
          "Lines": {
            "67": 0,
            "69": 0,
            "70": 0,
            "72": 0
          },
          "Branches": [
            {
              "Line": 67,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 16,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MethodInfo[] FluentAssertions.Formatting.AttributeBasedFormatter::FindCustomFormatters()": {
          "Lines": {
            "76": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "85": 0
          },
          "Branches": [
            {
              "Line": 76,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 28,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 64,
              "EndOffset": 89,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 95,
              "EndOffset": 97,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 95,
              "EndOffset": 120,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 131,
              "EndOffset": 133,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 131,
              "EndOffset": 156,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 167,
              "EndOffset": 169,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 167,
              "EndOffset": 192,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 203,
              "EndOffset": 205,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 203,
              "EndOffset": 228,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 239,
              "EndOffset": 241,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 239,
              "EndOffset": 264,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Formatting.AttributeBasedFormatter::Applicable(System.Reflection.Assembly)": {
          "Lines": {
            "90": 0,
            "91": 0,
            "93": 0,
            "94": 0,
            "95": 0
          },
          "Branches": [
            {
              "Line": 93,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 19,
              "EndOffset": 58,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 15,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\ByteValueFormatter.cs": {
      "FluentAssertions.Formatting.ByteValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.ByteValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.ByteValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "37": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\DateTimeOffsetValueFormatter.cs": {
      "FluentAssertions.Formatting.DateTimeOffsetValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.DateTimeOffsetValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "21": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 6,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.DateTimeOffsetValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "29": 0,
            "31": 0,
            "32": 0,
            "35": 0,
            "38": 0,
            "40": 0,
            "42": 0,
            "45": 0,
            "47": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "57": 0,
            "58": 0,
            "61": 0,
            "65": 0,
            "67": 0,
            "70": 0,
            "72": 0,
            "75": 0,
            "77": 0,
            "79": 0,
            "80": 0,
            "83": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 8,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 45,
              "EndOffset": 70,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 76,
              "EndOffset": 78,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 84,
              "EndOffset": 86,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 84,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 51,
              "Offset": 117,
              "EndOffset": 119,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 51,
              "Offset": 117,
              "EndOffset": 144,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 150,
              "EndOffset": 152,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 150,
              "EndOffset": 177,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 76,
              "EndOffset": 200,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 217,
              "EndOffset": 219,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 217,
              "EndOffset": 258,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 275,
              "EndOffset": 277,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 275,
              "EndOffset": 306,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 312,
              "EndOffset": 314,
              "Path": 0,
              "Ordinal": 16,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 320,
              "EndOffset": 322,
              "Path": 0,
              "Ordinal": 18,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 320,
              "EndOffset": 357,
              "Path": 1,
              "Ordinal": 19,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 312,
              "EndOffset": 368,
              "Path": 1,
              "Ordinal": 17,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Formatting.DateTimeOffsetValueFormatter::HasTime(System.DateTimeOffset)": {
          "Lines": {
            "92": 0,
            "93": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "97": 0
          },
          "Branches": [
            {
              "Line": 92,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 7,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 16,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 25,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 33,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 41,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Formatting.DateTimeOffsetValueFormatter::HasDate(System.DateTimeOffset)": {
          "Lines": {
            "102": 0
          },
          "Branches": [
            {
              "Line": 102,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 8,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 18,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Formatting.DateTimeOffsetValueFormatter::HasMilliSeconds(System.DateTimeOffset)": {
          "Lines": {
            "107": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Formatting.DateTimeOffsetValueFormatter::HasMicroSeconds(System.DateTimeOffset)": {
          "Lines": {
            "112": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Formatting.DateTimeOffsetValueFormatter::HasNanoSeconds(System.DateTimeOffset)": {
          "Lines": {
            "117": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\DecimalValueFormatter.cs": {
      "FluentAssertions.Formatting.DecimalValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.DecimalValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.DecimalValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\DefaultValueFormatter.cs": {
      "FluentAssertions.Formatting.DefaultValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.DefaultValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "29": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.DefaultValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "35": 0,
            "37": 0,
            "40": 0,
            "42": 0,
            "46": 0,
            "50": 0
          },
          "Branches": [
            {
              "Line": 35,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 21,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 51,
              "EndOffset": 53,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 51,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 72,
              "EndOffset": 74,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 72,
              "EndOffset": 89,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Formatting.DefaultValueFormatter::HasDefaultToStringImplementation(System.Object)": {
          "Lines": {
            "55": 0,
            "57": 0
          },
          "Branches": [
            {
              "Line": 57,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 8,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.DefaultValueFormatter::GetTypeAndPublicPropertyValues(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "62": 0,
            "64": 0,
            "66": 0,
            "67": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "74": 0,
            "75": 0,
            "77": 0,
            "78": 0,
            "81": 0,
            "83": 0
          },
          "Branches": [
            {
              "Line": 64,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 64,
              "Offset": 12,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 90,
              "EndOffset": 92,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 90,
              "EndOffset": 115,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 161,
              "EndOffset": 128,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 161,
              "EndOffset": 163,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.DefaultValueFormatter::GetPropertyValueTextFor(System.Object,FluentAssertions.Equivalency.SelectedMemberInfo,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "92": 0,
            "93": 0,
            "94": 0,
            "96": 0,
            "97": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.DefaultValueFormatter::CreateWhitespaceForLevel(System.Int32)": {
          "Lines": {
            "107": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\DoubleValueFormatter.cs": {
      "FluentAssertions.Formatting.DoubleValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.DoubleValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.DoubleValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "24": 0,
            "26": 0,
            "28": 0,
            "31": 0,
            "33": 0,
            "36": 0,
            "38": 0,
            "41": 0,
            "43": 0,
            "44": 0,
            "45": 0
          },
          "Branches": [
            {
              "Line": 26,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 13,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 47,
              "EndOffset": 49,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 47,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 81,
              "EndOffset": 83,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 81,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 123,
              "EndOffset": 125,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 123,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 134,
              "EndOffset": 136,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 134,
              "EndOffset": 138,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\EnumerableValueFormatter.cs": {
      "FluentAssertions.Formatting.EnumerableValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.EnumerableValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.EnumerableValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "25": 0,
            "27": 0,
            "29": 0,
            "32": 0,
            "34": 0,
            "35": 0,
            "38": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 27,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 47,
              "EndOffset": 49,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 47,
              "EndOffset": 88,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 27,
              "Offset": 31,
              "EndOffset": 133,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\ExceptionValueFormatter.cs": {
      "FluentAssertions.Formatting.ExceptionValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.ExceptionValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.ExceptionValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "24": 0,
            "26": 0,
            "27": 0,
            "29": 0,
            "31": 0,
            "33": 0,
            "37": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 48,
              "EndOffset": 50,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 113,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 48,
              "EndOffset": 115,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 113,
              "EndOffset": 115,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\ExpressionValueFormatter.cs": {
      "FluentAssertions.Formatting.ExpressionValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.ExpressionValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.ExpressionValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\Formatter.cs": {
      "FluentAssertions.Formatting.Formatter": {
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Formatting.IValueFormatter> FluentAssertions.Formatting.Formatter::get_Formatters()": {
          "Lines": {
            "63": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.Formatter::ToString(System.Object,System.Boolean)": {
          "Lines": {
            "79": 0,
            "81": 0,
            "82": 0,
            "85": 0,
            "87": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "93": 0,
            "95": 0,
            "99": 0,
            "100": 0,
            "101": 0
          },
          "Branches": [
            {
              "Line": 79,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 79,
              "Offset": 31,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.Formatter::FormatChild(System.String,System.Object,System.Boolean,FluentAssertions.Formatting.Formatter/ObjectGraph)": {
          "Lines": {
            "107": 0,
            "109": 0,
            "112": 0,
            "114": 0,
            "116": 0,
            "118": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "126": 0,
            "128": 0,
            "133": 0,
            "134": 0,
            "135": 0
          },
          "Branches": [
            {
              "Line": 107,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 26,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 57,
              "EndOffset": 59,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 57,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 116,
              "Offset": 90,
              "EndOffset": 92,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 116,
              "Offset": 90,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.Formatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "139": 0,
            "140": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Formatting.Formatter::RemoveFormatter(FluentAssertions.Formatting.IValueFormatter)": {
          "Lines": {
            "148": 0,
            "150": 0,
            "152": 0
          },
          "Branches": [
            {
              "Line": 148,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 148,
              "Offset": 11,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.Formatter::AddFormatter(FluentAssertions.Formatting.IValueFormatter)": {
          "Lines": {
            "159": 0,
            "161": 0,
            "163": 0
          },
          "Branches": [
            {
              "Line": 159,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 159,
              "Offset": 11,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.Formatter::.cctor()": {
          "Lines": {
            "16": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Formatting.Formatter/ObjectGraph": {
        "System.Boolean FluentAssertions.Formatting.Formatter/ObjectGraph::TryPush(System.String,System.Object)": {
          "Lines": {
            "186": 0,
            "188": 0,
            "189": 0,
            "190": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.Formatter/ObjectGraph::GetFullPath()": {
          "Lines": {
            "193": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Formatting.Formatter/ObjectGraph::Pop()": {
          "Lines": {
            "197": 0,
            "198": 0
          },
          "Branches": []
        },
        "System.Int32 FluentAssertions.Formatting.Formatter/ObjectGraph::get_Depth()": {
          "Lines": {
            "200": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.Formatter/ObjectGraph::ToString()": {
          "Lines": {
            "204": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Formatting.Formatter/ObjectGraph::.ctor(System.Object)": {
          "Lines": {
            "177": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\GuidValueFormatter.cs": {
      "FluentAssertions.Formatting.GuidValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.GuidValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.GuidValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\Int16ValueFormatter.cs": {
      "FluentAssertions.Formatting.Int16ValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.Int16ValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.Int16ValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\Int32ValueFormatter.cs": {
      "FluentAssertions.Formatting.Int32ValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.Int32ValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.Int32ValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\Int64ValueFormatter.cs": {
      "FluentAssertions.Formatting.Int64ValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.Int64ValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.Int64ValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\IValueFormatter.cs": {
      "FluentAssertions.Formatting.FormattingContext": {
        "System.Int32 FluentAssertions.Formatting.FormattingContext::get_Depth()": {
          "Lines": {
            "42": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Formatting.FormattingContext::get_UseLineBreaks()": {
          "Lines": {
            "44": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\NullValueFormatter.cs": {
      "FluentAssertions.Formatting.NullValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.NullValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "16": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.NullValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\PropertyInfoFormatter.cs": {
      "FluentAssertions.Formatting.PropertyInfoFormatter": {
        "System.Boolean FluentAssertions.Formatting.PropertyInfoFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.PropertyInfoFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\SByteValueFormatter.cs": {
      "FluentAssertions.Formatting.SByteValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.SByteValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.SByteValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\SingleValueFormatter.cs": {
      "FluentAssertions.Formatting.SingleValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.SingleValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.SingleValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0,
            "25": 0,
            "27": 0,
            "30": 0,
            "32": 0,
            "35": 0,
            "37": 0,
            "40": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 13,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 47,
              "EndOffset": 49,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 47,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 81,
              "EndOffset": 83,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 81,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\StringValueFormatter.cs": {
      "FluentAssertions.Formatting.StringValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.StringValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.StringValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "24": 0,
            "25": 0,
            "27": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\TaskFormatter.cs": {
      "FluentAssertions.Formatting.TaskFormatter": {
        "System.Boolean FluentAssertions.Formatting.TaskFormatter::CanHandle(System.Object)": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.TaskFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "18": 0,
            "20": 0,
            "24": 0
          },
          "Branches": [
            {
              "Line": 18,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 18,
              "Offset": 8,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\TimeSpanValueFormatter.cs": {
      "FluentAssertions.Formatting.TimeSpanValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.TimeSpanValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.TimeSpanValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "25": 0,
            "27": 0,
            "29": 0,
            "32": 0,
            "34": 0,
            "37": 0,
            "39": 0,
            "41": 0,
            "44": 0,
            "46": 0,
            "48": 0,
            "52": 0
          },
          "Branches": [
            {
              "Line": 27,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 27,
              "Offset": 18,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 37,
              "EndOffset": 39,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 37,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 58,
              "EndOffset": 60,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 58,
              "EndOffset": 66,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 75,
              "EndOffset": 77,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 75,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 97,
              "EndOffset": 99,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 97,
              "EndOffset": 112,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.List`1<System.String> FluentAssertions.Formatting.TimeSpanValueFormatter::GetNonZeroFragments(System.TimeSpan)": {
          "Lines": {
            "58": 0,
            "60": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "68": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Formatting.TimeSpanValueFormatter::AddMicrosecondsIfNotZero(System.TimeSpan,System.Collections.Generic.List`1<System.String>)": {
          "Lines": {
            "73": 0,
            "74": 0,
            "76": 0,
            "77": 0,
            "79": 0
          },
          "Branches": [
            {
              "Line": 74,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 74,
              "Offset": 18,
              "EndOffset": 76,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.TimeSpanValueFormatter::AddSecondsIfNotZero(System.TimeSpan,System.Collections.Generic.List`1<System.String>)": {
          "Lines": {
            "83": 0,
            "85": 0,
            "87": 0,
            "89": 0,
            "92": 0,
            "94": 0
          },
          "Branches": [
            {
              "Line": 83,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 8,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 49,
              "EndOffset": 88,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 18,
              "EndOffset": 105,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.TimeSpanValueFormatter::AddMinutesIfNotZero(System.TimeSpan,System.Collections.Generic.List`1<System.String>)": {
          "Lines": {
            "98": 0,
            "100": 0,
            "102": 0
          },
          "Branches": [
            {
              "Line": 98,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 98,
              "Offset": 8,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.TimeSpanValueFormatter::AddHoursIfNotZero(System.TimeSpan,System.Collections.Generic.List`1<System.String>)": {
          "Lines": {
            "106": 0,
            "108": 0,
            "110": 0
          },
          "Branches": [
            {
              "Line": 106,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 8,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Formatting.TimeSpanValueFormatter::AddDaysIfNotZero(System.TimeSpan,System.Collections.Generic.List`1<System.String>)": {
          "Lines": {
            "114": 0,
            "116": 0,
            "118": 0
          },
          "Branches": [
            {
              "Line": 114,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 114,
              "Offset": 8,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.TimeSpanValueFormatter::JoinUsingWritingStyle(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "122": 0
          },
          "Branches": []
        },
        "System.String[] FluentAssertions.Formatting.TimeSpanValueFormatter::AllButLastFragment(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "127": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\UInt16ValueFormatter.cs": {
      "FluentAssertions.Formatting.UInt16ValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.UInt16ValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.UInt16ValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\UInt32ValueFormatter.cs": {
      "FluentAssertions.Formatting.UInt32ValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.UInt32ValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.UInt32ValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\UInt64ValueFormatter.cs": {
      "FluentAssertions.Formatting.UInt64ValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.UInt64ValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.UInt64ValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\XAttributeValueFormatter.cs": {
      "FluentAssertions.Formatting.XAttributeValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.XAttributeValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.XAttributeValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "23": 0,
            "24": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\XDocumentValueFormatter.cs": {
      "FluentAssertions.Formatting.XDocumentValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.XDocumentValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "10": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.XDocumentValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "16": 0,
            "18": 0,
            "19": 0,
            "20": 0
          },
          "Branches": [
            {
              "Line": 18,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 18,
              "Offset": 13,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.XDocumentValueFormatter::FormatDocumentWithoutRoot()": {
          "Lines": {
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Formatting\\XElementValueFormatter.cs": {
      "FluentAssertions.Formatting.XElementValueFormatter": {
        "System.Boolean FluentAssertions.Formatting.XElementValueFormatter::CanHandle(System.Object)": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.XElementValueFormatter::Format(System.Object,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)": {
          "Lines": {
            "28": 0,
            "30": 0,
            "31": 0,
            "32": 0
          },
          "Branches": [
            {
              "Line": 30,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 13,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Formatting.XElementValueFormatter::FormatElementWithoutChildren(System.Xml.Linq.XElement)": {
          "Lines": {
            "37": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Formatting.XElementValueFormatter::FormatElementWithChildren(System.Xml.Linq.XElement)": {
          "Lines": {
            "42": 0,
            "46": 0,
            "47": 0,
            "49": 0,
            "50": 0
          },
          "Branches": []
        },
        "System.String[] FluentAssertions.Formatting.XElementValueFormatter::SplitIntoSeparateLines(System.Xml.Linq.XElement)": {
          "Lines": {
            "55": 0,
            "56": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Extensions\\FluentDateTimeExtensions.cs": {
      "FluentAssertions.Extensions.FluentDateTimeExtensions": {
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::January(System.Int32,System.Int32)": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::February(System.Int32,System.Int32)": {
          "Lines": {
            "39": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::March(System.Int32,System.Int32)": {
          "Lines": {
            "48": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::April(System.Int32,System.Int32)": {
          "Lines": {
            "57": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::May(System.Int32,System.Int32)": {
          "Lines": {
            "66": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::June(System.Int32,System.Int32)": {
          "Lines": {
            "75": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::July(System.Int32,System.Int32)": {
          "Lines": {
            "84": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::August(System.Int32,System.Int32)": {
          "Lines": {
            "93": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::September(System.Int32,System.Int32)": {
          "Lines": {
            "102": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::October(System.Int32,System.Int32)": {
          "Lines": {
            "111": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::November(System.Int32,System.Int32)": {
          "Lines": {
            "120": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::December(System.Int32,System.Int32)": {
          "Lines": {
            "129": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::At(System.DateTime,System.TimeSpan)": {
          "Lines": {
            "137": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::At(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)": {
          "Lines": {
            "146": 0,
            "148": 0,
            "151": 0,
            "153": 0,
            "156": 0,
            "158": 0,
            "160": 0,
            "163": 0,
            "165": 0,
            "168": 0
          },
          "Branches": [
            {
              "Line": 146,
              "Offset": 3,
              "EndOffset": 5,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 146,
              "Offset": 3,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 146,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 146,
              "Offset": 12,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 151,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 151,
              "Offset": 33,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 151,
              "Offset": 42,
              "EndOffset": 44,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 151,
              "Offset": 42,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 158,
              "Offset": 95,
              "EndOffset": 97,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 158,
              "Offset": 95,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 163,
              "Offset": 113,
              "EndOffset": 115,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 163,
              "Offset": 113,
              "EndOffset": 129,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "System.DateTimeOffset FluentAssertions.Extensions.FluentDateTimeExtensions::At(System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)": {
          "Lines": {
            "177": 0,
            "179": 0,
            "182": 0,
            "184": 0,
            "187": 0,
            "189": 0,
            "191": 0,
            "194": 0,
            "196": 0,
            "199": 0
          },
          "Branches": [
            {
              "Line": 177,
              "Offset": 3,
              "EndOffset": 5,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 3,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 12,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 33,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 42,
              "EndOffset": 44,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 42,
              "EndOffset": 60,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 189,
              "Offset": 102,
              "EndOffset": 104,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 189,
              "Offset": 102,
              "EndOffset": 118,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 194,
              "Offset": 120,
              "EndOffset": 122,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 194,
              "Offset": 120,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::AsUtc(System.DateTime)": {
          "Lines": {
            "208": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::AsLocal(System.DateTime)": {
          "Lines": {
            "217": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::Before(System.TimeSpan,System.DateTime)": {
          "Lines": {
            "226": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::After(System.TimeSpan,System.DateTime)": {
          "Lines": {
            "235": 0
          },
          "Branches": []
        },
        "System.Int32 FluentAssertions.Extensions.FluentDateTimeExtensions::Nanosecond(System.DateTime)": {
          "Lines": {
            "243": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::AddNanoseconds(System.DateTime,System.Int64)": {
          "Lines": {
            "251": 0,
            "253": 0,
            "256": 0
          },
          "Branches": [
            {
              "Line": 251,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 251,
              "Offset": 1,
              "EndOffset": 5,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Int32 FluentAssertions.Extensions.FluentDateTimeExtensions::Microsecond(System.DateTime)": {
          "Lines": {
            "264": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Extensions.FluentDateTimeExtensions::AddMicroseconds(System.DateTime,System.Int64)": {
          "Lines": {
            "272": 0,
            "274": 0,
            "277": 0
          },
          "Branches": [
            {
              "Line": 272,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 272,
              "Offset": 1,
              "EndOffset": 5,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Extensions\\FluentTimeSpanExtensions.cs": {
      "FluentAssertions.Extensions.FluentTimeSpanExtensions": {
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Ticks(System.Int32)": {
          "Lines": {
            "39": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Ticks(System.Int64)": {
          "Lines": {
            "47": 0
          },
          "Branches": []
        },
        "System.Int32 FluentAssertions.Extensions.FluentTimeSpanExtensions::Nanoseconds(System.TimeSpan)": {
          "Lines": {
            "55": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Nanoseconds(System.Int32)": {
          "Lines": {
            "68": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Nanoseconds(System.Int64)": {
          "Lines": {
            "81": 0
          },
          "Branches": []
        },
        "System.Double FluentAssertions.Extensions.FluentTimeSpanExtensions::TotalNanoseconds(System.TimeSpan)": {
          "Lines": {
            "89": 0
          },
          "Branches": []
        },
        "System.Int32 FluentAssertions.Extensions.FluentTimeSpanExtensions::Microseconds(System.TimeSpan)": {
          "Lines": {
            "97": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Microseconds(System.Int32)": {
          "Lines": {
            "105": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Microseconds(System.Int64)": {
          "Lines": {
            "113": 0
          },
          "Branches": []
        },
        "System.Double FluentAssertions.Extensions.FluentTimeSpanExtensions::TotalMicroseconds(System.TimeSpan)": {
          "Lines": {
            "121": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Milliseconds(System.Int32)": {
          "Lines": {
            "129": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Milliseconds(System.Double)": {
          "Lines": {
            "137": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Seconds(System.Int32)": {
          "Lines": {
            "145": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Seconds(System.Double)": {
          "Lines": {
            "153": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Seconds(System.Int32,System.TimeSpan)": {
          "Lines": {
            "162": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Minutes(System.Int32)": {
          "Lines": {
            "170": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Minutes(System.Double)": {
          "Lines": {
            "178": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Minutes(System.Int32,System.TimeSpan)": {
          "Lines": {
            "187": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Hours(System.Int32)": {
          "Lines": {
            "195": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Hours(System.Double)": {
          "Lines": {
            "203": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Hours(System.Int32,System.TimeSpan)": {
          "Lines": {
            "212": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Days(System.Int32)": {
          "Lines": {
            "220": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Days(System.Double)": {
          "Lines": {
            "228": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::Days(System.Int32,System.TimeSpan)": {
          "Lines": {
            "237": 0
          },
          "Branches": []
        },
        "System.TimeSpan FluentAssertions.Extensions.FluentTimeSpanExtensions::And(System.TimeSpan,System.TimeSpan)": {
          "Lines": {
            "248": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\AssertionFailedException.cs": {
      "FluentAssertions.Execution.AssertionFailedException": {
        "System.Void FluentAssertions.Execution.AssertionFailedException::.ctor(System.String)": {
          "Lines": {
            "19": 0,
            "21": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionFailedException::.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)": {
          "Lines": {
            "25": 0,
            "27": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\AssertionScope.cs": {
      "FluentAssertions.Execution.AssertionScope": {
        "System.String FluentAssertions.Execution.AssertionScope::get_Context()": {
          "Lines": {
            "70": 24
          },
          "Branches": []
        },
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.AssertionScope::get_Current()": {
          "Lines": {
            "92": 17
          },
          "Branches": [
            {
              "Line": 92,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 17
            },
            {
              "Line": 92,
              "Offset": 6,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 17
            }
          ]
        },
        "System.Void FluentAssertions.Execution.AssertionScope::set_Current(FluentAssertions.Execution.AssertionScope)": {
          "Lines": {
            "93": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.AssertionScope::get_UsingLineBreaks()": {
          "Lines": {
            "103": 0,
            "104": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Execution.AssertionScope::get_Succeeded()": {
          "Lines": {
            "111": 116
          },
          "Branches": []
        },
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.AssertionScope::BecauseOf(System.String,System.Object[])": {
          "Lines": {
            "128": 29,
            "129": 29,
            "130": 29,
            "131": 29,
            "132": 29,
            "133": 29,
            "134": 29,
            "135": 29,
            "136": 29,
            "137": 29,
            "138": 29,
            "139": 29,
            "140": 29
          },
          "Branches": []
        },
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.AssertionScope::WithExpectation(System.String,System.Object[])": {
          "Lines": {
            "161": 12,
            "162": 12,
            "163": 12,
            "164": 12,
            "165": 12,
            "166": 12,
            "167": 12,
            "168": 12,
            "169": 12,
            "171": 12
          },
          "Branches": []
        },
        "FluentAssertions.Execution.GivenSelector`1<T> FluentAssertions.Execution.AssertionScope::Given(System.Func`1<T>)": {
          "Lines": {
            "182": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.AssertionScope::ForCondition(System.Boolean)": {
          "Lines": {
            "193": 29,
            "195": 29,
            "198": 29
          },
          "Branches": [
            {
              "Line": 193,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 29
            },
            {
              "Line": 193,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 29
            }
          ]
        },
        "FluentAssertions.Execution.Continuation FluentAssertions.Execution.AssertionScope::FailWith(System.String,System.Object[])": {
          "Lines": {
            "224": 29,
            "226": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "231": 0,
            "233": 0,
            "236": 0,
            "239": 29,
            "243": 29,
            "244": 29,
            "245": 29
          },
          "Branches": [
            {
              "Line": 224,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 29
            },
            {
              "Line": 224,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 226,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 226,
              "Offset": 22,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 231,
              "Offset": 89,
              "EndOffset": 91,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 231,
              "Offset": 89,
              "EndOffset": 109,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 224,
              "Offset": 6,
              "EndOffset": 126,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 29
            },
            {
              "Line": 224,
              "Offset": 14,
              "EndOffset": 126,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 29
            }
          ]
        },
        "System.String FluentAssertions.Execution.AssertionScope::GetIdentifier()": {
          "Lines": {
            "249": 0,
            "251": 0,
            "254": 0
          },
          "Branches": [
            {
              "Line": 249,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 249,
              "Offset": 11,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.AssertionScope::AddPreFormattedFailure(System.String)": {
          "Lines": {
            "262": 0,
            "263": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionScope::AddNonReportable(System.String,System.Object)": {
          "Lines": {
            "267": 0,
            "268": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionScope::AddReportable(System.String,System.String)": {
          "Lines": {
            "276": 0,
            "277": 0
          },
          "Branches": []
        },
        "System.String[] FluentAssertions.Execution.AssertionScope::Discard()": {
          "Lines": {
            "284": 0
          },
          "Branches": []
        },
        "T FluentAssertions.Execution.AssertionScope::Get(System.String)": {
          "Lines": {
            "292": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionScope::Dispose()": {
          "Lines": {
            "300": 0,
            "302": 0,
            "304": 0,
            "306": 0,
            "309": 0,
            "310": 0,
            "313": 0,
            "315": 0
          },
          "Branches": [
            {
              "Line": 302,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 304,
              "Offset": 68,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 304,
              "Offset": 68,
              "EndOffset": 70,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 302,
              "Offset": 17,
              "EndOffset": 90,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.AssertionScope::WithDefaultIdentifier(System.String)": {
          "Lines": {
            "319": 0,
            "320": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionScope::.ctor(FluentAssertions.Execution.IAssertionStrategy)": {
          "Lines": {
            "19": 29,
            "29": 29,
            "30": 29,
            "34": 17,
            "36": 17,
            "37": 17,
            "38": 17
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionScope::.ctor()": {
          "Lines": {
            "45": 0,
            "47": 0,
            "48": 0,
            "50": 0,
            "52": 0,
            "53": 0,
            "55": 0
          },
          "Branches": [
            {
              "Line": 50,
              "Offset": 34,
              "EndOffset": 36,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 34,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.AssertionScope::.ctor(System.String)": {
          "Lines": {
            "61": 0,
            "63": 0,
            "64": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.AssertionScope::.ctor(FluentAssertions.Execution.AssertionScope,System.Boolean)": {
          "Lines": {
            "75": 12,
            "77": 12,
            "78": 12,
            "79": 12,
            "80": 12,
            "81": 12,
            "82": 12,
            "83": 12,
            "84": 12,
            "85": 12
          },
          "Branches": []
        }
      },
      "FluentAssertions.Execution.AssertionScope/<>c__DisplayClass26_0": {
        "System.String FluentAssertions.Execution.AssertionScope/<>c__DisplayClass26_0::<BecauseOf>b__0()": {
          "Lines": {},
          "Branches": [
            {
              "Line": 132,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 7,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 23,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 34,
              "EndOffset": 36,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 34,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Execution.AssertionScope/<>c__DisplayClass27_0": {
        "System.String FluentAssertions.Execution.AssertionScope/<>c__DisplayClass27_0::<WithExpectation>b__0()": {
          "Lines": {},
          "Branches": [
            {
              "Line": 165,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 165,
              "Offset": 22,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\CollectingAssertionStrategy.cs": {
      "FluentAssertions.Execution.CollectingAssertionStrategy": {
        "System.Collections.Generic.IEnumerable`1<System.String> FluentAssertions.Execution.CollectingAssertionStrategy::get_FailureMessages()": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.String> FluentAssertions.Execution.CollectingAssertionStrategy::DiscardFailures()": {
          "Lines": {
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.CollectingAssertionStrategy::ThrowIfAny(System.Collections.Generic.IDictionary`2<System.String,System.Object>)": {
          "Lines": {
            "34": 0,
            "36": 0,
            "37": 0,
            "39": 0,
            "41": 0,
            "43": 0,
            "47": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 34,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 48,
              "EndOffset": 50,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 98,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 48,
              "EndOffset": 112,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 11,
              "EndOffset": 128,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.CollectingAssertionStrategy::HandleFailure(System.String)": {
          "Lines": {
            "56": 0,
            "57": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.CollectingAssertionStrategy::.ctor()": {
          "Lines": {
            "12": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\ContextDataItems.cs": {
      "FluentAssertions.Execution.ContextDataItems": {
        "System.Collections.Generic.IDictionary`2<System.String,System.Object> FluentAssertions.Execution.ContextDataItems::GetReportable()": {
          "Lines": {
            "17": 0
          },
          "Branches": [
            {
              "Line": 17,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 48,
              "EndOffset": 50,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 48,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 79,
              "EndOffset": 81,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 79,
              "EndOffset": 104,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Execution.ContextDataItems::AsStringOrDefault(System.String)": {
          "Lines": {
            "22": 0,
            "23": 0,
            "25": 0,
            "27": 0,
            "30": 0,
            "33": 0
          },
          "Branches": [
            {
              "Line": 23,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 56,
              "EndOffset": 76,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 74,
              "EndOffset": 76,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 74,
              "EndOffset": 89,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 38,
              "EndOffset": 101,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.ContextDataItems::Add(FluentAssertions.Execution.ContextDataItems)": {
          "Lines": {
            "38": 0,
            "40": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 38,
              "Offset": 41,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.ContextDataItems::Add(System.String,System.Object,FluentAssertions.Execution.Reportability)": {
          "Lines": {
            "46": 0,
            "47": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.ContextDataItems::Add(FluentAssertions.Execution.ContextDataItems/DataItem)": {
          "Lines": {
            "51": 0,
            "52": 0,
            "54": 0,
            "57": 0,
            "58": 0
          },
          "Branches": [
            {
              "Line": 52,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 38,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "T FluentAssertions.Execution.ContextDataItems::Get(System.String)": {
          "Lines": {
            "62": 0,
            "63": 0
          },
          "Branches": [
            {
              "Line": 63,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 63,
              "Offset": 38,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.ContextDataItems::.ctor()": {
          "Lines": {
            "13": 29
          },
          "Branches": []
        }
      },
      "FluentAssertions.Execution.ContextDataItems/DataItem": {
        "System.String FluentAssertions.Execution.ContextDataItems/DataItem::get_Key()": {
          "Lines": {
            "77": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.Execution.ContextDataItems/DataItem::get_Value()": {
          "Lines": {
            "79": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Execution.ContextDataItems/DataItem::get_Reportable()": {
          "Lines": {
            "81": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.ContextDataItems/DataItem FluentAssertions.Execution.ContextDataItems/DataItem::Clone()": {
          "Lines": {
            "85": 0,
            "86": 0
          },
          "Branches": [
            {
              "Line": 85,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 13,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.ContextDataItems/DataItem::.ctor(System.String,System.Object,FluentAssertions.Execution.Reportability)": {
          "Lines": {
            "70": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "75": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\Continuation.cs": {
      "FluentAssertions.Execution.Continuation": {
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.Continuation::get_Then()": {
          "Lines": {
            "24": 12
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Execution.Continuation::get_SourceSucceeded()": {
          "Lines": {
            "26": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Execution.Continuation::op_Implicit(FluentAssertions.Execution.Continuation)": {
          "Lines": {
            "33": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.Continuation::.ctor(FluentAssertions.Execution.AssertionScope,System.Boolean)": {
          "Lines": {
            "15": 29,
            "17": 29,
            "18": 29,
            "19": 29
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\ContinuationOfGiven.cs": {
      "FluentAssertions.Execution.ContinuationOfGiven`1": {
        "FluentAssertions.Execution.GivenSelector`1<TSubject> FluentAssertions.Execution.ContinuationOfGiven`1::get_Then()": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Execution.ContinuationOfGiven`1::op_Implicit(FluentAssertions.Execution.ContinuationOfGiven`1<TSubject>)": {
          "Lines": {
            "31": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.ContinuationOfGiven`1::.ctor(FluentAssertions.Execution.GivenSelector`1<TSubject>,System.Boolean)": {
          "Lines": {
            "15": 0,
            "17": 0,
            "18": 0,
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\DefaultAssertionStrategy.cs": {
      "FluentAssertions.Execution.DefaultAssertionStrategy": {
        "System.Collections.Generic.IEnumerable`1<System.String> FluentAssertions.Execution.DefaultAssertionStrategy::get_FailureMessages()": {
          "Lines": {
            "16": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.DefaultAssertionStrategy::HandleFailure(System.String)": {
          "Lines": {
            "25": 0,
            "26": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.String> FluentAssertions.Execution.DefaultAssertionStrategy::DiscardFailures()": {
          "Lines": {
            "33": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.DefaultAssertionStrategy::ThrowIfAny(System.Collections.Generic.IDictionary`2<System.String,System.Object>)": {
          "Lines": {
            "41": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\Execute.cs": {
      "FluentAssertions.Execution.Execute": {
        "FluentAssertions.Execution.AssertionScope FluentAssertions.Execution.Execute::get_Assertion()": {
          "Lines": {
            "13": 17
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\FallbackTestFramework.cs": {
      "FluentAssertions.Execution.FallbackTestFramework": {
        "System.Boolean FluentAssertions.Execution.FallbackTestFramework::get_IsAvailable()": {
          "Lines": {
            "11": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.FallbackTestFramework::Throw(System.String)": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\GallioTestFramework.cs": {
      "FluentAssertions.Execution.GallioTestFramework": {
        "System.Void FluentAssertions.Execution.GallioTestFramework::Throw(System.String)": {
          "Lines": {
            "16": 0,
            "17": 0,
            "18": 0,
            "20": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "31": 0,
            "33": 0,
            "34": 0,
            "37": 0,
            "39": 0,
            "40": 0,
            "42": 0,
            "43": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "51": 0,
            "53": 0
          },
          "Branches": [
            {
              "Line": 20,
              "Offset": 58,
              "EndOffset": 60,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 67,
              "EndOffset": 69,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 58,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 67,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 76,
              "EndOffset": 78,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 76,
              "EndOffset": 105,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 125,
              "EndOffset": 127,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 125,
              "EndOffset": 152,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 257,
              "EndOffset": 259,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 257,
              "EndOffset": 282,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Execution.GallioTestFramework::get_IsAvailable()": {
          "Lines": {
            "74": 0,
            "75": 0,
            "77": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.GallioTestFramework::get_AssemblyName()": {
          "Lines": {
            "82": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\GivenSelector.cs": {
      "FluentAssertions.Execution.GivenSelector`1": {
        "FluentAssertions.Execution.GivenSelector`1<T> FluentAssertions.Execution.GivenSelector`1::ForCondition(System.Func`2<T,System.Boolean>)": {
          "Lines": {
            "40": 0,
            "42": 0,
            "45": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 6,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.GivenSelector`1<TOut> FluentAssertions.Execution.GivenSelector`1::Given(System.Func`2<T,TOut>)": {
          "Lines": {
            "60": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<T> FluentAssertions.Execution.GivenSelector`1::FailWith(System.String)": {
          "Lines": {
            "74": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<T> FluentAssertions.Execution.GivenSelector`1::FailWith(System.String,System.Func`2<T,System.Object>[])": {
          "Lines": {
            "98": 0,
            "99": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<T> FluentAssertions.Execution.GivenSelector`1::FailWith(System.String,System.Object[])": {
          "Lines": {
            "124": 0,
            "126": 0,
            "128": 0,
            "129": 0,
            "132": 0
          },
          "Branches": [
            {
              "Line": 126,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 126,
              "Offset": 18,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.GivenSelector`1::.ctor(System.Func`1<T>,System.Boolean,FluentAssertions.Execution.AssertionScope)": {
          "Lines": {
            "20": 0,
            "22": 0,
            "23": 0,
            "25": 0,
            "26": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 22,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\GivenSelectorExtensions.cs": {
      "FluentAssertions.Execution.GivenSelectorExtensions": {
        "FluentAssertions.Execution.ContinuationOfGiven`1<System.Collections.Generic.IEnumerable`1<T>> FluentAssertions.Execution.GivenSelectorExtensions::AssertCollectionIsNotNull(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.IEnumerable`1<T>>)": {
          "Lines": {
            "13": 0,
            "14": 0,
            "15": 0
          },
          "Branches": [
            {
              "Line": 13,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 13,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<System.Collections.Generic.ICollection`1<T>> FluentAssertions.Execution.GivenSelectorExtensions::AssertEitherCollectionIsNotEmpty(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.ICollection`1<T>>,System.Int32)": {
          "Lines": {
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 82,
              "EndOffset": 84,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 82,
              "EndOffset": 107,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<System.Collections.Generic.ICollection`1<T>> FluentAssertions.Execution.GivenSelectorExtensions::AssertCollectionHasEnoughItems(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.IEnumerable`1<T>>,System.Int32)": {
          "Lines": {
            "32": 0,
            "33": 0,
            "34": 0
          },
          "Branches": [
            {
              "Line": 32,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<System.Collections.Generic.ICollection`1<T>> FluentAssertions.Execution.GivenSelectorExtensions::AssertCollectionHasEnoughItems(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.ICollection`1<T>>,System.Int32)": {
          "Lines": {
            "39": 0,
            "40": 0,
            "41": 0
          },
          "Branches": [
            {
              "Line": 39,
              "Offset": 50,
              "EndOffset": 52,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 50,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<System.Collections.Generic.ICollection`1<T>> FluentAssertions.Execution.GivenSelectorExtensions::AssertCollectionHasNotTooManyItems(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.ICollection`1<T>>,System.Int32)": {
          "Lines": {
            "47": 0,
            "48": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 47,
              "Offset": 50,
              "EndOffset": 52,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 50,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ContinuationOfGiven`1<System.Collections.Generic.ICollection`1<T>> FluentAssertions.Execution.GivenSelectorExtensions::AssertCollectionsHaveSameCount(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.ICollection`1<T>>,System.Int32)": {
          "Lines": {
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.GivenSelectorExtensions::AssertCollectionsHaveSameItems(FluentAssertions.Execution.GivenSelector`1<System.Collections.Generic.ICollection`1<TActual>>,System.Collections.Generic.ICollection`1<TExpected>,System.Func`3<System.Collections.Generic.ICollection`1<TActual>,System.Collections.Generic.ICollection`1<TExpected>,System.Int32>)": {
          "Lines": {
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 44,
              "EndOffset": 46,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 44,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 93,
              "EndOffset": 95,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 93,
              "EndOffset": 118,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 127,
              "EndOffset": 129,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 127,
              "EndOffset": 152,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Execution.GivenSelectorExtensions/<>c__DisplayClass1_0`1": {
        "System.Boolean FluentAssertions.Execution.GivenSelectorExtensions/<>c__DisplayClass1_0`1::<AssertEitherCollectionIsNotEmpty>b__0(System.Collections.Generic.ICollection`1<T>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 22,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 7,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Execution.GivenSelectorExtensions/<>c__DisplayClass1_0`1::<AssertEitherCollectionIsNotEmpty>b__1(System.Collections.Generic.ICollection`1<T>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 25,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 6,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\LateBoundTestFramework.cs": {
      "FluentAssertions.Execution.LateBoundTestFramework": {
        "System.Void FluentAssertions.Execution.LateBoundTestFramework::Throw(System.String)": {
          "Lines": {
            "13": 0,
            "14": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "21": 0
          },
          "Branches": [
            {
              "Line": 14,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 24,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Execution.LateBoundTestFramework::get_IsAvailable()": {
          "Lines": {
            "40": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "46": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\MbUnitTestFramework.cs": {
      "FluentAssertions.Execution.MbUnitTestFramework": {
        "System.String FluentAssertions.Execution.MbUnitTestFramework::get_AssemblyName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MbUnitTestFramework::get_ExceptionFullName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\MessageBuilder.cs": {
      "FluentAssertions.Execution.MessageBuilder": {
        "System.String FluentAssertions.Execution.MessageBuilder::Build(System.String,System.Object[],System.String,FluentAssertions.Execution.ContextDataItems,System.String,System.String)": {
          "Lines": {
            "34": 0,
            "36": 0,
            "38": 0,
            "40": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 36,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 24,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Execution.MessageBuilder::SubstituteIdentifier(System.String,System.String,System.String)": {
          "Lines": {
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "70": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MessageBuilder::SubstituteContextualTags(System.String,FluentAssertions.Execution.ContextDataItems)": {
          "Lines": {
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MessageBuilder::FormatArgumentPlaceholders(System.String,System.Object[])": {
          "Lines": {
            "89": 0,
            "90": 0,
            "92": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MessageBuilder::SanitizeReason(System.String)": {
          "Lines": {
            "97": 0,
            "99": 0,
            "100": 0,
            "102": 0,
            "105": 0
          },
          "Branches": [
            {
              "Line": 97,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 62,
              "EndOffset": 64,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 62,
              "EndOffset": 76,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 97,
              "Offset": 6,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Execution.MessageBuilder::EnsurePrefix(System.String,System.String)": {
          "Lines": {
            "111": 0,
            "112": 0,
            "114": 0,
            "115": 0,
            "116": 0
          },
          "Branches": [
            {
              "Line": 114,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 114,
              "Offset": 29,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Execution.MessageBuilder::ExtractLeadingBlanksFrom(System.String)": {
          "Lines": {
            "121": 0,
            "122": 0,
            "124": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Execution.MessageBuilder::StartsWithBlank(System.String)": {
          "Lines": {
            "129": 0
          },
          "Branches": [
            {
              "Line": 129,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 129,
              "Offset": 25,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.MessageBuilder::.ctor(System.Boolean)": {
          "Lines": {
            "22": 0,
            "26": 0,
            "28": 0,
            "29": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Execution.MessageBuilder/<>c__DisplayClass4_0": {
        "System.String FluentAssertions.Execution.MessageBuilder/<>c__DisplayClass4_0::<SubstituteIdentifier>b__0(System.Text.RegularExpressions.Match)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 54,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 39,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 56,
              "EndOffset": 62,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 62,
              "Offset": 73,
              "EndOffset": 75,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 62,
              "Offset": 73,
              "EndOffset": 82,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Execution.MessageBuilder/<>c__DisplayClass5_0": {
        "System.String FluentAssertions.Execution.MessageBuilder/<>c__DisplayClass5_0::<SubstituteContextualTags>b__0(System.Text.RegularExpressions.Match)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 81,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 35,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 72,
              "EndOffset": 74,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 72,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\MSpecFramework.cs": {
      "FluentAssertions.Execution.MSpecFramework": {
        "System.String FluentAssertions.Execution.MSpecFramework::get_AssemblyName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MSpecFramework::get_ExceptionFullName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\MSTestFramework.cs": {
      "FluentAssertions.Execution.MSTestFramework": {
        "System.String FluentAssertions.Execution.MSTestFramework::get_ExceptionFullName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MSTestFramework::get_AssemblyName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\MSTestFrameworkRT.cs": {
      "FluentAssertions.Execution.MSTestFrameworkRT": {
        "System.String FluentAssertions.Execution.MSTestFrameworkRT::get_AssemblyName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MSTestFrameworkRT::get_ExceptionFullName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\MSTestFrameworkV2.cs": {
      "FluentAssertions.Execution.MSTestFrameworkV2": {
        "System.String FluentAssertions.Execution.MSTestFrameworkV2::get_ExceptionFullName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.MSTestFrameworkV2::get_AssemblyName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\NSpec1Framework.cs": {
      "FluentAssertions.Execution.NSpec1Framework": {
        "System.Boolean FluentAssertions.Execution.NSpec1Framework::get_IsAvailable()": {
          "Lines": {
            "16": 0,
            "18": 0,
            "20": 0,
            "23": 0,
            "25": 0,
            "27": 0,
            "29": 0,
            "31": 0
          },
          "Branches": [
            {
              "Line": 18,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 18,
              "Offset": 33,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.NSpec1Framework::Throw(System.String)": {
          "Lines": {
            "36": 0,
            "37": 0,
            "39": 0,
            "43": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 23,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\NSpecFramework.cs": {
      "FluentAssertions.Execution.NSpecFramework": {
        "System.Boolean FluentAssertions.Execution.NSpecFramework::get_IsAvailable()": {
          "Lines": {
            "16": 0,
            "18": 0,
            "20": 0,
            "23": 0,
            "25": 0,
            "27": 0,
            "29": 0,
            "31": 0
          },
          "Branches": [
            {
              "Line": 18,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 18,
              "Offset": 33,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.NSpecFramework::Throw(System.String)": {
          "Lines": {
            "36": 0,
            "37": 0,
            "39": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 23,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\NUnitPclTestFramework.cs": {
      "FluentAssertions.Execution.NUnitPclTestFramework": {
        "System.String FluentAssertions.Execution.NUnitPclTestFramework::get_AssemblyName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.NUnitPclTestFramework::get_ExceptionFullName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\NUnitTestFramework.cs": {
      "FluentAssertions.Execution.NUnitTestFramework": {
        "System.String FluentAssertions.Execution.NUnitTestFramework::get_AssemblyName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.NUnitTestFramework::get_ExceptionFullName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\TestFrameworkProvider.cs": {
      "FluentAssertions.Execution.TestFrameworkProvider": {
        "System.Void FluentAssertions.Execution.TestFrameworkProvider::Throw(System.String)": {
          "Lines": {
            "35": 0,
            "37": 0,
            "40": 0,
            "41": 0
          },
          "Branches": [
            {
              "Line": 35,
              "Offset": 5,
              "EndOffset": 7,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 5,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ITestFramework FluentAssertions.Execution.TestFrameworkProvider::DetectFramework()": {
          "Lines": {
            "45": 0,
            "46": 0,
            "48": 0
          },
          "Branches": [
            {
              "Line": 45,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 6,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ITestFramework FluentAssertions.Execution.TestFrameworkProvider::AttemptToDetectUsingAppSetting()": {
          "Lines": {
            "53": 0,
            "54": 0,
            "56": 0,
            "57": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "64": 0,
            "67": 0
          },
          "Branches": [
            {
              "Line": 54,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 59,
              "EndOffset": 61,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 59,
              "EndOffset": 83,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 17,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 35,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.ITestFramework FluentAssertions.Execution.TestFrameworkProvider::AttemptToDetectUsingDynamicScanning()": {
          "Lines": {
            "72": 0
          },
          "Branches": [
            {
              "Line": 72,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 72,
              "Offset": 16,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Execution.TestFrameworkProvider::.cctor()": {
          "Lines": {
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\XUnit2TestFramework.cs": {
      "FluentAssertions.Execution.XUnit2TestFramework": {
        "System.Boolean FluentAssertions.Execution.XUnit2TestFramework::get_IsAvailable()": {
          "Lines": {
            "16": 0,
            "18": 0,
            "20": 0,
            "22": 0,
            "24": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Execution.XUnit2TestFramework::Throw(System.String)": {
          "Lines": {
            "29": 0,
            "30": 0,
            "32": 0,
            "35": 0
          },
          "Branches": [
            {
              "Line": 30,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 23,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Execution\\XUnitTestFramework.cs": {
      "FluentAssertions.Execution.XUnitTestFramework": {
        "System.String FluentAssertions.Execution.XUnitTestFramework::get_AssemblyName()": {
          "Lines": {
            "5": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Execution.XUnitTestFramework::get_ExceptionFullName()": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Events\\EventAssertions.cs": {
      "FluentAssertions.Events.EventAssertions`1": {
        "FluentAssertions.Events.IEventRecorder FluentAssertions.Events.EventAssertions`1::Raise(System.String,System.String,System.Object[])": {
          "Lines": {
            "47": 0,
            "49": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "56": 0
          },
          "Branches": [
            {
              "Line": 49,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 19,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventAssertions`1::NotRaise(System.String,System.String,System.Object[])": {
          "Lines": {
            "79": 0,
            "80": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "86": 0
          },
          "Branches": [
            {
              "Line": 80,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 17,
              "EndOffset": 71,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Events.IEventRecorder FluentAssertions.Events.EventAssertions`1::RaisePropertyChangeFor(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Object>>,System.String,System.Object[])": {
          "Lines": {
            "110": 0,
            "111": 0,
            "113": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "121": 0
          },
          "Branches": [
            {
              "Line": 111,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 111,
              "Offset": 25,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 113,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 113,
              "Offset": 52,
              "EndOffset": 119,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventAssertions`1::NotRaisePropertyChangeFor(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Object>>,System.String,System.Object[])": {
          "Lines": {
            "145": 0,
            "147": 0,
            "149": 0,
            "151": 0,
            "152": 0,
            "153": 0,
            "154": 0,
            "156": 0
          },
          "Branches": [
            {
              "Line": 149,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 149,
              "Offset": 56,
              "EndOffset": 123,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Events.EventAssertions`1::GetAffectedPropertyName(FluentAssertions.Events.RecordedEvent)": {
          "Lines": {
            "160": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Events.EventAssertions`1::get_Identifier()": {
          "Lines": {
            "163": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventAssertions`1::.ctor(FluentAssertions.Events.IMonitor`1<T>)": {
          "Lines": {
            "22": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Events\\EventHandlerFactory.cs": {
      "FluentAssertions.Events.EventHandlerFactory": {
        "System.Delegate FluentAssertions.Events.EventHandlerFactory::GenerateHandler(System.Type,FluentAssertions.Events.IEventRecorder)": {
          "Lines": {
            "20": 0,
            "21": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "33": 0,
            "34": 0,
            "36": 0,
            "39": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "46": 0,
            "49": 0,
            "52": 0,
            "55": 0,
            "58": 0,
            "59": 0,
            "61": 0,
            "65": 0,
            "69": 0,
            "72": 0,
            "75": 0,
            "77": 0,
            "79": 0
          },
          "Branches": [
            {
              "Line": 46,
              "Offset": 262,
              "EndOffset": 165,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 221,
              "EndOffset": 223,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 221,
              "EndOffset": 239,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 262,
              "EndOffset": 264,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        },
        "System.Type FluentAssertions.Events.EventHandlerFactory::GetDelegateReturnType(System.Type)": {
          "Lines": {
            "87": 0,
            "88": 0
          },
          "Branches": []
        },
        "System.Type[] FluentAssertions.Events.EventHandlerFactory::GetDelegateParameterTypes(System.Type)": {
          "Lines": {
            "96": 0,
            "98": 0,
            "99": 0,
            "101": 0,
            "103": 0,
            "106": 0
          },
          "Branches": [
            {
              "Line": 101,
              "Offset": 44,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 44,
              "EndOffset": 46,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Type[] FluentAssertions.Events.EventHandlerFactory::AppendParameterListThisReference(System.Type[])": {
          "Lines": {
            "114": 0,
            "116": 0,
            "118": 0,
            "120": 0,
            "123": 0
          },
          "Branches": [
            {
              "Line": 118,
              "Offset": 44,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 118,
              "Offset": 44,
              "EndOffset": 46,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Events.EventHandlerFactory::TypeIsDelegate(System.Type)": {
          "Lines": {
            "131": 0,
            "132": 0,
            "134": 0,
            "137": 0,
            "138": 0
          },
          "Branches": [
            {
              "Line": 131,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 131,
              "Offset": 26,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MethodInfo FluentAssertions.Events.EventHandlerFactory::DelegateInvokeMethod(System.Type)": {
          "Lines": {
            "146": 0,
            "148": 0,
            "151": 0,
            "152": 0
          },
          "Branches": [
            {
              "Line": 146,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 146,
              "Offset": 6,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Events\\EventMonitor.cs": {
      "FluentAssertions.Events.EventMonitor`1": {
        "T FluentAssertions.Events.EventMonitor`1::get_Subject()": {
          "Lines": {
            "32": 0
          },
          "Branches": []
        },
        "FluentAssertions.Events.EventMetadata[] FluentAssertions.Events.EventMonitor`1::get_MonitoredEvents()": {
          "Lines": {
            "38": 0,
            "39": 0,
            "40": 0
          },
          "Branches": [
            {
              "Line": 38,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Events.OccurredEvent[] FluentAssertions.Events.EventMonitor`1::get_OccurredEvents()": {
          "Lines": {
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "61": 0
          },
          "Branches": [
            {
              "Line": 48,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 53,
              "EndOffset": 55,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 53,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 89,
              "EndOffset": 91,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 89,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 120,
              "EndOffset": 122,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 120,
              "EndOffset": 145,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 156,
              "EndOffset": 158,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 156,
              "EndOffset": 181,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 192,
              "EndOffset": 194,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 192,
              "EndOffset": 217,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventMonitor`1::Clear()": {
          "Lines": {
            "67": 0,
            "69": 0,
            "71": 0
          },
          "Branches": [
            {
              "Line": 67,
              "Offset": 36,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Events.EventAssertions`1<T> FluentAssertions.Events.EventMonitor`1::Should()": {
          "Lines": {
            "75": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventMonitor`1::Attach(System.Type,System.Func`1<System.DateTime>)": {
          "Lines": {
            "80": 0,
            "82": 0,
            "85": 0,
            "86": 0,
            "88": 0,
            "91": 0,
            "93": 0,
            "95": 0
          },
          "Branches": [
            {
              "Line": 80,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 80,
              "Offset": 11,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 36,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 91,
              "Offset": 90,
              "EndOffset": 70,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 91,
              "Offset": 90,
              "EndOffset": 92,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventMonitor`1::Dispose()": {
          "Lines": {
            "99": 0,
            "101": 0,
            "104": 0,
            "105": 0
          },
          "Branches": [
            {
              "Line": 99,
              "Offset": 36,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventMonitor`1::AttachEventHandler(System.Reflection.EventInfo,System.Func`1<System.DateTime>)": {
          "Lines": {
            "109": 0,
            "111": 0,
            "112": 0,
            "114": 0,
            "117": 0
          },
          "Branches": [
            {
              "Line": 109,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 63,
              "EndOffset": 65,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 109,
              "Offset": 19,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 63,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Events.IEventRecorder FluentAssertions.Events.EventMonitor`1::GetEventRecorder(System.String)": {
          "Lines": {
            "121": 0,
            "123": 0,
            "126": 0
          },
          "Branches": [
            {
              "Line": 121,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 121,
              "Offset": 14,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventMonitor`1::.ctor(System.Object,System.Func`1<System.DateTime>)": {
          "Lines": {
            "17": 0,
            "18": 0,
            "20": 0,
            "22": 0,
            "24": 0,
            "27": 0,
            "29": 0,
            "30": 0
          },
          "Branches": [
            {
              "Line": 22,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 18,
              "EndOffset": 36,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Events\\EventRecorder.cs": {
      "FluentAssertions.Events.EventRecorder": {
        "System.Object FluentAssertions.Events.EventRecorder::get_EventObject()": {
          "Lines": {
            "42": 0
          },
          "Branches": [
            {
              "Line": 42,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 7,
              "EndOffset": 12,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventRecorder::set_EventObject(System.Object)": {
          "Lines": {
            "43": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Events.EventRecorder::get_EventName()": {
          "Lines": {
            "47": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Events.EventRecorder::get_EventHandlerType()": {
          "Lines": {
            "49": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventRecorder::Attach(System.WeakReference,System.Reflection.EventInfo)": {
          "Lines": {
            "53": 0,
            "55": 0,
            "56": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventRecorder::Dispose()": {
          "Lines": {
            "69": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "75": 0
          },
          "Branches": [
            {
              "Line": 69,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 71,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 71,
              "Offset": 15,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 6,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerator`1<FluentAssertions.Events.RecordedEvent> FluentAssertions.Events.EventRecorder::GetEnumerator()": {
          "Lines": {
            "82": 0,
            "84": 0,
            "86": 0
          },
          "Branches": []
        },
        "System.Collections.IEnumerator FluentAssertions.Events.EventRecorder::System.Collections.IEnumerable.GetEnumerator()": {
          "Lines": {
            "94": 0,
            "96": 0,
            "98": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventRecorder::RecordEvent(System.Object[])": {
          "Lines": {
            "105": 0,
            "107": 0,
            "108": 0,
            "109": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventRecorder::Reset()": {
          "Lines": {
            "116": 0,
            "118": 0,
            "120": 0,
            "122": 0,
            "123": 0
          },
          "Branches": [
            {
              "Line": 118,
              "Offset": 45,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 118,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.EventRecorder::.ctor(System.Object,System.String,System.Func`1<System.DateTime>)": {
          "Lines": {
            "20": 0,
            "21": 0,
            "30": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Events.EventRecorder/<>c__DisplayClass16_0": {
        "System.Void FluentAssertions.Events.EventRecorder/<>c__DisplayClass16_0::<Attach>b__0()": {
          "Lines": {},
          "Branches": [
            {
              "Line": 60,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 11,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Events\\IMonitor.cs": {
      "FluentAssertions.Events.OccurredEvent": {
        "System.String FluentAssertions.Events.OccurredEvent::get_EventName()": {
          "Lines": {
            "53": 0
          },
          "Branches": []
        },
        "System.Object[] FluentAssertions.Events.OccurredEvent::get_Parameters()": {
          "Lines": {
            "58": 0
          },
          "Branches": []
        },
        "System.DateTime FluentAssertions.Events.OccurredEvent::get_TimestampUtc()": {
          "Lines": {
            "63": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Events.EventMetadata": {
        "System.String FluentAssertions.Events.EventMetadata::get_EventName()": {
          "Lines": {
            "74": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Events.EventMetadata::get_HandlerType()": {
          "Lines": {
            "79": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.EventMetadata::.ctor(System.String,System.Type)": {
          "Lines": {
            "81": 0,
            "83": 0,
            "84": 0,
            "85": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Events\\RecordedEvent.cs": {
      "FluentAssertions.Events.RecordedEvent": {
        "System.DateTime FluentAssertions.Events.RecordedEvent::get_TimestampUtc()": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Object> FluentAssertions.Events.RecordedEvent::get_Parameters()": {
          "Lines": {
            "37": 0,
            "38": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Events.RecordedEvent::set_Parameters(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {
            "41": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Events.RecordedEvent::.ctor(System.DateTime,System.Object,System.Object[])": {
          "Lines": {
            "19": 0,
            "21": 0,
            "22": 0,
            "23": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Events.RecordedEvent/<>c__DisplayClass1_0": {
        "System.Object FluentAssertions.Events.RecordedEvent/<>c__DisplayClass1_0::<.ctor>b__0(System.Object)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 21,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 7,
              "EndOffset": 11,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Events.RecordedEvent/<>c": {
        "System.Object FluentAssertions.Events.RecordedEvent/<>c::<get_Parameters>b__7_0(System.Object)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 38,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 8,
              "EndOffset": 12,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\AssertionContext.cs": {
      "FluentAssertions.Equivalency.AssertionContext`1": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.AssertionContext`1::get_SubjectProperty()": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "TSubject FluentAssertions.Equivalency.AssertionContext`1::get_Subject()": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "TSubject FluentAssertions.Equivalency.AssertionContext`1::get_Expectation()": {
          "Lines": {
            "21": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.AssertionContext`1::get_Because()": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "System.Object[] FluentAssertions.Equivalency.AssertionContext`1::get_BecauseArgs()": {
          "Lines": {
            "25": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.AssertionContext`1<TSubject> FluentAssertions.Equivalency.AssertionContext`1::CreateFromEquivalencyValidationContext(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "29": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 6,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.AssertionContext`1::.ctor(FluentAssertions.Equivalency.SelectedMemberInfo,TSubject,TSubject,System.String,System.Object[])": {
          "Lines": {
            "7": 0,
            "8": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\AssertionResultSet.cs": {
      "FluentAssertions.Equivalency.AssertionResultSet": {
        "System.Void FluentAssertions.Equivalency.AssertionResultSet::AddSet(System.Object,System.String[])": {
          "Lines": {
            "20": 0,
            "21": 0
          },
          "Branches": []
        },
        "System.String[] FluentAssertions.Equivalency.AssertionResultSet::SelectClosestMatchFor(System.Object)": {
          "Lines": {
            "33": 0,
            "35": 0,
            "38": 0,
            "40": 0,
            "42": 0,
            "44": 0,
            "47": 0
          },
          "Branches": [
            {
              "Line": 33,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 19,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 81,
              "EndOffset": 83,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 81,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.KeyValuePair`2<System.Object,System.String[]>[] FluentAssertions.Equivalency.AssertionResultSet::GetBestResultSets()": {
          "Lines": {
            "52": 0,
            "53": 0
          },
          "Branches": [
            {
              "Line": 52,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 24,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.AssertionResultSet::ContainsSuccessfulSet()": {
          "Lines": {
            "59": 0
          },
          "Branches": [
            {
              "Line": 59,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 59,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.AssertionResultSet::.ctor()": {
          "Lines": {
            "12": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\AssertionRule.cs": {
      "FluentAssertions.Equivalency.AssertionRule`1": {
        "System.Boolean FluentAssertions.Equivalency.AssertionRule`1::AssertEquality(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "37": 0,
            "39": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "47": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "55": 0,
            "57": 0,
            "60": 0,
            "63": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 12,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 33,
              "EndOffset": 63,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 118,
              "EndOffset": 120,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 118,
              "EndOffset": 124,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 157,
              "EndOffset": 159,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 157,
              "EndOffset": 187,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 242,
              "EndOffset": 244,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 242,
              "EndOffset": 248,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 268,
              "EndOffset": 270,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 268,
              "EndOffset": 287,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 12,
              "EndOffset": 289,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.AssertionRule`1::ToString()": {
          "Lines": {
            "75": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.AssertionRule`1::.ctor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>,System.Action`1<FluentAssertions.Equivalency.IAssertionContext`1<TSubject>>)": {
          "Lines": {
            "20": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\AssertionRuleEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.AssertionRuleEquivalencyStep`1": {
        "System.Boolean FluentAssertions.Equivalency.AssertionRuleEquivalencyStep`1::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "23": 0,
            "25": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 18,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.AssertionRuleEquivalencyStep`1::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "30": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "38": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "46": 0,
            "48": 0,
            "49": 0,
            "52": 0
          },
          "Branches": [
            {
              "Line": 32,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 92,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 131,
              "EndOffset": 133,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 131,
              "EndOffset": 161,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 235,
              "EndOffset": 237,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 235,
              "EndOffset": 256,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.AssertionRuleEquivalencyStep`1::ToString()": {
          "Lines": {
            "64": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.AssertionRuleEquivalencyStep`1::.ctor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>,System.Action`1<FluentAssertions.Equivalency.IAssertionContext`1<TSubject>>)": {
          "Lines": {
            "15": 0,
            "17": 0,
            "18": 0,
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\AssertionRuleEquivalencyStepAdapter.cs": {
      "FluentAssertions.Equivalency.AssertionRuleEquivalencyStepAdapter": {
        "System.Boolean FluentAssertions.Equivalency.AssertionRuleEquivalencyStepAdapter::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.AssertionRuleEquivalencyStepAdapter::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.AssertionRuleEquivalencyStepAdapter::ToString()": {
          "Lines": {
            "27": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.AssertionRuleEquivalencyStepAdapter::.ctor(FluentAssertions.Equivalency.IAssertionRule)": {
          "Lines": {
            "10": 0,
            "12": 0,
            "13": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\CollectionMemberAssertionOptionsDecorator.cs": {
      "FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator": {
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.IMemberSelectionRule> FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_SelectionRules()": {
          "Lines": {
            "23": 0
          },
          "Branches": [
            {
              "Line": 23,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.IMemberMatchingRule> FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_MatchingRules()": {
          "Lines": {
            "29": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.OrderingRuleCollection FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_OrderingRules()": {
          "Lines": {
            "36": 0
          },
          "Branches": [
            {
              "Line": 36,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.ConversionSelector FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_ConversionSelector()": {
          "Lines": {
            "40": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.IEquivalencyStep> FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_UserEquivalencySteps()": {
          "Lines": {
            "44": 0
          },
          "Branches": [
            {
              "Line": 44,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_IsRecursive()": {
          "Lines": {
            "47": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_AllowInfiniteRecursion()": {
          "Lines": {
            "49": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.CyclicReferenceHandling FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_CyclicReferenceHandling()": {
          "Lines": {
            "51": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EnumEquivalencyHandling FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_EnumEquivalencyHandling()": {
          "Lines": {
            "53": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_UseRuntimeTyping()": {
          "Lines": {
            "55": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_IncludeProperties()": {
          "Lines": {
            "57": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_IncludeFields()": {
          "Lines": {
            "59": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EqualityStrategy FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::GetEqualityStrategy(System.Type)": {
          "Lines": {
            "63": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.ITraceWriter FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::get_TraceWriter()": {
          "Lines": {
            "66": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.CollectionMemberAssertionOptionsDecorator::.ctor(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "14": 0,
            "16": 0,
            "17": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\CollectionMemberAssertionRuleDecorator.cs": {
      "FluentAssertions.Equivalency.CollectionMemberAssertionRuleDecorator": {
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionRuleDecorator::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "14": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.CollectionMemberAssertionRuleDecorator::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "22": 0,
            "24": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EquivalencyValidationContext FluentAssertions.Equivalency.CollectionMemberAssertionRuleDecorator::CreateAdjustedCopy(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.CollectionMemberAssertionRuleDecorator::ToString()": {
          "Lines": {
            "44": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.CollectionMemberAssertionRuleDecorator::.ctor(FluentAssertions.Equivalency.IEquivalencyStep)": {
          "Lines": {
            "7": 0,
            "9": 0,
            "10": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\CollectionMemberMemberInfo.cs": {
      "FluentAssertions.Equivalency.CollectionMemberMemberInfo": {
        "System.String FluentAssertions.Equivalency.CollectionMemberMemberInfo::GetAdjustedPropertyPath(System.String)": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.CollectionMemberMemberInfo::get_SelectedMemberInfo()": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.CollectionMemberMemberInfo::get_SelectedMemberPath()": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.CollectionMemberMemberInfo::get_SelectedMemberDescription()": {
          "Lines": {
            "26": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.CollectionMemberMemberInfo::get_CompileTimeType()": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.CollectionMemberMemberInfo::get_RuntimeType()": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.CollectionMemberMemberInfo::.ctor(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "8": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\ConversionSelector.cs": {
      "FluentAssertions.Equivalency.ConversionSelector": {
        "System.Void FluentAssertions.Equivalency.ConversionSelector::IncludeAll()": {
          "Lines": {
            "21": 0,
            "22": 0,
            "23": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.ConversionSelector::Include(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "27": 0,
            "28": 0,
            "29": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.ConversionSelector::Exclude(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "33": 0,
            "34": 0,
            "35": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.ConversionSelector::RequiresConversion(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "39": 0
          },
          "Branches": [
            {
              "Line": 39,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 36,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.ConversionSelector::ToString()": {
          "Lines": {
            "44": 0,
            "45": 0
          },
          "Branches": [
            {
              "Line": 45,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 19,
              "EndOffset": 27,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.ConversionSelector FluentAssertions.Equivalency.ConversionSelector::Clone()": {
          "Lines": {
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.ConversionSelector::.ctor()": {
          "Lines": {
            "15": 0,
            "16": 0,
            "17": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\CyclicReferenceDetector.cs": {
      "FluentAssertions.Equivalency.CyclicReferenceDetector": {
        "System.Boolean FluentAssertions.Equivalency.CyclicReferenceDetector::IsCyclicReference(FluentAssertions.Equivalency.ObjectReference)": {
          "Lines": {
            "36": 0,
            "38": 0,
            "40": 0,
            "42": 0,
            "43": 0,
            "45": 0,
            "46": 0,
            "48": 0,
            "51": 0,
            "55": 0
          },
          "Branches": [
            {
              "Line": 38,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 22,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 8,
              "EndOffset": 71,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 33,
              "EndOffset": 71,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Object FluentAssertions.Equivalency.CyclicReferenceDetector::Clone()": {
          "Lines": {
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.CyclicReferenceDetector::.ctor(FluentAssertions.Equivalency.CyclicReferenceHandling)": {
          "Lines": {
            "17": 0,
            "21": 0,
            "23": 0,
            "24": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\DictionaryEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.DictionaryEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.DictionaryEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "16": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.DictionaryEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "32": 0,
            "33": 0,
            "35": 0,
            "37": 0,
            "39": 0,
            "41": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "48": 0,
            "49": 0,
            "55": 0
          },
          "Branches": [
            {
              "Line": 35,
              "Offset": 31,
              "EndOffset": 36,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 37,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 218,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 83,
              "EndOffset": 85,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 83,
              "EndOffset": 147,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 218,
              "EndOffset": 223,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 31,
              "EndOffset": 245,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 37,
              "EndOffset": 245,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.DictionaryEquivalencyStep::PreconditionsAreMet(System.Collections.IDictionary,System.Collections.IDictionary)": {
          "Lines": {
            "60": 0,
            "61": 0,
            "62": 0
          },
          "Branches": [
            {
              "Line": 60,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 6,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 15,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.DictionaryEquivalencyStep::AssertEitherIsNotNull(System.Collections.IDictionary,System.Collections.IDictionary)": {
          "Lines": {
            "67": 0,
            "68": 0,
            "69": 0
          },
          "Branches": [
            {
              "Line": 67,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 6,
              "EndOffset": 11,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 67,
              "Offset": 9,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.DictionaryEquivalencyStep::AssertIsDictionary(System.Collections.IDictionary)": {
          "Lines": {
            "74": 0,
            "75": 0,
            "76": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.DictionaryEquivalencyStep::AssertSameLength(System.Collections.IDictionary,System.Collections.IDictionary)": {
          "Lines": {
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0
          },
          "Branches": [
            {
              "Line": 81,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 6,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 54,
              "EndOffset": 56,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 54,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 92,
              "EndOffset": 105,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EnumEqualityStep.cs": {
      "FluentAssertions.Equivalency.EnumEqualityStep": {
        "System.Boolean FluentAssertions.Equivalency.EnumEqualityStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": [
            {
              "Line": 19,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 8,
              "EndOffset": 14,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 33,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 24,
              "EndOffset": 54,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EnumEqualityStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "36": 0,
            "39": 0,
            "40": 0,
            "42": 0,
            "43": 0,
            "46": 0,
            "47": 0,
            "49": 0,
            "50": 0,
            "53": 0,
            "54": 0,
            "57": 0
          },
          "Branches": [
            {
              "Line": 36,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 8,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 25,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 60,
              "EndOffset": 62,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 60,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 12,
              "EndOffset": 116,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 12,
              "EndOffset": 165,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EnumerableEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.EnumerableEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.EnumerableEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "17": 0,
            "19": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.EnumerableEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "34": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "42": 0,
            "45": 0
          },
          "Branches": [
            {
              "Line": 34,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 27,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 11,
              "EndOffset": 82,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EnumerableEquivalencyStep::AssertSubjectIsCollection(System.Object)": {
          "Lines": {
            "50": 0,
            "51": 0,
            "52": 0,
            "54": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "61": 0
          },
          "Branches": [
            {
              "Line": 54,
              "Offset": 37,
              "EndOffset": 39,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 37,
              "EndOffset": 82,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EnumerableEquivalencyStep::IsCollection(System.Type)": {
          "Lines": {
            "66": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 16,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Object[] FluentAssertions.Equivalency.EnumerableEquivalencyStep::ToArray(System.Object)": {
          "Lines": {
            "71": 0
          },
          "Branches": [
            {
              "Line": 71,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 71,
              "Offset": 1,
              "EndOffset": 5,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EnumerableEquivalencyValidator.cs": {
      "FluentAssertions.Equivalency.EnumerableEquivalencyValidator": {
        "System.Boolean FluentAssertions.Equivalency.EnumerableEquivalencyValidator::get_Recursive()": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.OrderingRuleCollection FluentAssertions.Equivalency.EnumerableEquivalencyValidator::get_OrderingRules()": {
          "Lines": {
            "30": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EnumerableEquivalencyValidator::Execute(System.Object[],T[])": {
          "Lines": {
            "34": 0,
            "36": 0,
            "38": 0,
            "40": 0,
            "41": 0,
            "45": 0,
            "47": 0,
            "48": 0,
            "51": 0
          },
          "Branches": [
            {
              "Line": 34,
              "Offset": 38,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 65,
              "EndOffset": 70,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 76,
              "EndOffset": 78,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 76,
              "EndOffset": 132,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 38,
              "EndOffset": 202,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 65,
              "EndOffset": 202,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EnumerableEquivalencyValidator::AssertIsNotNull(System.Object,System.Object[])": {
          "Lines": {
            "55": 0,
            "56": 0,
            "57": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EnumerableEquivalencyValidator::AssertElementGraphEquivalency(System.Object[],T[])": {
          "Lines": {
            "62": 0,
            "63": 0,
            "65": 0,
            "67": 0,
            "69": 0,
            "71": 0,
            "73": 0,
            "74": 0,
            "78": 0,
            "80": 0,
            "81": 0,
            "84": 0
          },
          "Branches": [
            {
              "Line": 65,
              "Offset": 319,
              "EndOffset": 77,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 155,
              "EndOffset": 157,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 155,
              "EndOffset": 235,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 319,
              "EndOffset": 324,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.EnumerableEquivalencyValidator::LooselyMatchAgainst(System.Collections.Generic.IList`1<System.Object>,T,System.Int32)": {
          "Lines": {
            "90": 0,
            "91": 0,
            "92": 0,
            "93": 0,
            "94": 0,
            "96": 0,
            "98": 0,
            "99": 0,
            "101": 0,
            "103": 0,
            "105": 0,
            "106": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "114": 0,
            "116": 0,
            "119": 0,
            "121": 0,
            "124": 0,
            "126": 0,
            "128": 0
          },
          "Branches": [
            {
              "Line": 96,
              "Offset": 268,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 162,
              "EndOffset": 164,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 176,
              "EndOffset": 178,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 176,
              "EndOffset": 201,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 162,
              "EndOffset": 211,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 96,
              "Offset": 268,
              "EndOffset": 273,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 119,
              "Offset": 275,
              "EndOffset": 277,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 119,
              "Offset": 275,
              "EndOffset": 289,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 124,
              "Offset": 344,
              "EndOffset": 313,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 124,
              "Offset": 344,
              "EndOffset": 346,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            }
          ]
        },
        "System.String[] FluentAssertions.Equivalency.EnumerableEquivalencyValidator::TryToMatch(System.Object,T,System.Int32)": {
          "Lines": {
            "132": 0,
            "134": 0,
            "136": 0,
            "138": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EnumerableEquivalencyValidator::StrictlyMatchAgainst(System.Object[],T,System.Int32)": {
          "Lines": {
            "142": 0,
            "143": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EnumerableEquivalencyValidator::.ctor(FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "21": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EnumerableEquivalencyValidatorExtensions.cs": {
      "FluentAssertions.Equivalency.EnumerableEquivalencyValidatorExtensions": {
        "FluentAssertions.Execution.Continuation FluentAssertions.Equivalency.EnumerableEquivalencyValidatorExtensions::AssertCollectionsHaveSameCount(System.Collections.Generic.ICollection`1<System.Object>,System.Collections.Generic.ICollection`1<T>)": {
          "Lines": {
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.Continuation FluentAssertions.Equivalency.EnumerableEquivalencyValidatorExtensions::AssertEitherCollectionIsNotEmpty(FluentAssertions.Execution.AssertionScope,System.Collections.Generic.ICollection`1<System.Object>,System.Collections.Generic.ICollection`1<T>)": {
          "Lines": {
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0
          },
          "Branches": [
            {
              "Line": 22,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 8,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 54,
              "EndOffset": 56,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 54,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Execution.Continuation FluentAssertions.Equivalency.EnumerableEquivalencyValidatorExtensions::AssertCollectionHasEnoughItems(FluentAssertions.Execution.AssertionScope,System.Collections.Generic.ICollection`1<System.Object>,System.Collections.Generic.ICollection`1<T>)": {
          "Lines": {
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0
          },
          "Branches": []
        },
        "FluentAssertions.Execution.Continuation FluentAssertions.Equivalency.EnumerableEquivalencyValidatorExtensions::AssertCollectionHasNotTooManyItems(FluentAssertions.Execution.AssertionScope,System.Collections.Generic.ICollection`1<System.Object>,System.Collections.Generic.ICollection`1<T>)": {
          "Lines": {
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EquivalencyAssertionOptions.cs": {
      "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1": {
        "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation> FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::Excluding(System.Linq.Expressions.Expression`1<System.Func`2<TExpectation,System.Object>>)": {
          "Lines": {
            "36": 0,
            "37": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation> FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::Including(System.Linq.Expressions.Expression`1<System.Func`2<TExpectation,System.Object>>)": {
          "Lines": {
            "48": 0,
            "49": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation> FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::Including(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "60": 0,
            "61": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation> FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::WithStrictOrderingFor(System.Linq.Expressions.Expression`1<System.Func`2<TExpectation,System.Object>>)": {
          "Lines": {
            "71": 0,
            "72": 0,
            "73": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<System.Collections.Generic.IEnumerable`1<TExpectation>> FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::AsCollection()": {
          "Lines": {
            "82": 0,
            "83": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::.ctor()": {
          "Lines": {
            "22": 0,
            "24": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyAssertionOptions`1::.ctor(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "27": 0,
            "29": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.EquivalencyAssertionOptions": {
        "System.Void FluentAssertions.Equivalency.EquivalencyAssertionOptions::.ctor()": {
          "Lines": {
            "92": 0,
            "94": 0,
            "96": 0,
            "97": 0,
            "99": 0,
            "100": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EquivalencyAssertionOptionsExtentions.cs": {
      "FluentAssertions.Equivalency.EquivalencyAssertionOptionsExtentions": {
        "System.Type FluentAssertions.Equivalency.EquivalencyAssertionOptionsExtentions::GetExpectationType(FluentAssertions.Equivalency.IEquivalencyAssertionOptions,FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "17": 0,
            "19": 0
          },
          "Branches": [
            {
              "Line": 17,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 6,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Type FluentAssertions.Equivalency.EquivalencyAssertionOptionsExtentions::NullableOrActualType(System.Type)": {
          "Lines": {
            "24": 0,
            "26": 0,
            "29": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 6,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 29,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EquivalencyValidationContext.cs": {
      "FluentAssertions.Equivalency.EquivalencyValidationContext": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.EquivalencyValidationContext::get_SelectedMemberInfo()": {
          "Lines": {
            "15": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.EquivalencyValidationContext::get_SelectedMemberPath()": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.EquivalencyValidationContext::get_SelectedMemberDescription()": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.Equivalency.EquivalencyValidationContext::get_Subject()": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.Equivalency.EquivalencyValidationContext::get_Expectation()": {
          "Lines": {
            "29": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.EquivalencyValidationContext::get_Because()": {
          "Lines": {
            "35": 0
          },
          "Branches": []
        },
        "System.Object[] FluentAssertions.Equivalency.EquivalencyValidationContext::get_BecauseArgs()": {
          "Lines": {
            "40": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.EquivalencyValidationContext::get_IsRoot()": {
          "Lines": {
            "50": 0,
            "51": 0,
            "52": 0
          },
          "Branches": [
            {
              "Line": 50,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 37,
              "EndOffset": 39,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 19,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 37,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 11,
              "EndOffset": 61,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Type FluentAssertions.Equivalency.EquivalencyValidationContext::get_CompileTimeType()": {
          "Lines": {
            "65": 0
          },
          "Branches": [
            {
              "Line": 65,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 29,
              "EndOffset": 31,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 21,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 29,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyValidationContext::set_CompileTimeType(System.Type)": {
          "Lines": {
            "67": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.EquivalencyValidationContext::get_RuntimeType()": {
          "Lines": {
            "77": 0,
            "79": 0,
            "82": 0,
            "84": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 77,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 6,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 26,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EquivalencyValidationContext::get_RootIsCollection()": {
          "Lines": {
            "95": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.ITraceWriter FluentAssertions.Equivalency.EquivalencyValidationContext::get_Tracer()": {
          "Lines": {
            "97": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyValidationContext::TraceSingle(FluentAssertions.Equivalency.GetTraceMessage)": {
          "Lines": {
            "101": 0,
            "103": 0,
            "104": 0,
            "106": 0
          },
          "Branches": [
            {
              "Line": 101,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 103,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 103,
              "Offset": 20,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 6,
              "EndOffset": 54,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.IDisposable FluentAssertions.Equivalency.EquivalencyValidationContext::TraceBlock(FluentAssertions.Equivalency.GetTraceMessage)": {
          "Lines": {
            "110": 0,
            "112": 0,
            "113": 0,
            "117": 0
          },
          "Branches": [
            {
              "Line": 110,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 20,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 110,
              "Offset": 6,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 117,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 117,
              "Offset": 61,
              "EndOffset": 86,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.EquivalencyValidationContext::ToString()": {
          "Lines": {
            "123": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyValidationContext::.ctor()": {
          "Lines": {
            "9": 0,
            "11": 0,
            "12": 0,
            "13": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EquivalencyValidationContextExtentions.cs": {
      "FluentAssertions.Equivalency.EquivalencyValidationContextExtentions": {
        "FluentAssertions.Equivalency.IEquivalencyValidationContext FluentAssertions.Equivalency.EquivalencyValidationContextExtentions::CreateForNestedMember(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.SelectedMemberInfo,FluentAssertions.Equivalency.SelectedMemberInfo)": {
          "Lines": {
            "11": 0,
            "12": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": [
            {
              "Line": 12,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 12,
              "Offset": 18,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.IEquivalencyValidationContext FluentAssertions.Equivalency.EquivalencyValidationContextExtentions::CreateForCollectionItem(FluentAssertions.Equivalency.IEquivalencyValidationContext,System.String,System.Object,T)": {
          "Lines": {
            "32": 0,
            "33": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0
          },
          "Branches": [
            {
              "Line": 33,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 28,
              "EndOffset": 48,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.IEquivalencyValidationContext FluentAssertions.Equivalency.EquivalencyValidationContextExtentions::CreateForDictionaryItem(FluentAssertions.Equivalency.IEquivalencyValidationContext,TKey,System.Object,TExpectation)": {
          "Lines": {
            "56": 0,
            "57": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "71": 0
          },
          "Branches": [
            {
              "Line": 57,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 33,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.IEquivalencyValidationContext FluentAssertions.Equivalency.EquivalencyValidationContextExtentions::CreateWithDifferentSubject(FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Object,System.Type)": {
          "Lines": {
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\EquivalencyValidator.cs": {
      "FluentAssertions.Equivalency.EquivalencyValidator": {
        "System.Void FluentAssertions.Equivalency.EquivalencyValidator::AssertEquality(FluentAssertions.Equivalency.EquivalencyValidationContext)": {
          "Lines": {
            "31": 0,
            "33": 0,
            "34": 0,
            "36": 0,
            "38": 0,
            "40": 0,
            "42": 0,
            "44": 0,
            "45": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 87,
              "EndOffset": 89,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 87,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EquivalencyValidator::IsComplexType(System.Object)": {
          "Lines": {
            "49": 0,
            "50": 0,
            "52": 0,
            "54": 0,
            "56": 0,
            "57": 0,
            "60": 0
          },
          "Branches": [
            {
              "Line": 49,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 1,
              "EndOffset": 5,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 54,
              "Offset": 26,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyValidator::AssertEqualityUsing(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "65": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "72": 0,
            "74": 0,
            "75": 0,
            "77": 0,
            "79": 0,
            "81": 0,
            "83": 0,
            "85": 0,
            "87": 0,
            "88": 0,
            "93": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "101": 0
          },
          "Branches": [
            {
              "Line": 65,
              "Offset": 12,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 68,
              "Offset": 35,
              "EndOffset": 37,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 68,
              "Offset": 35,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 144,
              "EndOffset": 146,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 215,
              "EndOffset": 162,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 185,
              "EndOffset": 187,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 202,
              "EndOffset": 204,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 83,
              "Offset": 185,
              "EndOffset": 208,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 202,
              "EndOffset": 208,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 81,
              "Offset": 215,
              "EndOffset": 217,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 232,
              "EndOffset": 234,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 65,
              "Offset": 12,
              "EndOffset": 256,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 144,
              "EndOffset": 256,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 232,
              "EndOffset": 256,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EquivalencyValidator::ContinueRecursion(System.String)": {
          "Lines": {
            "105": 0,
            "107": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "120": 0
          },
          "Branches": [
            {
              "Line": 105,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 11,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 19,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.EquivalencyValidator::HasReachedMaximumRecursionDepth(System.String)": {
          "Lines": {
            "125": 0,
            "127": 0
          },
          "Branches": [
            {
              "Line": 125,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 125,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.EquivalencyValidator::.ctor(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "20": 0,
            "24": 0,
            "26": 0,
            "27": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\FieldSelectedMemberInfo.cs": {
      "FluentAssertions.Equivalency.FieldSelectedMemberInfo": {
        "System.Object FluentAssertions.Equivalency.FieldSelectedMemberInfo::GetValue(System.Object,System.Object[])": {
          "Lines": {
            "23": 0,
            "25": 0,
            "28": 0
          },
          "Branches": [
            {
              "Line": 23,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 1,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 9,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Type FluentAssertions.Equivalency.FieldSelectedMemberInfo::get_MemberType()": {
          "Lines": {
            "31": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Equivalency.FieldSelectedMemberInfo::GetGetAccessModifier()": {
          "Lines": {
            "33": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Equivalency.FieldSelectedMemberInfo::GetSetAccessModifier()": {
          "Lines": {
            "35": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.FieldSelectedMemberInfo::.ctor(System.Reflection.FieldInfo)": {
          "Lines": {
            "16": 0,
            "18": 0,
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\GenericDictionaryEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "19": 0,
            "21": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 14,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "27": 0,
            "29": 0,
            "32": 0
          },
          "Branches": [
            {
              "Line": 27,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 27,
              "Offset": 7,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Type[] FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::GetIDictionaryInterfaces(System.Type)": {
          "Lines": {
            "37": 0,
            "38": 0,
            "39": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::PreconditionsAreMet(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "44": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 46,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 19,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 38,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 46,
              "Offset": 52,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertExpectationIsNotNull(System.Object,System.Object)": {
          "Lines": {
            "54": 0,
            "55": 0,
            "56": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertImplementsOnlyOneDictionaryInterface(System.Object)": {
          "Lines": {
            "61": 0,
            "62": 0,
            "63": 0,
            "65": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "76": 0
          },
          "Branches": [
            {
              "Line": 63,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 63,
              "Offset": 18,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertIsCompatiblyTypedDictionary(System.Type,System.Object)": {
          "Lines": {
            "81": 0,
            "82": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "88": 0,
            "89": 0,
            "91": 0,
            "94": 0,
            "95": 0,
            "97": 0,
            "100": 0,
            "101": 0,
            "103": 0,
            "106": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "117": 0,
            "120": 0
          },
          "Branches": [
            {
              "Line": 86,
              "Offset": 45,
              "EndOffset": 47,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 45,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 97,
              "Offset": 109,
              "EndOffset": 111,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 97,
              "Offset": 109,
              "EndOffset": 135,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 142,
              "EndOffset": 144,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 106,
              "Offset": 142,
              "EndOffset": 195,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Type FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::GetDictionaryKeyType(System.Type)": {
          "Lines": {
            "125": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertSameLength(System.Object,System.Type,System.Object)": {
          "Lines": {
            "130": 0,
            "131": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "141": 0,
            "142": 0,
            "143": 0,
            "145": 0
          },
          "Branches": []
        },
        "System.Type[] FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::GetDictionaryTypeArguments(System.Type)": {
          "Lines": {
            "150": 0,
            "152": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::GetIDictionaryInterface(System.Type)": {
          "Lines": {
            "157": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertSameLength(System.Collections.Generic.IDictionary`2<TSubjectKey,TSubjectValue>,System.Collections.Generic.IDictionary`2<TExpectedKey,TExpectedValue>)": {
          "Lines": {
            "168": 0,
            "170": 0,
            "173": 0,
            "175": 0,
            "176": 0,
            "178": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "184": 0,
            "185": 0,
            "186": 0,
            "187": 0
          },
          "Branches": [
            {
              "Line": 168,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 168,
              "Offset": 12,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 178,
              "Offset": 128,
              "EndOffset": 130,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 178,
              "Offset": 128,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 178,
              "Offset": 173,
              "EndOffset": 175,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 178,
              "Offset": 173,
              "EndOffset": 181,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep/KeyDifference`2<TSubjectKey,TExpectedKey> FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::CalculateKeyDifference(System.Collections.Generic.IDictionary`2<TSubjectKey,TSubjectValue>,System.Collections.Generic.IDictionary`2<TExpectedKey,TExpectedValue>)": {
          "Lines": {
            "195": 0,
            "196": 0,
            "198": 0,
            "200": 0,
            "202": 0,
            "203": 0,
            "206": 0,
            "210": 0,
            "211": 0,
            "213": 0,
            "215": 0,
            "219": 0
          },
          "Branches": [
            {
              "Line": 198,
              "Offset": 89,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 200,
              "Offset": 52,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 198,
              "Offset": 89,
              "EndOffset": 91,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 211,
              "Offset": 158,
              "EndOffset": 124,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 141,
              "EndOffset": 143,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 213,
              "Offset": 141,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 211,
              "Offset": 158,
              "EndOffset": 160,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertDictionaryEquivalence(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "225": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "231": 0,
            "232": 0,
            "233": 0,
            "234": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "239": 0,
            "240": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "244": 0,
            "246": 0,
            "247": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep::AssertDictionaryEquivalence(FluentAssertions.Equivalency.EquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions,System.Collections.Generic.IDictionary`2<TSubjectKey,TSubjectValue>,System.Collections.Generic.IDictionary`2<TExpectedKey,TExpectedValue>)": {
          "Lines": {
            "257": 0,
            "259": 0,
            "261": 0,
            "263": 0,
            "264": 0,
            "267": 0,
            "269": 0,
            "272": 0,
            "275": 0
          },
          "Branches": [
            {
              "Line": 257,
              "Offset": 164,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 259,
              "Offset": 44,
              "EndOffset": 46,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 261,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 261,
              "Offset": 52,
              "EndOffset": 83,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 259,
              "Offset": 44,
              "EndOffset": 127,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 257,
              "Offset": 164,
              "EndOffset": 169,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep/KeyDifference`2": {
        "System.Collections.Generic.List`1<TExpectedKey> FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep/KeyDifference`2::get_MissingKeys()": {
          "Lines": {
            "285": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.List`1<TSubjectKey> FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep/KeyDifference`2::get_AdditionalKeys()": {
          "Lines": {
            "287": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.GenericDictionaryEquivalencyStep/KeyDifference`2::.ctor(System.Collections.Generic.List`1<TExpectedKey>,System.Collections.Generic.List`1<TSubjectKey>)": {
          "Lines": {
            "279": 0,
            "281": 0,
            "282": 0,
            "283": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\GenericEnumerableEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "18": 0,
            "20": 0
          },
          "Branches": [
            {
              "Line": 20,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 14,
              "EndOffset": 23,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "36": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "47": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "55": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "70": 0,
            "71": 0,
            "74": 0,
            "78": 0
          },
          "Branches": [
            {
              "Line": 38,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 20,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 113,
              "EndOffset": 118,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 139,
              "EndOffset": 141,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 139,
              "EndOffset": 149,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 113,
              "EndOffset": 404,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::AssertSubjectIsCollection(System.Object,System.Object)": {
          "Lines": {
            "83": 0,
            "84": 0,
            "85": 0,
            "87": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "94": 0
          },
          "Branches": [
            {
              "Line": 87,
              "Offset": 37,
              "EndOffset": 39,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 37,
              "EndOffset": 90,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::IsGenericCollection(System.Type)": {
          "Lines": {
            "99": 0,
            "101": 0
          },
          "Branches": [
            {
              "Line": 101,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 23,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Type[] FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::GetIEnumerableInterfaces(System.Type)": {
          "Lines": {
            "106": 0,
            "108": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::GetTypeOfEnumeration(System.Type)": {
          "Lines": {
            "113": 0,
            "115": 0
          },
          "Branches": []
        },
        "System.Linq.Expressions.MethodCallExpression FluentAssertions.Equivalency.GenericEnumerableEquivalencyStep::ToArray(System.Object,System.Type)": {
          "Lines": {
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\MemberInfoSelectedMemberInfo.cs": {
      "FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo": {
        "System.String FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo::get_Name()": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo::get_DeclaringType()": {
          "Lines": {
            "20": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo::Equals(FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo)": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo::Equals(System.Object)": {
          "Lines": {
            "29": 0,
            "31": 0,
            "34": 0,
            "36": 0,
            "39": 0,
            "41": 0,
            "44": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 1,
              "EndOffset": 5,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 34,
              "Offset": 7,
              "EndOffset": 11,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 28,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Int32 FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo::GetHashCode()": {
          "Lines": {
            "49": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.MemberInfoSelectedMemberInfo::.ctor(System.Reflection.MemberInfo)": {
          "Lines": {
            "13": 0,
            "15": 0,
            "16": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\MultiDimensionalArrayEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "16": 0,
            "17": 0
          },
          "Branches": [
            {
              "Line": 17,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 12,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "23": 0,
            "25": 0,
            "27": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "39": 0,
            "41": 0,
            "44": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 108,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 19,
              "EndOffset": 110,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 41,
              "Offset": 108,
              "EndOffset": 110,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.Digit FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::BuildDigitsRepresentingAllIndices(System.Array)": {
          "Lines": {
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::AreComparable(FluentAssertions.Equivalency.IEquivalencyValidationContext,System.Array)": {
          "Lines": {
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0
          },
          "Branches": [
            {
              "Line": 57,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 11,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 25,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::IsArray(System.Object)": {
          "Lines": {
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::HaveSameDimensions(System.Object,System.Array)": {
          "Lines": {
            "75": 0,
            "77": 0,
            "79": 0,
            "80": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "88": 0
          },
          "Branches": [
            {
              "Line": 77,
              "Offset": 103,
              "EndOffset": 6,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 103,
              "EndOffset": 105,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.MultiDimensionalArrayEquivalencyStep::HaveSameRank(System.Object,System.Array)": {
          "Lines": {
            "93": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "98": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.Digit": {
        "System.Int32[] FluentAssertions.Equivalency.Digit::get_Indices()": {
          "Lines": {
            "118": 0,
            "120": 0,
            "121": 0,
            "123": 0,
            "124": 0,
            "127": 0
          },
          "Branches": [
            {
              "Line": 121,
              "Offset": 30,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 121,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.Digit::Increment()": {
          "Lines": {
            "133": 0,
            "134": 0,
            "136": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "143": 0,
            "147": 0
          },
          "Branches": [
            {
              "Line": 133,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 7,
              "EndOffset": 13,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 134,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 136,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 136,
              "Offset": 36,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 134,
              "Offset": 20,
              "EndOffset": 63,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.Digit::.ctor(System.Int32,FluentAssertions.Equivalency.Digit)": {
          "Lines": {
            "108": 0,
            "110": 0,
            "111": 0,
            "112": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\ObjectReference.cs": {
      "FluentAssertions.Equivalency.ObjectReference": {
        "System.Boolean FluentAssertions.Equivalency.ObjectReference::Equals(System.Object)": {
          "Lines": {
            "37": 0,
            "39": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 8,
              "EndOffset": 12,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 24,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.ObjectReference::IsParentOf(FluentAssertions.Equivalency.ObjectReference)": {
          "Lines": {
            "47": 0
          },
          "Branches": [
            {
              "Line": 47,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 47,
              "Offset": 16,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Int32 FluentAssertions.Equivalency.ObjectReference::GetHashCode()": {
          "Lines": {
            "61": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.ObjectReference::ToString()": {
          "Lines": {
            "67": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.ObjectReference::get_IsComplexType()": {
          "Lines": {
            "70": 0
          },
          "Branches": [
            {
              "Line": 70,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 22,
              "EndOffset": 44,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 14,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.ObjectReference::.ctor(System.Object,System.String,System.Nullable`1<System.Boolean>)": {
          "Lines": {
            "16": 0,
            "18": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\OrderingRuleCollection.cs": {
      "FluentAssertions.Equivalency.OrderingRuleCollection": {
        "System.Collections.Generic.IEnumerator`1<FluentAssertions.Equivalency.IOrderingRule> FluentAssertions.Equivalency.OrderingRuleCollection::GetEnumerator()": {
          "Lines": {
            "39": 0
          },
          "Branches": []
        },
        "System.Collections.IEnumerator FluentAssertions.Equivalency.OrderingRuleCollection::System.Collections.IEnumerable.GetEnumerator()": {
          "Lines": {
            "51": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.OrderingRuleCollection::Add(FluentAssertions.Equivalency.IOrderingRule)": {
          "Lines": {
            "56": 0,
            "57": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.OrderingRuleCollection::IsOrderingStrictFor(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "65": 0,
            "66": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 49,
              "EndOffset": 62,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.OrderingRuleCollection::.ctor()": {
          "Lines": {
            "13": 0,
            "18": 0,
            "20": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.OrderingRuleCollection::.ctor(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.IOrderingRule>)": {
          "Lines": {
            "25": 0,
            "27": 0,
            "28": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\PropertySelectedMemberInfo.cs": {
      "FluentAssertions.Equivalency.PropertySelectedMemberInfo": {
        "System.Type FluentAssertions.Equivalency.PropertySelectedMemberInfo::get_MemberType()": {
          "Lines": {
            "20": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Equivalency.PropertySelectedMemberInfo::GetGetAccessModifier()": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Equivalency.PropertySelectedMemberInfo::GetSetAccessModifier()": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.Equivalency.PropertySelectedMemberInfo::GetValue(System.Object,System.Object[])": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.PropertySelectedMemberInfo::.ctor(System.Reflection.PropertyInfo)": {
          "Lines": {
            "15": 0,
            "17": 0,
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\ReferenceEqualityEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.ReferenceEqualityEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.ReferenceEqualityEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "10": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.ReferenceEqualityEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "25": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\RunAllUserStepsEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.RunAllUserStepsEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.RunAllUserStepsEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.RunAllUserStepsEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.RunAllUserStepsEquivalencyStep/<>c__DisplayClass1_0": {
        "System.Boolean FluentAssertions.Equivalency.RunAllUserStepsEquivalencyStep/<>c__DisplayClass1_0::<Handle>b__0(FluentAssertions.Equivalency.IEquivalencyStep)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 20,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 18,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\SelectedMemberInfo.cs": {
      "FluentAssertions.Equivalency.SelectedMemberInfo": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.SelectedMemberInfo::Create(System.Reflection.PropertyInfo)": {
          "Lines": {
            "14": 0,
            "16": 0,
            "19": 0
          },
          "Branches": [
            {
              "Line": 14,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 7,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 15,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.SelectedMemberInfo::Create(System.Reflection.FieldInfo)": {
          "Lines": {
            "24": 0,
            "26": 0,
            "29": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 7,
              "EndOffset": 11,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\SelfReferenceEquivalencyAssertionOptions.cs": {
      "FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1": {
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.IMemberMatchingRule> FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_MatchingRules()": {
          "Lines": {
            "123": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.IEquivalencyStep> FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_UserEquivalencySteps()": {
          "Lines": {
            "129": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.ConversionSelector FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::get_ConversionSelector()": {
          "Lines": {
            "131": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.OrderingRuleCollection FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_OrderingRules()": {
          "Lines": {
            "138": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_IsRecursive()": {
          "Lines": {
            "143": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_AllowInfiniteRecursion()": {
          "Lines": {
            "145": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.CyclicReferenceHandling FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_CyclicReferenceHandling()": {
          "Lines": {
            "150": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EnumEquivalencyHandling FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_EnumEquivalencyHandling()": {
          "Lines": {
            "152": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_UseRuntimeTyping()": {
          "Lines": {
            "154": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_IncludeProperties()": {
          "Lines": {
            "156": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_IncludeFields()": {
          "Lines": {
            "158": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.EqualityStrategy FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::FluentAssertions.Equivalency.IEquivalencyAssertionOptions.GetEqualityStrategy(System.Type)": {
          "Lines": {
            "164": 0,
            "166": 0,
            "167": 0,
            "168": 0,
            "170": 0,
            "171": 0,
            "174": 0,
            "176": 0,
            "177": 0,
            "180": 0,
            "182": 0,
            "184": 0,
            "185": 0,
            "188": 0,
            "193": 0
          },
          "Branches": [
            {
              "Line": 164,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 164,
              "Offset": 23,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 168,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 168,
              "Offset": 52,
              "EndOffset": 58,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 174,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 174,
              "Offset": 64,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 180,
              "Offset": 94,
              "EndOffset": 96,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 180,
              "Offset": 94,
              "EndOffset": 119,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 124,
              "EndOffset": 126,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 182,
              "Offset": 124,
              "EndOffset": 130,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.ITraceWriter FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::get_TraceWriter()": {
          "Lines": {
            "196": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::IncludingAllDeclaredProperties()": {
          "Lines": {
            "206": 0,
            "208": 0,
            "209": 0,
            "211": 0,
            "213": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::IncludingAllRuntimeProperties()": {
          "Lines": {
            "224": 0,
            "226": 0,
            "227": 0,
            "229": 0,
            "231": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::IncludingFields()": {
          "Lines": {
            "242": 0,
            "243": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ExcludingFields()": {
          "Lines": {
            "254": 0,
            "255": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::IncludingProperties()": {
          "Lines": {
            "266": 0,
            "267": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ExcludingProperties()": {
          "Lines": {
            "278": 0,
            "279": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::RespectingRuntimeTypes()": {
          "Lines": {
            "287": 0,
            "288": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::RespectingDeclaredTypes()": {
          "Lines": {
            "296": 0,
            "297": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::Excluding(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "305": 0,
            "306": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ExcludingMissingMembers()": {
          "Lines": {
            "315": 0,
            "316": 0,
            "317": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ThrowingOnMissingMembers()": {
          "Lines": {
            "326": 0,
            "327": 0,
            "328": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/Restriction`1<TSelf,TProperty> FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::Using(System.Action`1<FluentAssertions.Equivalency.IAssertionContext`1<TProperty>>)": {
          "Lines": {
            "337": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::IncludingNestedObjects()": {
          "Lines": {
            "345": 0,
            "346": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ExcludingNestedObjects()": {
          "Lines": {
            "357": 0,
            "358": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::IgnoringCyclicReferences()": {
          "Lines": {
            "369": 0,
            "370": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::AllowingInfiniteRecursion()": {
          "Lines": {
            "378": 0,
            "379": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithoutSelectionRules()": {
          "Lines": {
            "387": 0,
            "388": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithoutMatchingRules()": {
          "Lines": {
            "395": 0,
            "396": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::Using(FluentAssertions.Equivalency.IMemberSelectionRule)": {
          "Lines": {
            "403": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::Using(FluentAssertions.Equivalency.IMemberMatchingRule)": {
          "Lines": {
            "411": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::Using(FluentAssertions.Equivalency.IAssertionRule)": {
          "Lines": {
            "419": 0,
            "420": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::Using(FluentAssertions.Equivalency.IEquivalencyStep)": {
          "Lines": {
            "429": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithStrictOrdering()": {
          "Lines": {
            "437": 0,
            "438": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithStrictOrderingFor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "447": 0,
            "448": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithoutStrictOrderingFor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "457": 0,
            "458": 0,
            "459": 0,
            "460": 0,
            "462": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ComparingEnumsByName()": {
          "Lines": {
            "473": 0,
            "474": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ComparingEnumsByValue()": {
          "Lines": {
            "485": 0,
            "486": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ComparingByMembers()": {
          "Lines": {
            "495": 0,
            "497": 0,
            "498": 0,
            "501": 0,
            "502": 0
          },
          "Branches": [
            {
              "Line": 495,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 495,
              "Offset": 32,
              "EndOffset": 70,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ComparingByValue()": {
          "Lines": {
            "511": 0,
            "513": 0,
            "514": 0,
            "517": 0,
            "518": 0
          },
          "Branches": [
            {
              "Line": 511,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 511,
              "Offset": 32,
              "EndOffset": 70,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithTracing(FluentAssertions.Equivalency.ITraceWriter)": {
          "Lines": {
            "526": 0,
            "527": 0
          },
          "Branches": [
            {
              "Line": 526,
              "Offset": 3,
              "EndOffset": 5,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 526,
              "Offset": 3,
              "EndOffset": 11,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithAutoConversion()": {
          "Lines": {
            "536": 0,
            "537": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithAutoConversionFor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "546": 0,
            "547": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::WithoutAutoConversionFor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "556": 0,
            "557": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ToString()": {
          "Lines": {
            "569": 0,
            "571": 0,
            "572": 0,
            "573": 0,
            "575": 0,
            "577": 0,
            "579": 0,
            "583": 0,
            "584": 0,
            "586": 0,
            "588": 0,
            "591": 0,
            "593": 0,
            "596": 0,
            "598": 0,
            "601": 0,
            "603": 0,
            "606": 0,
            "608": 0,
            "611": 0
          },
          "Branches": [
            {
              "Line": 571,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 571,
              "Offset": 23,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 575,
              "Offset": 59,
              "EndOffset": 61,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 577,
              "Offset": 67,
              "EndOffset": 69,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 575,
              "Offset": 59,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 577,
              "Offset": 67,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 583,
              "Offset": 104,
              "EndOffset": 106,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 583,
              "Offset": 104,
              "EndOffset": 113,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 586,
              "Offset": 130,
              "EndOffset": 132,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 586,
              "Offset": 130,
              "EndOffset": 144,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 591,
              "Offset": 196,
              "EndOffset": 158,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 591,
              "Offset": 196,
              "EndOffset": 198,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 596,
              "Offset": 268,
              "EndOffset": 228,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 596,
              "Offset": 268,
              "EndOffset": 270,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 601,
              "Offset": 341,
              "EndOffset": 301,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            },
            {
              "Line": 601,
              "Offset": 341,
              "EndOffset": 343,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 606,
              "Offset": 414,
              "EndOffset": 374,
              "Path": 1,
              "Ordinal": 17,
              "Hits": 0
            },
            {
              "Line": 606,
              "Offset": 414,
              "EndOffset": 416,
              "Path": 0,
              "Ordinal": 16,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::RemoveSelectionRule()": {
          "Lines": {
            "658": 0,
            "659": 0
          },
          "Branches": [
            {
              "Line": 658,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 658,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::ClearMatchingRules()": {
          "Lines": {
            "663": 0,
            "664": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::AddSelectionRule(FluentAssertions.Equivalency.IMemberSelectionRule)": {
          "Lines": {
            "668": 0,
            "669": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::AddMatchingRule(FluentAssertions.Equivalency.IMemberMatchingRule)": {
          "Lines": {
            "674": 0,
            "675": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::AddEquivalencyStep(FluentAssertions.Equivalency.IEquivalencyStep)": {
          "Lines": {
            "680": 0,
            "681": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::.ctor()": {
          "Lines": {
            "24": 0,
            "27": 0,
            "30": 0,
            "33": 0,
            "36": 0,
            "51": 0,
            "53": 0,
            "54": 0,
            "60": 0,
            "62": 0,
            "64": 0,
            "65": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1::.ctor(FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "70": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "76": 0,
            "77": 0,
            "78": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "86": 0,
            "87": 0,
            "89": 0,
            "90": 0,
            "91": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/Restriction`1": {
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/Restriction`1::WhenTypeIs()": {
          "Lines": {
            "634": 0,
            "635": 0
          },
          "Branches": []
        },
        "TSelf FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/Restriction`1::When(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "648": 0,
            "649": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/Restriction`1::.ctor(TSelf,System.Action`1<FluentAssertions.Equivalency.IAssertionContext`1<TMember>>)": {
          "Lines": {
            "622": 0,
            "624": 0,
            "625": 0,
            "626": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/<>c": {
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/<>c::<FluentAssertions.Equivalency.IEquivalencyAssertionOptions.get_SelectionRules>b__18_0(FluentAssertions.Equivalency.IMemberSelectionRule)": {
          "Lines": {
            "100": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/<FluentAssertions-Equivalency-IEquivalencyAssertionOptions-get_SelectionRules>d__18": {
        "System.Boolean FluentAssertions.Equivalency.SelfReferenceEquivalencyAssertionOptions`1/<FluentAssertions-Equivalency-IEquivalencyAssertionOptions-get_SelectionRules>d__18::MoveNext()": {
          "Lines": {
            "102": 0,
            "104": 0,
            "107": 0,
            "109": 0,
            "112": 0,
            "114": 0,
            "116": 0
          },
          "Branches": [
            {
              "Line": 100,
              "Offset": 63,
              "EndOffset": 65,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 100,
              "Offset": 63,
              "EndOffset": 88,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 104,
              "EndOffset": 106,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 112,
              "EndOffset": 114,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 104,
              "EndOffset": 146,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 102,
              "Offset": 112,
              "EndOffset": 146,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 152,
              "EndOffset": 154,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 160,
              "EndOffset": 162,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 152,
              "EndOffset": 191,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 107,
              "Offset": 160,
              "EndOffset": 191,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 267,
              "EndOffset": 218,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 112,
              "Offset": 267,
              "EndOffset": 269,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\SimpleEqualityEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.SimpleEqualityEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.SimpleEqualityEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "10": 0
          },
          "Branches": [
            {
              "Line": 10,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 10,
              "Offset": 6,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.SimpleEqualityEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "25": 0,
            "27": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\StringEqualityEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.StringEqualityEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.StringEqualityEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "15": 0,
            "17": 0
          },
          "Branches": [
            {
              "Line": 17,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 15,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.StringEqualityEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "32": 0,
            "34": 0,
            "37": 0,
            "38": 0,
            "40": 0,
            "41": 0,
            "43": 0,
            "44": 0,
            "47": 0
          },
          "Branches": [
            {
              "Line": 32,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 6,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 16,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.StringEqualityEquivalencyStep::ValidateAgainstNulls(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "52": 0,
            "53": 0,
            "55": 0,
            "56": 0,
            "58": 0,
            "60": 0,
            "62": 0,
            "63": 0,
            "65": 0,
            "68": 0
          },
          "Branches": [
            {
              "Line": 55,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 15,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 21,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 18,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 58,
              "Offset": 33,
              "EndOffset": 85,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.StringEqualityEquivalencyStep::ValidateAgainstType(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "73": 0,
            "74": 0,
            "77": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0
          },
          "Branches": [
            {
              "Line": 74,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 74,
              "Offset": 9,
              "EndOffset": 13,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.StringEqualityEquivalencyStep::GetSubjectDescription(FluentAssertions.Equivalency.IEquivalencyValidationContext)": {
          "Lines": {
            "89": 0
          },
          "Branches": [
            {
              "Line": 89,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 11,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\StructuralEqualityEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.StructuralEqualityEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.StructuralEqualityEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "15": 0
          },
          "Branches": [
            {
              "Line": 15,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 15,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.StructuralEqualityEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "34": 0,
            "35": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "42": 0,
            "44": 0,
            "46": 0,
            "50": 0
          },
          "Branches": [
            {
              "Line": 35,
              "Offset": 129,
              "EndOffset": 131,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 137,
              "EndOffset": 139,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 129,
              "EndOffset": 150,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 137,
              "EndOffset": 150,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 153,
              "EndOffset": 155,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 189,
              "EndOffset": 162,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 153,
              "EndOffset": 191,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 189,
              "EndOffset": 191,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.StructuralEqualityEquivalencyStep::AssertMemberEquality(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.SelectedMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "55": 0,
            "56": 0,
            "58": 0,
            "59": 0,
            "61": 0,
            "63": 0,
            "66": 0
          },
          "Branches": [
            {
              "Line": 56,
              "Offset": 10,
              "EndOffset": 12,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 56,
              "Offset": 10,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 22,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.StructuralEqualityEquivalencyStep::FindMatchFor(FluentAssertions.Equivalency.SelectedMemberInfo,FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "76": 0
          },
          "Branches": [
            {
              "Line": 70,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 61,
              "EndOffset": 86,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 97,
              "EndOffset": 99,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 70,
              "Offset": 97,
              "EndOffset": 122,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.StructuralEqualityEquivalencyStep::GetSelectedMembers(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "82": 0,
            "84": 0,
            "86": 0,
            "89": 0
          },
          "Branches": [
            {
              "Line": 84,
              "Offset": 41,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\SubjectInfoExtensions.cs": {
      "FluentAssertions.Equivalency.SubjectInfoExtensions": {
        "System.Boolean FluentAssertions.Equivalency.SubjectInfoExtensions::WhichSetterHas(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)": {
          "Lines": {
            "15": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SubjectInfoExtensions::WhichSetterDoesNotHave(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)": {
          "Lines": {
            "26": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SubjectInfoExtensions::WhichGetterHas(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)": {
          "Lines": {
            "37": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.SubjectInfoExtensions::WhichGetterDoesNotHave(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Common.CSharpAccessModifier)": {
          "Lines": {
            "48": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\TryConversionStep.cs": {
      "FluentAssertions.Equivalency.TryConversionStep": {
        "System.Boolean FluentAssertions.Equivalency.TryConversionStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "27": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.TryConversionStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "43": 0,
            "45": 0,
            "48": 0,
            "49": 0,
            "51": 0,
            "53": 0,
            "56": 0,
            "58": 0,
            "60": 0,
            "62": 0,
            "63": 0,
            "66": 0,
            "68": 0
          },
          "Branches": [
            {
              "Line": 43,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 24,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 37,
              "EndOffset": 39,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 37,
              "EndOffset": 41,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 51,
              "Offset": 90,
              "EndOffset": 92,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 51,
              "Offset": 90,
              "EndOffset": 94,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 56,
              "Offset": 118,
              "EndOffset": 120,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 56,
              "Offset": 118,
              "EndOffset": 171,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.TryConversionStep::TryChangeType(System.Object,System.Type,System.Object&)": {
          "Lines": {
            "73": 0,
            "76": 0,
            "77": 0,
            "79": 0,
            "81": 0,
            "82": 0,
            "84": 0,
            "86": 0,
            "87": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.TryConversionStep::ToString()": {
          "Lines": {
            "91": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.TryConversionStep::.ctor(FluentAssertions.Equivalency.ConversionSelector)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\ValueTypeEquivalencyStep.cs": {
      "FluentAssertions.Equivalency.ValueTypeEquivalencyStep": {
        "System.Boolean FluentAssertions.Equivalency.ValueTypeEquivalencyStep::CanHandle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "16": 0,
            "17": 0,
            "19": 0,
            "20": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "31": 0
          },
          "Branches": [
            {
              "Line": 19,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 33,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 48,
              "EndOffset": 50,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 48,
              "EndOffset": 68,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.ValueTypeEquivalencyStep::Handle(FluentAssertions.Equivalency.IEquivalencyValidationContext,FluentAssertions.Equivalency.IEquivalencyValidator,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "46": 0,
            "48": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Equivalency.ValueTypeEquivalencyStep/<>c__DisplayClass0_0": {
        "System.String FluentAssertions.Equivalency.ValueTypeEquivalencyStep/<>c__DisplayClass0_0::<CanHandle>b__0(System.String)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 24,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Tracing\\StringBuilderTraceWriter.cs": {
      "FluentAssertions.Equivalency.StringBuilderTraceWriter": {
        "System.Void FluentAssertions.Equivalency.StringBuilderTraceWriter::AddSingle(System.String)": {
          "Lines": {
            "13": 0,
            "14": 0
          },
          "Branches": []
        },
        "System.IDisposable FluentAssertions.Equivalency.StringBuilderTraceWriter::AddBlock(System.String)": {
          "Lines": {
            "18": 0,
            "19": 0,
            "20": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.StringBuilderTraceWriter::WriteLine(System.String)": {
          "Lines": {
            "31": 0,
            "33": 0,
            "35": 0
          },
          "Branches": [
            {
              "Line": 31,
              "Offset": 71,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 71,
              "EndOffset": 73,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.StringBuilderTraceWriter::ToString()": {
          "Lines": {
            "39": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.StringBuilderTraceWriter::.ctor()": {
          "Lines": {
            "8": 0,
            "9": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\AllPublicFieldsSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.AllPublicFieldsSelectionRule": {
        "System.Boolean FluentAssertions.Equivalency.Selection.AllPublicFieldsSelectionRule::get_IncludesMembers()": {
          "Lines": {
            "12": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.AllPublicFieldsSelectionRule::SelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "16": 0,
            "17": 0,
            "18": 0,
            "20": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.AllPublicFieldsSelectionRule::ToString()": {
          "Lines": {
            "32": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\AllPublicPropertiesSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.AllPublicPropertiesSelectionRule": {
        "System.Boolean FluentAssertions.Equivalency.Selection.AllPublicPropertiesSelectionRule::get_IncludesMembers()": {
          "Lines": {
            "12": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.AllPublicPropertiesSelectionRule::SelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "16": 0,
            "17": 0,
            "18": 0,
            "20": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.AllPublicPropertiesSelectionRule::ToString()": {
          "Lines": {
            "32": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\CollectionMemberSelectionRuleDecorator.cs": {
      "FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator": {
        "System.Boolean FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator::get_IncludesMembers()": {
          "Lines": {
            "14": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator::SelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator::ToString()": {
          "Lines": {
            "24": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.CollectionMemberSelectionRuleDecorator::.ctor(FluentAssertions.Equivalency.IMemberSelectionRule)": {
          "Lines": {
            "9": 0,
            "11": 0,
            "12": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\ExcludeMemberByPathSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule": {
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule::OnSelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,System.String,FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule::ToString()": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.ExcludeMemberByPathSelectionRule::.ctor(System.String)": {
          "Lines": {
            "15": 0,
            "17": 0,
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\ExcludeMemberByPredicateSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule": {
        "System.Boolean FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule::get_IncludesMembers()": {
          "Lines": {
            "22": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule::SelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "26": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule::ToString()": {
          "Lines": {
            "32": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.ExcludeMemberByPredicateSelectionRule::.ctor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "16": 0,
            "18": 0,
            "19": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\IncludeMemberByPathSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule": {
        "System.Boolean FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule::get_IncludesMembers()": {
          "Lines": {
            "20": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule::OnSelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,System.String,FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "30": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule::ToString()": {
          "Lines": {
            "35": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.IncludeMemberByPathSelectionRule::.ctor(System.String)": {
          "Lines": {
            "15": 0,
            "17": 0,
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\IncludeMemberByPredicateSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule": {
        "System.Boolean FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule::get_IncludesMembers()": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule::SelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "27": 0,
            "29": 0,
            "31": 0,
            "33": 0,
            "35": 0,
            "40": 0
          },
          "Branches": [
            {
              "Line": 29,
              "Offset": 107,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 67,
              "EndOffset": 69,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 87,
              "EndOffset": 89,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 67,
              "EndOffset": 101,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 87,
              "EndOffset": 101,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 29,
              "Offset": 107,
              "EndOffset": 109,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule::ToString()": {
          "Lines": {
            "46": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.IncludeMemberByPredicateSelectionRule::.ctor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "17": 0,
            "19": 0,
            "20": 0,
            "21": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\MemberPath.cs": {
      "FluentAssertions.Equivalency.Selection.MemberPath": {
        "System.Boolean FluentAssertions.Equivalency.Selection.MemberPath::IsParentOrChildOf(System.String)": {
          "Lines": {
            "21": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 7,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.Selection.MemberPath::IsChild(System.String)": {
          "Lines": {
            "26": 0,
            "28": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Equivalency.Selection.MemberPath::IsParent(System.String)": {
          "Lines": {
            "33": 0,
            "35": 0
          },
          "Branches": []
        },
        "System.String[] FluentAssertions.Equivalency.Selection.MemberPath::Segmentize(System.String)": {
          "Lines": {
            "40": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.MemberPath::.ctor(System.String)": {
          "Lines": {
            "12": 0,
            "14": 0,
            "16": 0,
            "17": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\NestedSelectionContext.cs": {
      "FluentAssertions.Equivalency.Selection.NestedSelectionContext": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.Selection.NestedSelectionContext::get_SelectedMemberInfo()": {
          "Lines": {
            "21": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.NestedSelectionContext::get_SelectedMemberPath()": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Selection.NestedSelectionContext::get_SelectedMemberDescription()": {
          "Lines": {
            "25": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.Selection.NestedSelectionContext::get_CompileTimeType()": {
          "Lines": {
            "31": 0
          },
          "Branches": []
        },
        "System.Type FluentAssertions.Equivalency.Selection.NestedSelectionContext::get_RuntimeType()": {
          "Lines": {
            "36": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Selection.NestedSelectionContext::.ctor(FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.SelectedMemberInfo)": {
          "Lines": {
            "12": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Selection\\SelectMemberByPathSelectionRule.cs": {
      "FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule": {
        "System.Boolean FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule::get_IncludesMembers()": {
          "Lines": {
            "15": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule::SelectMembers(System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo>,FluentAssertions.Equivalency.IMemberInfo,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "20": 0,
            "21": 0,
            "23": 0,
            "26": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 18,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule::ContainsIndexingQualifiers(System.String)": {
          "Lines": {
            "33": 0
          },
          "Branches": [
            {
              "Line": 33,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 11,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule::RemoveInitialIndexQualifier(System.String)": {
          "Lines": {
            "38": 0,
            "40": 0,
            "42": 0,
            "43": 0,
            "45": 0,
            "49": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 23,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 39,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.Selection.SelectMemberByPathSelectionRule::.ctor(System.String)": {
          "Lines": {
            "10": 0,
            "12": 0,
            "13": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Ordering\\ByteArrayOrderingRule.cs": {
      "FluentAssertions.Equivalency.Ordering.ByteArrayOrderingRule": {
        "FluentAssertions.Equivalency.OrderStrictness FluentAssertions.Equivalency.Ordering.ByteArrayOrderingRule::Evaluate(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "14": 0
          },
          "Branches": [
            {
              "Line": 14,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 21,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.Ordering.ByteArrayOrderingRule::ToString()": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Ordering\\CollectionMemberOrderingRuleDecorator.cs": {
      "FluentAssertions.Equivalency.Ordering.CollectionMemberOrderingRuleDecorator": {
        "FluentAssertions.Equivalency.OrderStrictness FluentAssertions.Equivalency.Ordering.CollectionMemberOrderingRuleDecorator::Evaluate(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "14": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Ordering.CollectionMemberOrderingRuleDecorator::ToString()": {
          "Lines": {
            "19": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Ordering.CollectionMemberOrderingRuleDecorator::.ctor(FluentAssertions.Equivalency.IOrderingRule)": {
          "Lines": {
            "7": 0,
            "9": 0,
            "10": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Ordering\\MatchAllOrderingRule.cs": {
      "FluentAssertions.Equivalency.Ordering.MatchAllOrderingRule": {
        "FluentAssertions.Equivalency.OrderStrictness FluentAssertions.Equivalency.Ordering.MatchAllOrderingRule::Evaluate(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Ordering.MatchAllOrderingRule::ToString()": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Ordering\\PathBasedOrderingRule.cs": {
      "FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule": {
        "FluentAssertions.Equivalency.OrderStrictness FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule::Evaluate(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "24": 0,
            "25": 0,
            "27": 0,
            "30": 0,
            "32": 0,
            "36": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 18,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 41,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule::ContainsIndexingQualifiers(System.String)": {
          "Lines": {
            "42": 0
          },
          "Branches": [
            {
              "Line": 42,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 42,
              "Offset": 11,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule::RemoveInitialIndexQualifier(System.String)": {
          "Lines": {
            "47": 0,
            "49": 0,
            "51": 0,
            "52": 0,
            "54": 0,
            "58": 0
          },
          "Branches": [
            {
              "Line": 49,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 39,
              "EndOffset": 41,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 49,
              "Offset": 23,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 39,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule::ToString()": {
          "Lines": {
            "63": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Ordering.PathBasedOrderingRule::.ctor(System.String)": {
          "Lines": {
            "14": 0,
            "16": 0,
            "17": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Ordering\\PredicateBasedOrderingRule.cs": {
      "FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule": {
        "System.Boolean FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule::get_Invert()": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "FluentAssertions.Equivalency.OrderStrictness FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule::Evaluate(FluentAssertions.Equivalency.IMemberInfo)": {
          "Lines": {
            "24": 0,
            "26": 0,
            "30": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 20,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 12,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule::ToString()": {
          "Lines": {
            "36": 0
          },
          "Branches": [
            {
              "Line": 36,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 11,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Equivalency.Ordering.PredicateBasedOrderingRule::.ctor(System.Linq.Expressions.Expression`1<System.Func`2<FluentAssertions.Equivalency.IMemberInfo,System.Boolean>>)": {
          "Lines": {
            "11": 0,
            "13": 0,
            "14": 0,
            "15": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Matching\\CollectionMemberMatchingRuleDecorator.cs": {
      "FluentAssertions.Equivalency.Matching.CollectionMemberMatchingRuleDecorator": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.Matching.CollectionMemberMatchingRuleDecorator::Match(FluentAssertions.Equivalency.SelectedMemberInfo,System.Object,System.String,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "15": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Matching.CollectionMemberMatchingRuleDecorator::ToString()": {
          "Lines": {
            "20": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Equivalency.Matching.CollectionMemberMatchingRuleDecorator::.ctor(FluentAssertions.Equivalency.IMemberMatchingRule)": {
          "Lines": {
            "7": 0,
            "9": 0,
            "10": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Matching\\MustMatchByNameRule.cs": {
      "FluentAssertions.Equivalency.Matching.MustMatchByNameRule": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.Matching.MustMatchByNameRule::Match(FluentAssertions.Equivalency.SelectedMemberInfo,System.Object,System.String,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "14": 0,
            "16": 0,
            "18": 0,
            "19": 0,
            "22": 0,
            "24": 0,
            "25": 0,
            "28": 0,
            "30": 0,
            "33": 0,
            "35": 0,
            "37": 0,
            "38": 0,
            "41": 0
          },
          "Branches": [
            {
              "Line": 16,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 16,
              "Offset": 9,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 50,
              "EndOffset": 52,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 41,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 50,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 28,
              "Offset": 82,
              "EndOffset": 84,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 28,
              "Offset": 91,
              "EndOffset": 93,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 28,
              "Offset": 82,
              "EndOffset": 95,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 28,
              "Offset": 91,
              "EndOffset": 95,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 96,
              "EndOffset": 98,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 105,
              "EndOffset": 107,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 105,
              "EndOffset": 114,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 33,
              "Offset": 96,
              "EndOffset": 165,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Equivalency.Matching.MustMatchByNameRule::ExpectationImplementsMemberExplicitly(System.Object,FluentAssertions.Equivalency.SelectedMemberInfo)": {
          "Lines": {
            "46": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Matching.MustMatchByNameRule::ToString()": {
          "Lines": {
            "52": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Equivalency\\Matching\\TryMatchByNameRule.cs": {
      "FluentAssertions.Equivalency.Matching.TryMatchByNameRule": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Equivalency.Matching.TryMatchByNameRule::Match(FluentAssertions.Equivalency.SelectedMemberInfo,System.Object,System.String,FluentAssertions.Equivalency.IEquivalencyAssertionOptions)": {
          "Lines": {
            "12": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Equivalency.Matching.TryMatchByNameRule::ToString()": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\AppSettingsConfigurationStore.cs": {
      "FluentAssertions.Common.AppSettingsConfigurationStore": {
        "System.String FluentAssertions.Common.AppSettingsConfigurationStore::GetSetting(System.String)": {
          "Lines": {
            "11": 0,
            "12": 0
          },
          "Branches": [
            {
              "Line": 12,
              "Offset": 18,
              "EndOffset": 20,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 12,
              "Offset": 18,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\Configuration.cs": {
      "FluentAssertions.Common.Configuration": {
        "FluentAssertions.Common.Configuration FluentAssertions.Common.Configuration::get_Current()": {
          "Lines": {
            "21": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.ValueFormatterDetectionMode FluentAssertions.Common.Configuration::get_ValueFormatterDetectionMode()": {
          "Lines": {
            "36": 0,
            "38": 0,
            "40": 0,
            "43": 0,
            "45": 0
          },
          "Branches": [
            {
              "Line": 38,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 38,
              "Offset": 28,
              "EndOffset": 47,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Common.Configuration::set_ValueFormatterDetectionMode(FluentAssertions.Common.ValueFormatterDetectionMode)": {
          "Lines": {
            "49": 0,
            "50": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.ValueFormatterDetectionMode FluentAssertions.Common.Configuration::DetermineFormatterDetectionMode()": {
          "Lines": {
            "55": 0,
            "57": 0,
            "60": 0,
            "61": 0,
            "65": 0,
            "67": 0,
            "69": 0,
            "70": 0,
            "71": 0,
            "75": 0,
            "76": 0
          },
          "Branches": [
            {
              "Line": 55,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 6,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 61,
              "Offset": 33,
              "EndOffset": 78,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Common.Configuration::get_ValueFormatterAssembly()": {
          "Lines": {
            "86": 0,
            "88": 0,
            "89": 0,
            "91": 0,
            "95": 0
          },
          "Branches": [
            {
              "Line": 86,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 6,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 31,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Common.Configuration::set_ValueFormatterAssembly(System.String)": {
          "Lines": {
            "100": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "105": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Common.Configuration::get_TestFrameworkName()": {
          "Lines": {
            "120": 0,
            "122": 0,
            "125": 0
          },
          "Branches": [
            {
              "Line": 120,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 120,
              "Offset": 11,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Common.Configuration::set_TestFrameworkName(System.String)": {
          "Lines": {
            "127": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Common.Configuration::.ctor(FluentAssertions.Common.IConfigurationStore)": {
          "Lines": {
            "14": 0,
            "23": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\CSharpAccessModifierExtensions.cs": {
      "FluentAssertions.Common.CSharpAccessModifierExtensions": {
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Common.CSharpAccessModifierExtensions::GetCSharpAccessModifier(System.Reflection.MethodBase)": {
          "Lines": {
            "10": 0,
            "12": 0,
            "15": 0,
            "17": 0,
            "20": 0,
            "22": 0,
            "25": 0,
            "27": 0,
            "30": 0,
            "32": 0,
            "35": 0
          },
          "Branches": [
            {
              "Line": 10,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 10,
              "Offset": 6,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 15,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 15,
              "Offset": 16,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 26,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 36,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 46,
              "EndOffset": 48,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 46,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Common.CSharpAccessModifierExtensions::GetCSharpAccessModifier(System.Reflection.FieldInfo)": {
          "Lines": {
            "40": 0,
            "42": 0,
            "45": 0,
            "47": 0,
            "50": 0,
            "52": 0,
            "55": 0,
            "57": 0,
            "60": 0,
            "62": 0,
            "65": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 6,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 16,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 26,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 36,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 46,
              "EndOffset": 48,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 46,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Common.CSharpAccessModifier FluentAssertions.Common.CSharpAccessModifierExtensions::GetCSharpAccessModifier(System.Type)": {
          "Lines": {
            "70": 0,
            "72": 0,
            "74": 0,
            "77": 0,
            "79": 0,
            "82": 0,
            "84": 0,
            "87": 0,
            "89": 0,
            "92": 0,
            "94": 0,
            "97": 0
          },
          "Branches": [
            {
              "Line": 72,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 72,
              "Offset": 13,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 77,
              "Offset": 23,
              "EndOffset": 27,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 33,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 41,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 82,
              "Offset": 49,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 59,
              "EndOffset": 61,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 59,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 67,
              "EndOffset": 69,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 67,
              "EndOffset": 71,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 77,
              "EndOffset": 79,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 77,
              "EndOffset": 81,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\DateTimeExtensions.cs": {
      "FluentAssertions.Common.DateTimeExtensions": {
        "System.DateTimeOffset FluentAssertions.Common.DateTimeExtensions::ToDateTimeOffset(System.DateTime)": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.DateTimeOffset FluentAssertions.Common.DateTimeExtensions::ToDateTimeOffset(System.DateTime,System.TimeSpan)": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\EnumerableExtensions.cs": {
      "FluentAssertions.Common.EnumerableExtensions": {
        "System.Collections.Generic.ICollection`1<T> FluentAssertions.Common.EnumerableExtensions::ConvertOrCastToCollection(System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "12": 0
          },
          "Branches": [
            {
              "Line": 12,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 12,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.ICollection`1<T> FluentAssertions.Common.EnumerableExtensions::ConvertOrCastToCollection(System.Collections.IEnumerable)": {
          "Lines": {
            "17": 0
          },
          "Branches": [
            {
              "Line": 17,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 7,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IList`1<T> FluentAssertions.Common.EnumerableExtensions::ConvertOrCastToList(System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "22": 0
          },
          "Branches": [
            {
              "Line": 22,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 22,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IList`1<T> FluentAssertions.Common.EnumerableExtensions::ConvertOrCastToList(System.Collections.IEnumerable)": {
          "Lines": {
            "27": 0
          },
          "Branches": [
            {
              "Line": 27,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 27,
              "Offset": 7,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Int32 FluentAssertions.Common.EnumerableExtensions::IndexOfFirstDifferenceWith(System.Collections.Generic.IEnumerable`1<TFirst>,System.Collections.Generic.IEnumerable`1<TSecond>,System.Func`3<TFirst,TSecond,System.Boolean>)": {
          "Lines": {
            "41": 0,
            "42": 0,
            "44": 0,
            "45": 0,
            "47": 0,
            "48": 0,
            "50": 0,
            "52": 0,
            "55": 0,
            "57": 0,
            "60": 0,
            "62": 0,
            "65": 0,
            "68": 0
          },
          "Branches": [
            {
              "Line": 50,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 41,
              "EndOffset": 48,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 52,
              "EndOffset": 54,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 55,
              "Offset": 52,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 77,
              "EndOffset": 79,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 60,
              "Offset": 77,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\ExceptionExtensions.cs": {
      "FluentAssertions.Common.ExceptionExtensions": {
        "System.Exception FluentAssertions.Common.ExceptionExtensions::Unwrap(System.Reflection.TargetInvocationException)": {
          "Lines": {
            "10": 0,
            "11": 0,
            "13": 0,
            "16": 0
          },
          "Branches": [
            {
              "Line": 11,
              "Offset": 17,
              "EndOffset": 4,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 11,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\ExpressionExtensions.cs": {
      "FluentAssertions.Common.ExpressionExtensions": {
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Common.ExpressionExtensions::GetSelectedMemberInfo(System.Linq.Expressions.Expression`1<System.Func`2<T,TValue>>)": {
          "Lines": {
            "15": 0,
            "17": 0,
            "20": 0,
            "21": 0,
            "23": 0,
            "25": 0,
            "27": 0,
            "30": 0,
            "32": 0,
            "36": 0,
            "37": 0,
            "38": 0
          },
          "Branches": [
            {
              "Line": 15,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 15,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 26,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 53,
              "EndOffset": 55,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 53,
              "EndOffset": 62,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 70,
              "EndOffset": 72,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 43,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 30,
              "Offset": 70,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.PropertyInfo FluentAssertions.Common.ExpressionExtensions::GetPropertyInfo(System.Linq.Expressions.Expression`1<System.Func`2<T,TValue>>)": {
          "Lines": {
            "43": 0,
            "45": 0,
            "48": 0,
            "49": 0,
            "51": 0,
            "53": 0,
            "54": 0,
            "57": 0
          },
          "Branches": [
            {
              "Line": 43,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 43,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 26,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 51,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 51,
              "Offset": 41,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MemberInfo FluentAssertions.Common.ExpressionExtensions::AttemptToGetMemberInfoFromMemberExpression(System.Linq.Expressions.Expression`1<System.Func`2<T,TValue>>)": {
          "Lines": {
            "63": 0,
            "65": 0,
            "68": 0
          },
          "Branches": [
            {
              "Line": 63,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 63,
              "Offset": 13,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MemberInfo FluentAssertions.Common.ExpressionExtensions::AttemptToGetMemberInfoFromCastExpression(System.Linq.Expressions.Expression`1<System.Func`2<T,TValue>>)": {
          "Lines": {
            "73": 0,
            "75": 0,
            "78": 0
          },
          "Branches": [
            {
              "Line": 73,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 73,
              "Offset": 13,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Common.ExpressionExtensions::GetMemberPath(System.Linq.Expressions.Expression`1<System.Func`2<TDeclaringType,TPropertyType>>)": {
          "Lines": {
            "87": 0,
            "89": 0,
            "92": 0,
            "93": 0,
            "95": 0,
            "97": 0,
            "99": 0,
            "102": 0,
            "103": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "112": 0,
            "113": 0,
            "115": 0,
            "116": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "123": 0,
            "124": 0,
            "127": 0,
            "128": 0,
            "131": 0,
            "132": 0,
            "134": 0,
            "137": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "143": 0,
            "147": 0,
            "148": 0,
            "149": 0
          },
          "Branches": [
            {
              "Line": 87,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 97,
              "Offset": 419,
              "EndOffset": 49,
              "Path": 1,
              "Ordinal": 25,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 61,
              "EndOffset": 111,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 115,
              "EndOffset": 117,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 104,
              "EndOffset": 131,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 148,
              "Path": 6,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 148,
              "Path": 7,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 115,
              "EndOffset": 165,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 204,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 121,
              "EndOffset": 262,
              "Path": 1,
              "Ordinal": 17,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 269,
              "Path": 2,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 299,
              "EndOffset": 301,
              "Path": 0,
              "Ordinal": 18,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 314,
              "EndOffset": 316,
              "Path": 0,
              "Ordinal": 20,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 299,
              "EndOffset": 336,
              "Path": 1,
              "Ordinal": 19,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 314,
              "EndOffset": 336,
              "Path": 1,
              "Ordinal": 21,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 334,
              "EndOffset": 336,
              "Path": 0,
              "Ordinal": 22,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 334,
              "EndOffset": 348,
              "Path": 1,
              "Ordinal": 23,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 406,
              "Path": 3,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 406,
              "Path": 4,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 67,
              "EndOffset": 406,
              "Path": 5,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 104,
              "EndOffset": 406,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 121,
              "EndOffset": 406,
              "Path": 0,
              "Ordinal": 16,
              "Hits": 0
            },
            {
              "Line": 97,
              "Offset": 419,
              "EndOffset": 424,
              "Path": 0,
              "Ordinal": 24,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Common.ExpressionExtensions::GetMethodName(System.Linq.Expressions.Expression`1<System.Action>)": {
          "Lines": {
            "154": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\FullFrameworkReflector.cs": {
      "FluentAssertions.Common.FullFrameworkReflector": {
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.Common.FullFrameworkReflector::GetAllTypesFromAppDomain(System.Func`2<System.Reflection.Assembly,System.Boolean>)": {
          "Lines": {
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.FullFrameworkReflector::IsRelevant(System.Reflection.Assembly)": {
          "Lines": {
            "23": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0
          },
          "Branches": [
            {
              "Line": 25,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 54,
              "EndOffset": 56,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 67,
              "EndOffset": 69,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 80,
              "EndOffset": 82,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 28,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 41,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 54,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 67,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 25,
              "Offset": 80,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.FullFrameworkReflector::IsDynamic(System.Reflection.Assembly)": {
          "Lines": {
            "35": 0,
            "36": 0
          },
          "Branches": [
            {
              "Line": 35,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 35,
              "Offset": 21,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.Common.FullFrameworkReflector::GetExportedTypes(System.Reflection.Assembly)": {
          "Lines": {
            "43": 0,
            "47": 0,
            "49": 0,
            "51": 0,
            "53": 0,
            "55": 0,
            "57": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Common.FullFrameworkReflector/<>c__DisplayClass0_0": {
        "System.Boolean FluentAssertions.Common.FullFrameworkReflector/<>c__DisplayClass0_0::<GetAllTypesFromAppDomain>b__0(System.Reflection.Assembly)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 17,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 6,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 20,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\MethodInfoExtensions.cs": {
      "FluentAssertions.Common.MethodInfoExtensions": {
        "System.Boolean FluentAssertions.Common.MethodInfoExtensions::IsAsync(System.Reflection.MethodInfo)": {
          "Lines": {
            "21": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<TAttribute> FluentAssertions.Common.MethodInfoExtensions::GetMatchingAttributes(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>)": {
          "Lines": {
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "32": 0,
            "34": 0,
            "36": 0,
            "38": 0,
            "42": 0,
            "43": 0
          },
          "Branches": [
            {
              "Line": 32,
              "Offset": 53,
              "EndOffset": 55,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 63,
              "EndOffset": 65,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 85,
              "EndOffset": 87,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 53,
              "EndOffset": 104,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 63,
              "EndOffset": 104,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 85,
              "EndOffset": 104,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.MethodInfoExtensions::IsNonVirtual(System.Reflection.MethodInfo)": {
          "Lines": {
            "48": 0
          },
          "Branches": [
            {
              "Line": 48,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 48,
              "Offset": 6,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.ValueTuple`2<System.Boolean,System.Runtime.CompilerServices.MethodImplAttribute> FluentAssertions.Common.MethodInfoExtensions::RecreateMethodImplAttribute(System.Reflection.MethodBase)": {
          "Lines": {
            "53": 0,
            "55": 0,
            "56": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "62": 0,
            "64": 0,
            "67": 0
          },
          "Branches": [
            {
              "Line": 62,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 62,
              "Offset": 19,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Common.MethodInfoExtensions::.cctor()": {
          "Lines": {
            "16": 0,
            "17": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Common.MethodInfoExtensions/<>c": {
        "System.Int32 FluentAssertions.Common.MethodInfoExtensions/<>c::<.cctor>b__5_0()": {
          "Lines": {},
          "Branches": [
            {
              "Line": 17,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 17,
              "Offset": 26,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\NullConfigurationStore.cs": {
      "FluentAssertions.Common.NullConfigurationStore": {
        "System.String FluentAssertions.Common.NullConfigurationStore::GetSetting(System.String)": {
          "Lines": {
            "7": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\NullReflector.cs": {
      "FluentAssertions.Common.NullReflector": {
        "System.Collections.Generic.IEnumerable`1<System.Type> FluentAssertions.Common.NullReflector::GetAllTypesFromAppDomain(System.Func`2<System.Reflection.Assembly,System.Boolean>)": {
          "Lines": {
            "11": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\ObjectExtensions.cs": {
      "FluentAssertions.Common.ObjectExtensions": {
        "System.Boolean FluentAssertions.Common.ObjectExtensions::IsSameOrEqualTo(System.Object,System.Object)": {
          "Lines": {
            "9": 0,
            "11": 0,
            "14": 0,
            "16": 0,
            "19": 0,
            "21": 0,
            "24": 0,
            "26": 0,
            "31": 0,
            "33": 0,
            "35": 0,
            "37": 0,
            "38": 0,
            "41": 0,
            "43": 0,
            "44": 0
          },
          "Branches": [
            {
              "Line": 9,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 9,
              "Offset": 4,
              "EndOffset": 6,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 9,
              "Offset": 1,
              "EndOffset": 8,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 9,
              "Offset": 4,
              "EndOffset": 8,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 14,
              "Offset": 9,
              "EndOffset": 13,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 19,
              "Offset": 14,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 25,
              "EndOffset": 29,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 51,
              "EndOffset": 53,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 74,
              "EndOffset": 76,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 51,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 31,
              "Offset": 74,
              "EndOffset": 97,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\PropertyInfoExtensions.cs": {
      "FluentAssertions.Common.PropertyInfoExtensions": {
        "System.Boolean FluentAssertions.Common.PropertyInfoExtensions::IsVirtual(System.Reflection.PropertyInfo)": {
          "Lines": {
            "9": 0,
            "10": 0
          },
          "Branches": [
            {
              "Line": 9,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 9,
              "Offset": 8,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\Services.cs": {
      "FluentAssertions.Common.Services": {
        "FluentAssertions.Common.IConfigurationStore FluentAssertions.Common.Services::get_ConfigurationStore()": {
          "Lines": {
            "26": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Common.Services::set_ConfigurationStore(FluentAssertions.Common.IConfigurationStore)": {
          "Lines": {
            "27": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.Configuration FluentAssertions.Common.Services::get_Configuration()": {
          "Lines": {
            "34": 0,
            "36": 0,
            "38": 0,
            "41": 0,
            "43": 0
          },
          "Branches": [
            {
              "Line": 36,
              "Offset": 21,
              "EndOffset": 23,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 36,
              "Offset": 21,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Action`1<System.String> FluentAssertions.Common.Services::get_ThrowException()": {
          "Lines": {
            "50": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Common.Services::set_ThrowException(System.Action`1<System.String>)": {
          "Lines": {
            "55": 0,
            "56": 0
          },
          "Branches": []
        },
        "FluentAssertions.Common.IReflector FluentAssertions.Common.Services::get_Reflector()": {
          "Lines": {
            "61": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Common.Services::set_Reflector(FluentAssertions.Common.IReflector)": {
          "Lines": {
            "62": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Common.Services::ResetToDefaults()": {
          "Lines": {
            "68": 0,
            "69": 0,
            "78": 0,
            "79": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Common.Services::.cctor()": {
          "Lines": {
            "12": 0,
            "21": 0,
            "22": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\StringExtensions.cs": {
      "FluentAssertions.Common.StringExtensions": {
        "System.Int32 FluentAssertions.Common.StringExtensions::IndexOfFirstMismatch(System.String,System.String)": {
          "Lines": {
            "15": 0
          },
          "Branches": []
        },
        "System.Int32 FluentAssertions.Common.StringExtensions::IndexOfFirstMismatch(System.String,System.String,System.StringComparison)": {
          "Lines": {
            "24": 0,
            "26": 0,
            "28": 0,
            "32": 0
          },
          "Branches": [
            {
              "Line": 24,
              "Offset": 64,
              "EndOffset": 4,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 11,
              "EndOffset": 51,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 26,
              "Offset": 49,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 24,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Common.StringExtensions::IndexedSegmentAt(System.String,System.Int32)": {
          "Lines": {
            "40": 0,
            "41": 0,
            "43": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Common.StringExtensions::Escape(System.String,System.Boolean)": {
          "Lines": {
            "51": 0,
            "52": 0,
            "54": 0,
            "57": 0
          },
          "Branches": [
            {
              "Line": 52,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 52,
              "Offset": 49,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Common.StringExtensions::Unescape(System.String,System.Boolean)": {
          "Lines": {
            "65": 0,
            "66": 0,
            "68": 0,
            "71": 0
          },
          "Branches": [
            {
              "Line": 66,
              "Offset": 49,
              "EndOffset": 51,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 66,
              "Offset": 49,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.StringExtensions::IsNullOrEmpty(System.String)": {
          "Lines": {
            "76": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Common.StringExtensions::Combine(System.String,System.String,System.String)": {
          "Lines": {
            "87": 0,
            "89": 0,
            "92": 0,
            "94": 0,
            "97": 0
          },
          "Branches": [
            {
              "Line": 87,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 14,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 6,
              "EndOffset": 24,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 94,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 94,
              "Offset": 38,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 30,
              "EndOffset": 48,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Common.StringExtensions::Capitalize(System.String)": {
          "Lines": {
            "105": 0,
            "106": 0,
            "107": 0
          },
          "Branches": []
        },
        "System.String FluentAssertions.Common.StringExtensions::RemoveNewLines(System.String)": {
          "Lines": {
            "112": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Common\\TypeExtensions.cs": {
      "FluentAssertions.Common.TypeExtensions": {
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasAttribute(System.Reflection.MemberInfo)": {
          "Lines": {
            "28": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasMatchingAttribute(System.Reflection.MemberInfo,System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>)": {
          "Lines": {
            "35": 0,
            "37": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasMatchingAttribute(System.Type,System.Linq.Expressions.Expression`1<System.Func`2<TAttribute,System.Boolean>>,System.Boolean)": {
          "Lines": {
            "44": 0,
            "46": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsDecoratedWith(System.Reflection.MemberInfo)": {
          "Lines": {
            "52": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsDecoratedWith(System.Type,System.Boolean)": {
          "Lines": {
            "58": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<TAttribute> FluentAssertions.Common.TypeExtensions::GetCustomAttributes(System.Reflection.MemberInfo)": {
          "Lines": {
            "64": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<TAttribute> FluentAssertions.Common.TypeExtensions::GetCustomAttributes(System.Type,System.Boolean)": {
          "Lines": {
            "70": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<TAttribute> FluentAssertions.Common.TypeExtensions::GetCustomAttributes(System.Reflection.TypeInfo,System.Boolean)": {
          "Lines": {
            "76": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsEquivalentTo(FluentAssertions.Equivalency.SelectedMemberInfo,FluentAssertions.Equivalency.SelectedMemberInfo)": {
          "Lines": {
            "85": 0,
            "86": 0,
            "87": 0
          },
          "Branches": [
            {
              "Line": 85,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 17,
              "EndOffset": 38,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 85,
              "Offset": 36,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsSameOrInherits(System.Type,System.Type)": {
          "Lines": {
            "92": 0,
            "93": 0
          },
          "Branches": [
            {
              "Line": 92,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 92,
              "Offset": 7,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::Implements(System.Type,System.Type)": {
          "Lines": {
            "101": 0,
            "102": 0,
            "103": 0
          },
          "Branches": [
            {
              "Line": 101,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 101,
              "Offset": 7,
              "EndOffset": 17,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Type[] FluentAssertions.Common.TypeExtensions::GetClosedGenericInterfaces(System.Type,System.Type)": {
          "Lines": {
            "108": 0,
            "110": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0
          },
          "Branches": [
            {
              "Line": 108,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 24,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 108,
              "Offset": 43,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::OverridesEquals(System.Type)": {
          "Lines": {
            "130": 0,
            "131": 0,
            "133": 0,
            "134": 0
          },
          "Branches": [
            {
              "Line": 133,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 133,
              "Offset": 43,
              "EndOffset": 68,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.Equivalency.SelectedMemberInfo FluentAssertions.Common.TypeExtensions::FindMember(System.Type,System.String,System.Type)": {
          "Lines": {
            "146": 0,
            "147": 0
          },
          "Branches": [
            {
              "Line": 146,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 146,
              "Offset": 14,
              "EndOffset": 30,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.PropertyInfo FluentAssertions.Common.TypeExtensions::FindProperty(System.Type,System.String,System.Type)": {
          "Lines": {
            "158": 0,
            "159": 0,
            "160": 0,
            "161": 0,
            "163": 0,
            "164": 0,
            "165": 0
          },
          "Branches": [
            {
              "Line": 163,
              "Offset": 58,
              "EndOffset": 60,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 163,
              "Offset": 58,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.FieldInfo FluentAssertions.Common.TypeExtensions::FindField(System.Type,System.String,System.Type)": {
          "Lines": {
            "176": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "181": 0,
            "182": 0,
            "183": 0
          },
          "Branches": [
            {
              "Line": 181,
              "Offset": 58,
              "EndOffset": 60,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 181,
              "Offset": 58,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<FluentAssertions.Equivalency.SelectedMemberInfo> FluentAssertions.Common.TypeExtensions::GetNonPrivateMembers(System.Type)": {
          "Lines": {
            "188": 0,
            "189": 0,
            "190": 0,
            "191": 0,
            "192": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Reflection.PropertyInfo> FluentAssertions.Common.TypeExtensions::GetNonPrivateProperties(System.Type,System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "198": 0,
            "199": 0,
            "200": 0,
            "201": 0,
            "202": 0,
            "203": 0,
            "205": 0
          },
          "Branches": [
            {
              "Line": 198,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 198,
              "Offset": 25,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 198,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 198,
              "Offset": 61,
              "EndOffset": 86,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<System.Reflection.FieldInfo> FluentAssertions.Common.TypeExtensions::GetNonPrivateFields(System.Type)": {
          "Lines": {
            "210": 0,
            "211": 0,
            "212": 0,
            "213": 0,
            "214": 0,
            "216": 0
          },
          "Branches": [
            {
              "Line": 210,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 210,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 210,
              "Offset": 48,
              "EndOffset": 50,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 210,
              "Offset": 48,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<System.Reflection.FieldInfo> FluentAssertions.Common.TypeExtensions::GetFieldsFromHierarchy(System.Type)": {
          "Lines": {
            "221": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<System.Reflection.PropertyInfo> FluentAssertions.Common.TypeExtensions::GetPropertiesFromHierarchy(System.Type)": {
          "Lines": {
            "226": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<TMemberInfo> FluentAssertions.Common.TypeExtensions::GetMembersFromHierarchy(System.Type,System.Func`2<System.Type,System.Collections.Generic.IEnumerable`1<TMemberInfo>>)": {
          "Lines": {
            "234": 0,
            "236": 0,
            "238": 0,
            "239": 0,
            "240": 0,
            "241": 0,
            "243": 0,
            "245": 0,
            "246": 0,
            "248": 0,
            "253": 0,
            "254": 0,
            "257": 0,
            "259": 0,
            "261": 0,
            "264": 0,
            "267": 0
          },
          "Branches": [
            {
              "Line": 234,
              "Offset": 6,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 243,
              "Offset": 194,
              "EndOffset": 59,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 246,
              "Offset": 124,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 248,
              "Offset": 94,
              "EndOffset": 96,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 248,
              "Offset": 94,
              "EndOffset": 112,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 246,
              "Offset": 124,
              "EndOffset": 126,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 259,
              "Offset": 140,
              "EndOffset": 142,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 259,
              "Offset": 140,
              "EndOffset": 166,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 243,
              "Offset": 194,
              "EndOffset": 199,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 234,
              "Offset": 6,
              "EndOffset": 211,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsInterface(System.Type)": {
          "Lines": {
            "272": 0
          },
          "Branches": []
        },
        "System.Type[] FluentAssertions.Common.TypeExtensions::GetInterfaces(System.Type)": {
          "Lines": {
            "277": 0
          },
          "Branches": []
        },
        "System.Reflection.PropertyInfo[] FluentAssertions.Common.TypeExtensions::GetPublicProperties(System.Type)": {
          "Lines": {
            "282": 0
          },
          "Branches": []
        },
        "System.Reflection.FieldInfo[] FluentAssertions.Common.TypeExtensions::GetPublicFields(System.Type)": {
          "Lines": {
            "287": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasNonPrivateGetter(System.Reflection.PropertyInfo)": {
          "Lines": {
            "292": 0,
            "293": 0
          },
          "Branches": [
            {
              "Line": 293,
              "Offset": 15,
              "EndOffset": 17,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 293,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 293,
              "Offset": 15,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 293,
              "Offset": 23,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsCSharpAbstract(System.Type)": {
          "Lines": {
            "303": 0,
            "304": 0
          },
          "Branches": [
            {
              "Line": 304,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 304,
              "Offset": 13,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsCSharpSealed(System.Type)": {
          "Lines": {
            "314": 0,
            "315": 0
          },
          "Branches": [
            {
              "Line": 315,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 315,
              "Offset": 13,
              "EndOffset": 25,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsCSharpStatic(System.Type)": {
          "Lines": {
            "325": 0,
            "326": 0
          },
          "Branches": [
            {
              "Line": 326,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 326,
              "Offset": 13,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MethodInfo FluentAssertions.Common.TypeExtensions::GetMethod(System.Type,System.String,System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "331": 0,
            "332": 0,
            "333": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasMethod(System.Type,System.String,System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "338": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo FluentAssertions.Common.TypeExtensions::GetParameterlessMethod(System.Type,System.String)": {
          "Lines": {
            "343": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasParameterlessMethod(System.Type,System.String)": {
          "Lines": {
            "348": 0
          },
          "Branches": []
        },
        "System.Reflection.PropertyInfo FluentAssertions.Common.TypeExtensions::GetPropertyByName(System.Type,System.String)": {
          "Lines": {
            "353": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasExplicitlyImplementedProperty(System.Type,System.Type,System.String)": {
          "Lines": {
            "358": 0,
            "359": 0,
            "360": 0,
            "361": 0,
            "362": 0,
            "364": 0
          },
          "Branches": []
        },
        "System.Reflection.PropertyInfo FluentAssertions.Common.TypeExtensions::GetIndexerByParameterTypes(System.Type,System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "369": 0,
            "370": 0,
            "371": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsIndexer(System.Reflection.PropertyInfo)": {
          "Lines": {
            "376": 0
          },
          "Branches": []
        },
        "System.Reflection.ConstructorInfo FluentAssertions.Common.TypeExtensions::GetConstructor(System.Type,System.Collections.Generic.IEnumerable`1<System.Type>)": {
          "Lines": {
            "381": 0,
            "382": 0,
            "383": 0
          },
          "Branches": []
        },
        "System.Reflection.MethodInfo FluentAssertions.Common.TypeExtensions::GetImplicitConversionOperator(System.Type,System.Type,System.Type)": {
          "Lines": {
            "388": 0,
            "389": 0,
            "390": 0
          },
          "Branches": [
            {
              "Line": 388,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 388,
              "Offset": 9,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Reflection.MethodInfo FluentAssertions.Common.TypeExtensions::GetExplicitConversionOperator(System.Type,System.Type,System.Type)": {
          "Lines": {
            "395": 0,
            "396": 0,
            "397": 0
          },
          "Branches": [
            {
              "Line": 395,
              "Offset": 9,
              "EndOffset": 11,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 395,
              "Offset": 9,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<System.Reflection.MethodInfo> FluentAssertions.Common.TypeExtensions::GetConversionOperators(System.Type,System.Type,System.Type,System.Func`2<System.String,System.Boolean>)": {
          "Lines": {
            "403": 0,
            "404": 0,
            "405": 0,
            "406": 0,
            "407": 0,
            "408": 0,
            "409": 0,
            "410": 0,
            "411": 0,
            "412": 0
          },
          "Branches": []
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::HasValueSemantics(System.Type)": {
          "Lines": {
            "417": 0,
            "418": 0
          },
          "Branches": [
            {
              "Line": 417,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 6,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 14,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 22,
              "EndOffset": 34,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsKeyValuePair(System.Type)": {
          "Lines": {
            "423": 0
          },
          "Branches": [
            {
              "Line": 423,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 423,
              "Offset": 11,
              "EndOffset": 35,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsAnonymousType(System.Type)": {
          "Lines": {
            "428": 0,
            "430": 0,
            "432": 0,
            "435": 0,
            "436": 0,
            "438": 0
          },
          "Branches": [
            {
              "Line": 430,
              "Offset": 16,
              "EndOffset": 18,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 430,
              "Offset": 16,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Common.TypeExtensions::IsTuple(System.Type)": {
          "Lines": {
            "443": 0,
            "445": 0,
            "448": 0,
            "449": 0,
            "450": 0,
            "451": 0,
            "452": 0,
            "453": 0,
            "454": 0,
            "455": 0,
            "456": 0
          },
          "Branches": [
            {
              "Line": 443,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 443,
              "Offset": 11,
              "EndOffset": 15,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 38,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 59,
              "EndOffset": 61,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 77,
              "EndOffset": 79,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 95,
              "EndOffset": 97,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 113,
              "EndOffset": 115,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 131,
              "EndOffset": 133,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 149,
              "EndOffset": 151,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 167,
              "EndOffset": 169,
              "Path": 0,
              "Ordinal": 16,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 167,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 17,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 38,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 59,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 77,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 95,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 113,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 131,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 449,
              "Offset": 149,
              "EndOffset": 185,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass13_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass13_0::<GetClosedGenericInterfaces>b__0(System.Type)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 116,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 116,
              "Offset": 11,
              "EndOffset": 31,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass19_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass19_0::<GetNonPrivateProperties>b__2(System.Reflection.PropertyInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 202,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 202,
              "Offset": 6,
              "EndOffset": 26,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass32_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass32_0::<GetMethod>b__0(System.Reflection.MethodInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 333,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 333,
              "Offset": 31,
              "EndOffset": 33,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 333,
              "Offset": 31,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 333,
              "Offset": 17,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass37_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass37_0::<HasExplicitlyImplementedProperty>b__0(System.Reflection.MethodInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 361,
              "Offset": 38,
              "EndOffset": 40,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 361,
              "Offset": 38,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass38_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass38_0::<GetIndexerByParameterTypes>b__0(System.Reflection.PropertyInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 371,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 371,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 371,
              "Offset": 20,
              "EndOffset": 45,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 371,
              "Offset": 6,
              "EndOffset": 62,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass40_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass40_0::<GetConstructor>b__0(System.Reflection.ConstructorInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 383,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 383,
              "Offset": 12,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Common.TypeExtensions/<>c__DisplayClass43_0": {
        "System.Boolean FluentAssertions.Common.TypeExtensions/<>c__DisplayClass43_0::<GetConversionOperators>b__0(System.Reflection.MethodInfo)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 406,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 14,
              "EndOffset": 16,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 22,
              "EndOffset": 24,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 41,
              "EndOffset": 43,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 60,
              "EndOffset": 62,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 71,
              "EndOffset": 73,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 6,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 14,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 22,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 41,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 60,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 406,
              "Offset": 71,
              "EndOffset": 98,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\CollectionAssertions.cs": {
      "FluentAssertions.Collections.CollectionAssertions`2": {
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeEmpty(System.String,System.Object[])": {
          "Lines": {
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "42": 0
          },
          "Branches": [
            {
              "Line": 32,
              "Offset": 105,
              "EndOffset": 107,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 105,
              "EndOffset": 130,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 154,
              "EndOffset": 156,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 32,
              "Offset": 154,
              "EndOffset": 179,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeEmpty(System.String,System.Object[])": {
          "Lines": {
            "57": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "64": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "71": 0
          },
          "Branches": [
            {
              "Line": 57,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 57,
              "Offset": 11,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeNullOrEmpty(System.String,System.Object[])": {
          "Lines": {
            "86": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "94": 0
          },
          "Branches": [
            {
              "Line": 86,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 86,
              "Offset": 11,
              "EndOffset": 39,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeNullOrEmpty(System.String,System.Object[])": {
          "Lines": {
            "109": 0,
            "110": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::OnlyHaveUniqueItems(System.String,System.Object[])": {
          "Lines": {
            "125": 0,
            "127": 0,
            "128": 0,
            "129": 0,
            "132": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "137": 0,
            "139": 0,
            "141": 0,
            "142": 0,
            "143": 0,
            "144": 0,
            "145": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "155": 0
          },
          "Branches": [
            {
              "Line": 125,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 125,
              "Offset": 11,
              "EndOffset": 56,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 78,
              "EndOffset": 80,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 78,
              "EndOffset": 103,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 114,
              "EndOffset": 116,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 114,
              "EndOffset": 139,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 150,
              "EndOffset": 152,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 132,
              "Offset": 150,
              "EndOffset": 175,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 137,
              "Offset": 187,
              "EndOffset": 189,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 139,
              "Offset": 196,
              "EndOffset": 198,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 139,
              "Offset": 196,
              "EndOffset": 233,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 137,
              "Offset": 187,
              "EndOffset": 271,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotContainNulls(System.String,System.Object[])": {
          "Lines": {
            "170": 0,
            "172": 0,
            "173": 0,
            "174": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "184": 0,
            "186": 0,
            "188": 0,
            "189": 0,
            "190": 0,
            "191": 0,
            "194": 0,
            "195": 0,
            "196": 0,
            "200": 0
          },
          "Branches": [
            {
              "Line": 170,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 170,
              "Offset": 11,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 64,
              "EndOffset": 66,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 64,
              "EndOffset": 89,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 100,
              "EndOffset": 102,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 100,
              "EndOffset": 125,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 136,
              "EndOffset": 138,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 177,
              "Offset": 136,
              "EndOffset": 161,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 184,
              "Offset": 174,
              "EndOffset": 176,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 186,
              "Offset": 180,
              "EndOffset": 182,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 186,
              "Offset": 180,
              "EndOffset": 217,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 184,
              "Offset": 174,
              "EndOffset": 257,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::Equal(System.Object[])": {
          "Lines": {
            "210": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::Equal(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "227": 0,
            "229": 0
          },
          "Branches": [
            {
              "Line": 227,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 227,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.CollectionAssertions`2::AssertSubjectEquality(System.Collections.IEnumerable,System.Func`3<TActual,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "235": 0,
            "236": 0,
            "237": 0,
            "239": 0,
            "242": 0,
            "244": 0,
            "247": 0,
            "249": 0,
            "250": 0,
            "252": 0,
            "255": 0,
            "256": 0,
            "257": 0,
            "258": 0,
            "259": 0,
            "260": 0,
            "261": 0
          },
          "Branches": [
            {
              "Line": 237,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 237,
              "Offset": 43,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 242,
              "Offset": 47,
              "EndOffset": 49,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 242,
              "Offset": 47,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 250,
              "Offset": 88,
              "EndOffset": 90,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 250,
              "Offset": 88,
              "EndOffset": 113,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotEqual(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "277": 0,
            "279": 0,
            "280": 0,
            "281": 0,
            "284": 0,
            "286": 0,
            "289": 0,
            "291": 0,
            "292": 0,
            "293": 0,
            "296": 0,
            "298": 0,
            "300": 0,
            "301": 0,
            "302": 0,
            "305": 0
          },
          "Branches": [
            {
              "Line": 277,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 277,
              "Offset": 11,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 284,
              "Offset": 43,
              "EndOffset": 45,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 284,
              "Offset": 43,
              "EndOffset": 61,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 289,
              "Offset": 73,
              "EndOffset": 75,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 289,
              "Offset": 73,
              "EndOffset": 104,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 298,
              "Offset": 133,
              "EndOffset": 135,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 298,
              "Offset": 133,
              "EndOffset": 172,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeEquivalentTo(System.Collections.Generic.IEnumerable`1<TExpectation>,System.String,System.Object[])": {
          "Lines": {
            "329": 0,
            "331": 0
          },
          "Branches": [
            {
              "Line": 329,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 329,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeEquivalentTo(System.Object[])": {
          "Lines": {
            "347": 0,
            "349": 0
          },
          "Branches": [
            {
              "Line": 347,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 347,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeEquivalentTo(System.Collections.Generic.IEnumerable`1<TExpectation>,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>>,System.String,System.Object[])": {
          "Lines": {
            "379": 0,
            "381": 0,
            "382": 0,
            "383": 0,
            "384": 0,
            "385": 0,
            "386": 0,
            "387": 0,
            "388": 0,
            "389": 0,
            "390": 0,
            "392": 0,
            "393": 0,
            "395": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeEquivalentTo(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "413": 0,
            "415": 0,
            "418": 0,
            "420": 0,
            "421": 0,
            "422": 0,
            "425": 0,
            "427": 0,
            "428": 0,
            "429": 0,
            "430": 0,
            "431": 0,
            "434": 0,
            "435": 0,
            "437": 0,
            "439": 0,
            "441": 0,
            "442": 0,
            "443": 0,
            "444": 0,
            "445": 0,
            "450": 0,
            "452": 0,
            "454": 0,
            "455": 0,
            "457": 0,
            "458": 0,
            "459": 0,
            "460": 0,
            "462": 0
          },
          "Branches": [
            {
              "Line": 413,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 413,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 418,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 418,
              "Offset": 30,
              "EndOffset": 61,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 425,
              "Offset": 73,
              "EndOffset": 75,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 425,
              "Offset": 73,
              "EndOffset": 122,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 437,
              "Offset": 158,
              "EndOffset": 160,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 437,
              "Offset": 158,
              "EndOffset": 229,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::ContainItemsAssignableTo(System.String,System.Object[])": {
          "Lines": {
            "477": 0,
            "479": 0,
            "480": 0,
            "481": 0,
            "482": 0,
            "485": 0,
            "486": 0,
            "488": 0,
            "490": 0,
            "491": 0,
            "492": 0,
            "493": 0,
            "494": 0,
            "497": 0,
            "500": 0
          },
          "Branches": [
            {
              "Line": 477,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 477,
              "Offset": 11,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 486,
              "Offset": 169,
              "EndOffset": 80,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 488,
              "Offset": 93,
              "EndOffset": 95,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 488,
              "Offset": 93,
              "EndOffset": 159,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 486,
              "Offset": 169,
              "EndOffset": 171,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.List`1<T> FluentAssertions.Collections.CollectionAssertions`2::GetMissingItems(System.Collections.Generic.IEnumerable`1<T>,System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "505": 0,
            "506": 0,
            "508": 0,
            "510": 0,
            "512": 0,
            "513": 0,
            "516": 0,
            "520": 0
          },
          "Branches": [
            {
              "Line": 508,
              "Offset": 61,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 510,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 510,
              "Offset": 36,
              "EndOffset": 48,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 508,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::Contain(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "537": 0,
            "539": 0,
            "542": 0,
            "543": 0,
            "545": 0,
            "546": 0,
            "549": 0,
            "551": 0,
            "552": 0,
            "553": 0,
            "556": 0,
            "558": 0,
            "560": 0,
            "561": 0,
            "562": 0,
            "564": 0,
            "567": 0,
            "568": 0,
            "570": 0,
            "572": 0,
            "573": 0,
            "574": 0,
            "575": 0,
            "576": 0,
            "579": 0,
            "580": 0,
            "581": 0,
            "582": 0,
            "587": 0
          },
          "Branches": [
            {
              "Line": 537,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 537,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 543,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 543,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 549,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 549,
              "Offset": 61,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 556,
              "Offset": 102,
              "EndOffset": 104,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 558,
              "Offset": 126,
              "EndOffset": 131,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 556,
              "Offset": 102,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 568,
              "Offset": 212,
              "EndOffset": 214,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 570,
              "Offset": 221,
              "EndOffset": 223,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 570,
              "Offset": 221,
              "EndOffset": 276,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 558,
              "Offset": 126,
              "EndOffset": 333,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 568,
              "Offset": 212,
              "EndOffset": 333,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::ContainInOrder(System.Object[])": {
          "Lines": {
            "597": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::ContainInOrder(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "617": 0,
            "619": 0,
            "622": 0,
            "624": 0,
            "625": 0,
            "626": 0,
            "629": 0,
            "630": 0,
            "632": 0,
            "634": 0,
            "635": 0,
            "636": 0,
            "638": 0,
            "639": 0,
            "642": 0,
            "643": 0,
            "644": 0,
            "645": 0,
            "646": 0,
            "650": 0
          },
          "Branches": [
            {
              "Line": 617,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 617,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 622,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 622,
              "Offset": 30,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 632,
              "Offset": 238,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 636,
              "Offset": 145,
              "EndOffset": 147,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 636,
              "Offset": 145,
              "EndOffset": 162,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 632,
              "Offset": 238,
              "EndOffset": 243,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeInAscendingOrder(System.String,System.Object[])": {
          "Lines": {
            "666": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeInAscendingOrder(System.Collections.Generic.IComparer`1<System.Object>,System.String,System.Object[])": {
          "Lines": {
            "685": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeInDescendingOrder(System.String,System.Object[])": {
          "Lines": {
            "701": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeInDescendingOrder(System.Collections.Generic.IComparer`1<System.Object>,System.String,System.Object[])": {
          "Lines": {
            "720": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeInOrder(System.Collections.Generic.IComparer`1<System.Object>,FluentAssertions.Collections.SortOrder,System.String,System.Object[])": {
          "Lines": {
            "730": 0,
            "732": 0,
            "734": 0,
            "735": 0,
            "736": 0,
            "737": 0,
            "740": 0,
            "742": 0,
            "743": 0,
            "744": 0,
            "746": 0,
            "748": 0,
            "749": 0,
            "750": 0,
            "751": 0,
            "752": 0,
            "753": 0,
            "756": 0
          },
          "Branches": [
            {
              "Line": 730,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 730,
              "Offset": 1,
              "EndOffset": 10,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 732,
              "Offset": 27,
              "EndOffset": 29,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 732,
              "Offset": 27,
              "EndOffset": 84,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 742,
              "Offset": 102,
              "EndOffset": 104,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 742,
              "Offset": 111,
              "EndOffset": 113,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 742,
              "Offset": 111,
              "EndOffset": 136,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 742,
              "Offset": 102,
              "EndOffset": 149,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 742,
              "Offset": 156,
              "EndOffset": 158,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 742,
              "Offset": 156,
              "EndOffset": 181,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 746,
              "Offset": 289,
              "EndOffset": 197,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 746,
              "Offset": 289,
              "EndOffset": 291,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeAscendingInOrder(System.String,System.Object[])": {
          "Lines": {
            "772": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeAscendingInOrder(System.Collections.Generic.IComparer`1<System.Object>,System.String,System.Object[])": {
          "Lines": {
            "791": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeDescendingInOrder(System.String,System.Object[])": {
          "Lines": {
            "807": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeDescendingInOrder(System.Collections.Generic.IComparer`1<System.Object>,System.String,System.Object[])": {
          "Lines": {
            "826": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeInOrder(System.Collections.Generic.IComparer`1<System.Object>,FluentAssertions.Collections.SortOrder,System.String,System.Object[])": {
          "Lines": {
            "835": 0,
            "837": 0,
            "839": 0,
            "840": 0,
            "841": 0,
            "842": 0,
            "843": 0,
            "846": 0,
            "847": 0,
            "848": 0,
            "850": 0,
            "851": 0,
            "852": 0,
            "853": 0,
            "855": 0,
            "857": 0,
            "858": 0,
            "859": 0,
            "860": 0,
            "861": 0,
            "864": 0
          },
          "Branches": [
            {
              "Line": 835,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 835,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 837,
              "Offset": 33,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 837,
              "Offset": 33,
              "EndOffset": 90,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 846,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 846,
              "Offset": 116,
              "EndOffset": 118,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 846,
              "Offset": 116,
              "EndOffset": 141,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 846,
              "Offset": 92,
              "EndOffset": 154,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 846,
              "Offset": 176,
              "EndOffset": 178,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 846,
              "Offset": 176,
              "EndOffset": 201,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 855,
              "Offset": 255,
              "EndOffset": 257,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 855,
              "Offset": 255,
              "EndOffset": 312,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::BeSubsetOf(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "881": 0,
            "883": 0,
            "886": 0,
            "888": 0,
            "889": 0,
            "890": 0,
            "891": 0,
            "894": 0,
            "895": 0,
            "897": 0,
            "899": 0,
            "901": 0,
            "902": 0,
            "903": 0,
            "904": 0,
            "905": 0,
            "908": 0
          },
          "Branches": [
            {
              "Line": 881,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 881,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 886,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 886,
              "Offset": 30,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 899,
              "Offset": 115,
              "EndOffset": 117,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 899,
              "Offset": 115,
              "EndOffset": 154,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotBeSubsetOf(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "925": 0,
            "926": 0,
            "927": 0,
            "928": 0,
            "930": 0,
            "932": 0,
            "933": 0,
            "934": 0,
            "935": 0,
            "936": 0,
            "939": 0,
            "940": 0,
            "942": 0,
            "944": 0,
            "945": 0,
            "946": 0,
            "949": 0
          },
          "Branches": [
            {
              "Line": 930,
              "Offset": 60,
              "EndOffset": 62,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 930,
              "Offset": 60,
              "EndOffset": 109,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 942,
              "Offset": 151,
              "EndOffset": 153,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 942,
              "Offset": 151,
              "EndOffset": 190,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::HaveSameCount(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "966": 0,
            "968": 0,
            "971": 0,
            "973": 0,
            "974": 0,
            "975": 0,
            "976": 0,
            "977": 0,
            "980": 0,
            "982": 0,
            "983": 0,
            "985": 0,
            "986": 0,
            "987": 0,
            "988": 0,
            "990": 0
          },
          "Branches": [
            {
              "Line": 966,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 966,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 971,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 971,
              "Offset": 30,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotHaveSameCount(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "1007": 0,
            "1009": 0,
            "1012": 0,
            "1014": 0,
            "1015": 0,
            "1016": 0,
            "1017": 0,
            "1018": 0,
            "1021": 0,
            "1023": 0,
            "1024": 0,
            "1025": 0,
            "1026": 0,
            "1027": 0,
            "1030": 0,
            "1032": 0,
            "1033": 0,
            "1035": 0,
            "1036": 0,
            "1037": 0,
            "1038": 0,
            "1040": 0
          },
          "Branches": [
            {
              "Line": 1007,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1007,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1012,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1012,
              "Offset": 30,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1021,
              "Offset": 91,
              "EndOffset": 93,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1021,
              "Offset": 91,
              "EndOffset": 140,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,System.Object> FluentAssertions.Collections.CollectionAssertions`2::HaveElementAt(System.Int32,System.Object,System.String,System.Object[])": {
          "Lines": {
            "1059": 0,
            "1061": 0,
            "1062": 0,
            "1063": 0,
            "1066": 0,
            "1068": 0,
            "1069": 0,
            "1071": 0,
            "1073": 0,
            "1074": 0,
            "1075": 0,
            "1076": 0,
            "1077": 0,
            "1080": 0,
            "1081": 0,
            "1082": 0,
            "1085": 0
          },
          "Branches": [
            {
              "Line": 1059,
              "Offset": 11,
              "EndOffset": 13,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1059,
              "Offset": 11,
              "EndOffset": 66,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1069,
              "Offset": 92,
              "EndOffset": 94,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1069,
              "Offset": 92,
              "EndOffset": 178,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotContain(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "1102": 0,
            "1104": 0,
            "1107": 0,
            "1108": 0,
            "1110": 0,
            "1111": 0,
            "1114": 0,
            "1116": 0,
            "1117": 0,
            "1118": 0,
            "1121": 0,
            "1123": 0,
            "1125": 0,
            "1126": 0,
            "1127": 0,
            "1129": 0,
            "1132": 0,
            "1133": 0,
            "1135": 0,
            "1137": 0,
            "1138": 0,
            "1139": 0,
            "1140": 0,
            "1141": 0,
            "1144": 0,
            "1145": 0,
            "1146": 0,
            "1147": 0,
            "1152": 0
          },
          "Branches": [
            {
              "Line": 1102,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1102,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1108,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1108,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1114,
              "Offset": 61,
              "EndOffset": 63,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1114,
              "Offset": 61,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 1121,
              "Offset": 102,
              "EndOffset": 104,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 1123,
              "Offset": 126,
              "EndOffset": 131,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 1121,
              "Offset": 102,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 1133,
              "Offset": 212,
              "EndOffset": 214,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 1135,
              "Offset": 221,
              "EndOffset": 223,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 1135,
              "Offset": 221,
              "EndOffset": 276,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            },
            {
              "Line": 1123,
              "Offset": 126,
              "EndOffset": 328,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 1133,
              "Offset": 212,
              "EndOffset": 328,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::IntersectWith(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "1169": 0,
            "1171": 0,
            "1174": 0,
            "1176": 0,
            "1177": 0,
            "1178": 0,
            "1179": 0,
            "1182": 0,
            "1183": 0,
            "1185": 0,
            "1187": 0,
            "1188": 0,
            "1189": 0,
            "1190": 0,
            "1191": 0,
            "1194": 0
          },
          "Branches": [
            {
              "Line": 1169,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1169,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1174,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1174,
              "Offset": 30,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1185,
              "Offset": 113,
              "EndOffset": 115,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1185,
              "Offset": 113,
              "EndOffset": 162,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::NotIntersectWith(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "1211": 0,
            "1213": 0,
            "1216": 0,
            "1218": 0,
            "1219": 0,
            "1220": 0,
            "1221": 0,
            "1224": 0,
            "1226": 0,
            "1227": 0,
            "1228": 0,
            "1229": 0,
            "1230": 0,
            "1233": 0,
            "1234": 0,
            "1236": 0,
            "1238": 0,
            "1239": 0,
            "1240": 0,
            "1241": 0,
            "1242": 0,
            "1245": 0
          },
          "Branches": [
            {
              "Line": 1211,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1211,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1216,
              "Offset": 30,
              "EndOffset": 32,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1216,
              "Offset": 30,
              "EndOffset": 79,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1224,
              "Offset": 91,
              "EndOffset": 93,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1224,
              "Offset": 91,
              "EndOffset": 140,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 1236,
              "Offset": 176,
              "EndOffset": 178,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 1236,
              "Offset": 176,
              "EndOffset": 215,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::StartWith(System.Object,System.String,System.Object[])": {
          "Lines": {
            "1264": 0,
            "1265": 0
          },
          "Branches": [
            {
              "Line": 1264,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1264,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1264,
              "Offset": 24,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1264,
              "Offset": 40,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.CollectionAssertions`2::AssertCollectionStartsWith(System.Collections.Generic.IEnumerable`1<TActual>,TExpected[],System.Func`3<TActual,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "1270": 0,
            "1271": 0,
            "1272": 0,
            "1273": 0,
            "1274": 0,
            "1275": 0,
            "1276": 0,
            "1277": 0,
            "1278": 0,
            "1279": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Collections.CollectionAssertions`2::AssertCollectionStartsWith(System.Collections.Generic.IEnumerable`1<TActual>,System.Collections.Generic.ICollection`1<TExpected>,System.Func`3<TActual,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "1283": 0,
            "1284": 0,
            "1285": 0,
            "1286": 0,
            "1287": 0,
            "1288": 0,
            "1289": 0,
            "1290": 0,
            "1291": 0,
            "1292": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::EndWith(System.Object,System.String,System.Object[])": {
          "Lines": {
            "1310": 0,
            "1311": 0
          },
          "Branches": [
            {
              "Line": 1310,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1310,
              "Offset": 40,
              "EndOffset": 42,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1310,
              "Offset": 24,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1310,
              "Offset": 40,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.CollectionAssertions`2::AssertCollectionEndsWith(System.Collections.Generic.IEnumerable`1<TActual>,TExpected[],System.Func`3<TActual,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "1316": 0,
            "1317": 0,
            "1318": 0,
            "1319": 0,
            "1320": 0,
            "1321": 0,
            "1322": 0,
            "1323": 0,
            "1324": 0,
            "1325": 0,
            "1326": 0,
            "1327": 0,
            "1328": 0,
            "1329": 0,
            "1330": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Collections.CollectionAssertions`2::AssertCollectionEndsWith(System.Collections.Generic.IEnumerable`1<TActual>,System.Collections.Generic.ICollection`1<TExpected>,System.Func`3<TActual,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "1334": 0,
            "1335": 0,
            "1336": 0,
            "1337": 0,
            "1338": 0,
            "1339": 0,
            "1340": 0,
            "1341": 0,
            "1342": 0,
            "1343": 0,
            "1344": 0,
            "1345": 0,
            "1346": 0,
            "1347": 0,
            "1348": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::HaveElementPreceding(System.Object,System.Object,System.String,System.Object[])": {
          "Lines": {
            "1362": 0,
            "1363": 0,
            "1364": 0,
            "1365": 0,
            "1366": 0,
            "1367": 0,
            "1368": 0,
            "1369": 0,
            "1370": 0,
            "1371": 0,
            "1372": 0,
            "1373": 0,
            "1374": 0,
            "1376": 0
          },
          "Branches": [
            {
              "Line": 1362,
              "Offset": 97,
              "EndOffset": 99,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1362,
              "Offset": 97,
              "EndOffset": 122,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1362,
              "Offset": 227,
              "EndOffset": 229,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1362,
              "Offset": 227,
              "EndOffset": 252,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Collections.CollectionAssertions`2::HasPredecessor(System.Object,System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {
            "1381": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.Collections.CollectionAssertions`2::PredecessorOf(System.Object,System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {
            "1386": 0,
            "1387": 0,
            "1388": 0
          },
          "Branches": [
            {
              "Line": 1388,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1388,
              "Offset": 17,
              "EndOffset": 21,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::HaveElementSucceeding(System.Object,System.Object,System.String,System.Object[])": {
          "Lines": {
            "1403": 0,
            "1404": 0,
            "1405": 0,
            "1406": 0,
            "1407": 0,
            "1408": 0,
            "1409": 0,
            "1410": 0,
            "1411": 0,
            "1412": 0,
            "1413": 0,
            "1414": 0,
            "1415": 0,
            "1417": 0
          },
          "Branches": [
            {
              "Line": 1403,
              "Offset": 97,
              "EndOffset": 99,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1403,
              "Offset": 97,
              "EndOffset": 122,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1403,
              "Offset": 227,
              "EndOffset": 229,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1403,
              "Offset": 227,
              "EndOffset": 252,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Collections.CollectionAssertions`2::HasSuccessor(System.Object,System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {
            "1422": 0
          },
          "Branches": []
        },
        "System.Object FluentAssertions.Collections.CollectionAssertions`2::SuccessorOf(System.Object,System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {
            "1427": 0,
            "1428": 0,
            "1429": 0
          },
          "Branches": [
            {
              "Line": 1429,
              "Offset": 24,
              "EndOffset": 26,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1429,
              "Offset": 24,
              "EndOffset": 28,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::AllBeAssignableTo(System.String,System.Object[])": {
          "Lines": {
            "1445": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::AllBeAssignableTo(System.Type,System.String,System.Object[])": {
          "Lines": {
            "1461": 0,
            "1462": 0,
            "1463": 0,
            "1464": 0,
            "1465": 0,
            "1466": 0,
            "1467": 0,
            "1468": 0,
            "1469": 0,
            "1471": 0
          },
          "Branches": [
            {
              "Line": 1461,
              "Offset": 85,
              "EndOffset": 87,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1461,
              "Offset": 85,
              "EndOffset": 110,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1461,
              "Offset": 166,
              "EndOffset": 168,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1461,
              "Offset": 166,
              "EndOffset": 191,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::AllBeOfType(System.String,System.Object[])": {
          "Lines": {
            "1487": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.CollectionAssertions`2::AllBeOfType(System.Type,System.String,System.Object[])": {
          "Lines": {
            "1503": 0,
            "1504": 0,
            "1505": 0,
            "1506": 0,
            "1507": 0,
            "1508": 0,
            "1509": 0,
            "1510": 0,
            "1511": 0,
            "1513": 0
          },
          "Branches": [
            {
              "Line": 1503,
              "Offset": 85,
              "EndOffset": 87,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1503,
              "Offset": 85,
              "EndOffset": 110,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1503,
              "Offset": 166,
              "EndOffset": 168,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1503,
              "Offset": 166,
              "EndOffset": 191,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Collections.CollectionAssertions`2::get_Identifier()": {
          "Lines": {
            "1519": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Collections.CollectionAssertions`2/<>c": {
        "System.Boolean FluentAssertions.Collections.CollectionAssertions`2/<>c::<AllBeAssignableTo>b__50_1(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1465,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1465,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Object FluentAssertions.Collections.CollectionAssertions`2/<>c::<AllBeAssignableTo>b__50_3(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1469,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1469,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Collections.CollectionAssertions`2/<>c::<AllBeOfType>b__52_1(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1507,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1507,
              "Offset": 7,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Object FluentAssertions.Collections.CollectionAssertions`2/<>c::<AllBeOfType>b__52_3(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1511,
              "Offset": 17,
              "EndOffset": 19,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1511,
              "Offset": 17,
              "EndOffset": 42,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass41_0`2": {
        "System.Int32 FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass41_0`2::<AssertCollectionEndsWith>b__1(System.Collections.Generic.ICollection`1<TActual>,System.Collections.Generic.ICollection`1<TExpected>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1328,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1328,
              "Offset": 36,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass42_0`2": {
        "System.Int32 FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass42_0`2::<AssertCollectionEndsWith>b__1(System.Collections.Generic.ICollection`1<TActual>,System.Collections.Generic.ICollection`1<TExpected>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1346,
              "Offset": 36,
              "EndOffset": 38,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1346,
              "Offset": 36,
              "EndOffset": 40,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass50_0": {
        "System.Boolean FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass50_0::<AllBeAssignableTo>b__2(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1468,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1468,
              "Offset": 8,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      },
      "FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass52_0": {
        "System.Boolean FluentAssertions.Collections.CollectionAssertions`2/<>c__DisplayClass52_0::<AllBeOfType>b__2(System.Collections.Generic.IEnumerable`1<System.Object>)": {
          "Lines": {},
          "Branches": [
            {
              "Line": 1510,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1510,
              "Offset": 8,
              "EndOffset": 32,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\GenericCollectionAssertions.cs": {
      "FluentAssertions.Collections.GenericCollectionAssertions`1": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::NotContainNulls(System.Linq.Expressions.Expression`1<System.Func`2<T,TKey>>,System.String,System.Object[])": {
          "Lines": {
            "37": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "44": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "50": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "59": 0
          },
          "Branches": [
            {
              "Line": 37,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 37,
              "Offset": 12,
              "EndOffset": 43,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 86,
              "EndOffset": 88,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 50,
              "Offset": 86,
              "EndOffset": 130,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::OnlyHaveUniqueItems(System.Linq.Expressions.Expression`1<System.Func`2<T,TKey>>,System.String,System.Object[])": {
          "Lines": {
            "75": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "82": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "89": 0,
            "91": 0,
            "93": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "98": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "109": 0
          },
          "Branches": [
            {
              "Line": 75,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 71,
              "EndOffset": 73,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 84,
              "Offset": 71,
              "EndOffset": 96,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 109,
              "EndOffset": 114,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 91,
              "Offset": 118,
              "EndOffset": 120,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 161,
              "EndOffset": 163,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 93,
              "Offset": 161,
              "EndOffset": 186,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 91,
              "Offset": 118,
              "EndOffset": 200,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 89,
              "Offset": 109,
              "EndOffset": 254,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeInAscendingOrder(System.Linq.Expressions.Expression`1<System.Func`2<T,TSelector>>,System.String,System.Object[])": {
          "Lines": {
            "129": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeInAscendingOrder(System.Collections.Generic.IComparer`1<T>,System.String,System.Object[])": {
          "Lines": {
            "149": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeInAscendingOrder(System.Linq.Expressions.Expression`1<System.Func`2<T,TSelector>>,System.Collections.Generic.IComparer`1<TSelector>,System.String,System.Object[])": {
          "Lines": {
            "172": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeInDescendingOrder(System.Linq.Expressions.Expression`1<System.Func`2<T,TSelector>>,System.String,System.Object[])": {
          "Lines": {
            "192": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeInDescendingOrder(System.Collections.Generic.IComparer`1<T>,System.String,System.Object[])": {
          "Lines": {
            "212": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeInDescendingOrder(System.Linq.Expressions.Expression`1<System.Func`2<T,TSelector>>,System.Collections.Generic.IComparer`1<TSelector>,System.String,System.Object[])": {
          "Lines": {
            "235": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericCollectionAssertions`1<T>> FluentAssertions.Collections.GenericCollectionAssertions`1::BeOrderedBy(System.Linq.Expressions.Expression`1<System.Func`2<T,TSelector>>,System.Collections.Generic.IComparer`1<TSelector>,FluentAssertions.Collections.SortOrder,System.String,System.Object[])": {
          "Lines": {
            "241": 0,
            "243": 0,
            "244": 0,
            "247": 0,
            "249": 0,
            "251": 0,
            "253": 0,
            "254": 0,
            "255": 0,
            "257": 0,
            "258": 0,
            "260": 0,
            "261": 0,
            "262": 0,
            "263": 0,
            "264": 0,
            "267": 0
          },
          "Branches": [
            {
              "Line": 241,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 241,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 247,
              "Offset": 30,
              "EndOffset": 35,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 253,
              "Offset": 55,
              "EndOffset": 57,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 253,
              "Offset": 55,
              "EndOffset": 67,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 258,
              "Offset": 94,
              "EndOffset": 96,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 258,
              "Offset": 94,
              "EndOffset": 109,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 247,
              "Offset": 30,
              "EndOffset": 175,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.Boolean FluentAssertions.Collections.GenericCollectionAssertions`1::IsValidProperty(System.Linq.Expressions.Expression`1<System.Func`2<T,TSelector>>,System.String,System.Object[])": {
          "Lines": {
            "272": 0,
            "274": 0,
            "275": 0,
            "278": 0,
            "279": 0,
            "280": 0,
            "281": 0,
            "282": 0
          },
          "Branches": [
            {
              "Line": 272,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 272,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.GenericCollectionAssertions`1::AllBeEquivalentTo(TExpectation,System.String,System.Object[])": {
          "Lines": {
            "306": 0,
            "307": 0
          },
          "Branches": [
            {
              "Line": 306,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 306,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.GenericCollectionAssertions`1::AllBeEquivalentTo(TExpectation,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>>,System.String,System.Object[])": {
          "Lines": {
            "337": 0,
            "339": 0,
            "340": 0
          },
          "Branches": []
        },
        "System.Collections.Generic.IEnumerable`1<TExpectation> FluentAssertions.Collections.GenericCollectionAssertions`1::RepeatAsManyAs(TExpectation,System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "344": 0,
            "346": 0,
            "349": 0
          },
          "Branches": [
            {
              "Line": 344,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 344,
              "Offset": 1,
              "EndOffset": 9,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.GenericCollectionAssertions`1::.ctor(System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "19": 0,
            "21": 0
          },
          "Branches": []
        }
      },
      "FluentAssertions.Collections.GenericCollectionAssertions`1/<RepeatAsManyAsIterator>d__14`1": {
        "System.Boolean FluentAssertions.Collections.GenericCollectionAssertions`1/<RepeatAsManyAsIterator>d__14`1::MoveNext()": {
          "Lines": {
            "354": 0,
            "356": 0,
            "358": 0,
            "360": 0,
            "361": 0
          },
          "Branches": [
            {
              "Line": 354,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 354,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 354,
              "Offset": 8,
              "EndOffset": 18,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 356,
              "Offset": 94,
              "EndOffset": 52,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 354,
              "Offset": 12,
              "EndOffset": 75,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 356,
              "Offset": 94,
              "EndOffset": 96,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\GenericDictionaryAssertions.cs": {
      "FluentAssertions.Collections.GenericDictionaryAssertions`2": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::HaveCount(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "45": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "52": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "59": 0
          },
          "Branches": [
            {
              "Line": 45,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 45,
              "Offset": 6,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotHaveCount(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "75": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "82": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "89": 0
          },
          "Branches": [
            {
              "Line": 75,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 75,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::HaveCountGreaterThan(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "105": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "112": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "119": 0
          },
          "Branches": [
            {
              "Line": 105,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 105,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::HaveCountGreaterOrEqualTo(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "135": 0,
            "137": 0,
            "138": 0,
            "139": 0,
            "142": 0,
            "144": 0,
            "145": 0,
            "146": 0,
            "147": 0,
            "149": 0
          },
          "Branches": [
            {
              "Line": 135,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 135,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::HaveCountLessThan(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "165": 0,
            "167": 0,
            "168": 0,
            "169": 0,
            "172": 0,
            "174": 0,
            "175": 0,
            "176": 0,
            "177": 0,
            "179": 0
          },
          "Branches": [
            {
              "Line": 165,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 165,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::HaveCountLessOrEqualTo(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "195": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "202": 0,
            "204": 0,
            "205": 0,
            "206": 0,
            "207": 0,
            "209": 0
          },
          "Branches": [
            {
              "Line": 195,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 195,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::HaveCount(System.Linq.Expressions.Expression`1<System.Func`2<System.Int32,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "226": 0,
            "228": 0,
            "231": 0,
            "233": 0,
            "234": 0,
            "235": 0,
            "238": 0,
            "240": 0,
            "242": 0,
            "244": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "250": 0
          },
          "Branches": [
            {
              "Line": 226,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 226,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 231,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 231,
              "Offset": 25,
              "EndOffset": 74,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 242,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 242,
              "Offset": 98,
              "EndOffset": 156,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::BeEmpty(System.String,System.Object[])": {
          "Lines": {
            "269": 0,
            "271": 0,
            "272": 0,
            "273": 0,
            "276": 0,
            "277": 0,
            "278": 0,
            "279": 0,
            "281": 0
          },
          "Branches": [
            {
              "Line": 269,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 269,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotBeEmpty(System.String,System.Object[])": {
          "Lines": {
            "297": 0,
            "299": 0,
            "300": 0,
            "301": 0,
            "304": 0,
            "305": 0,
            "306": 0,
            "307": 0,
            "309": 0
          },
          "Branches": [
            {
              "Line": 297,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 297,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::Equal(System.Collections.Generic.IDictionary`2<TKey,TValue>,System.String,System.Object[])": {
          "Lines": {
            "332": 0,
            "334": 0,
            "335": 0,
            "336": 0,
            "339": 0,
            "341": 0,
            "344": 0,
            "345": 0,
            "347": 0,
            "349": 0,
            "350": 0,
            "351": 0,
            "352": 0,
            "355": 0,
            "357": 0,
            "358": 0,
            "359": 0,
            "360": 0,
            "363": 0,
            "365": 0,
            "366": 0,
            "367": 0,
            "368": 0,
            "369": 0,
            "372": 0
          },
          "Branches": [
            {
              "Line": 332,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 332,
              "Offset": 6,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 339,
              "Offset": 51,
              "EndOffset": 53,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 339,
              "Offset": 51,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 347,
              "Offset": 121,
              "EndOffset": 123,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 347,
              "Offset": 121,
              "EndOffset": 160,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 355,
              "Offset": 166,
              "EndOffset": 168,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 355,
              "Offset": 166,
              "EndOffset": 205,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 363,
              "Offset": 322,
              "EndOffset": 219,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 363,
              "Offset": 322,
              "EndOffset": 324,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotEqual(System.Collections.Generic.IDictionary`2<TKey,TValue>,System.String,System.Object[])": {
          "Lines": {
            "391": 0,
            "393": 0,
            "394": 0,
            "395": 0,
            "398": 0,
            "400": 0,
            "403": 0,
            "405": 0,
            "406": 0,
            "407": 0,
            "410": 0,
            "411": 0,
            "413": 0,
            "414": 0,
            "415": 0,
            "417": 0,
            "419": 0,
            "420": 0,
            "421": 0,
            "424": 0
          },
          "Branches": [
            {
              "Line": 391,
              "Offset": 26,
              "EndOffset": 28,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 391,
              "Offset": 26,
              "EndOffset": 66,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 398,
              "Offset": 72,
              "EndOffset": 74,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 398,
              "Offset": 72,
              "EndOffset": 90,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 403,
              "Offset": 102,
              "EndOffset": 104,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 403,
              "Offset": 102,
              "EndOffset": 133,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 413,
              "Offset": 193,
              "EndOffset": 195,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 413,
              "Offset": 201,
              "EndOffset": 203,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 413,
              "Offset": 193,
              "EndOffset": 233,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 413,
              "Offset": 201,
              "EndOffset": 233,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 234,
              "EndOffset": 236,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 417,
              "Offset": 234,
              "EndOffset": 283,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.GenericDictionaryAssertions`2::BeEquivalentTo(TExpectation,System.String,System.Object[])": {
          "Lines": {
            "450": 0,
            "451": 0
          },
          "Branches": [
            {
              "Line": 450,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 450,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.GenericDictionaryAssertions`2::BeEquivalentTo(TExpectation,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<TExpectation>>,System.String,System.Object[])": {
          "Lines": {
            "481": 0,
            "483": 0,
            "484": 0,
            "485": 0,
            "486": 0,
            "487": 0,
            "488": 0,
            "489": 0,
            "490": 0,
            "491": 0,
            "492": 0,
            "494": 0,
            "495": 0,
            "496": 0
          },
          "Branches": []
        },
        "FluentAssertions.Collections.WhichValueConstraint`2<TKey,TValue> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainKey(TKey,System.String,System.Object[])": {
          "Lines": {
            "515": 0,
            "517": 0,
            "519": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainKeys(TKey[])": {
          "Lines": {
            "529": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainKeys(System.Collections.Generic.IEnumerable`1<TKey>,System.String,System.Object[])": {
          "Lines": {
            "547": 0,
            "549": 0,
            "552": 0,
            "554": 0,
            "556": 0,
            "559": 0,
            "561": 0,
            "562": 0,
            "563": 0,
            "566": 0,
            "568": 0,
            "570": 0,
            "572": 0,
            "573": 0,
            "574": 0,
            "575": 0,
            "576": 0,
            "579": 0,
            "580": 0,
            "581": 0,
            "582": 0,
            "586": 0
          },
          "Branches": [
            {
              "Line": 547,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 547,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 554,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 554,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 559,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 559,
              "Offset": 56,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 568,
              "Offset": 125,
              "EndOffset": 127,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 570,
              "Offset": 134,
              "EndOffset": 136,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 570,
              "Offset": 134,
              "EndOffset": 184,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 568,
              "Offset": 125,
              "EndOffset": 236,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContainKey(TKey,System.String,System.Object[])": {
          "Lines": {
            "608": 0,
            "610": 0,
            "611": 0,
            "612": 0,
            "615": 0,
            "617": 0,
            "618": 0,
            "619": 0,
            "622": 0
          },
          "Branches": [
            {
              "Line": 608,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 608,
              "Offset": 6,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 615,
              "Offset": 67,
              "EndOffset": 69,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 615,
              "Offset": 67,
              "EndOffset": 116,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContainKeys(TKey[])": {
          "Lines": {
            "632": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContainKeys(System.Collections.Generic.IEnumerable`1<TKey>,System.String,System.Object[])": {
          "Lines": {
            "650": 0,
            "652": 0,
            "655": 0,
            "657": 0,
            "659": 0,
            "662": 0,
            "664": 0,
            "665": 0,
            "666": 0,
            "669": 0,
            "671": 0,
            "673": 0,
            "675": 0,
            "676": 0,
            "677": 0,
            "678": 0,
            "679": 0,
            "682": 0,
            "683": 0,
            "684": 0,
            "685": 0,
            "689": 0
          },
          "Branches": [
            {
              "Line": 650,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 650,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 657,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 657,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 662,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 662,
              "Offset": 56,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 671,
              "Offset": 124,
              "EndOffset": 126,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 673,
              "Offset": 133,
              "EndOffset": 135,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 673,
              "Offset": 133,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 671,
              "Offset": 124,
              "EndOffset": 235,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>,TValue> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainValue(TValue,System.String,System.Object[])": {
          "Lines": {
            "711": 0,
            "712": 0,
            "714": 0,
            "715": 0,
            "716": 0,
            "717": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainValues(TValue[])": {
          "Lines": {
            "727": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainValues(System.Collections.Generic.IEnumerable`1<TValue>,System.String,System.Object[])": {
          "Lines": {
            "745": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>,System.Collections.Generic.IEnumerable`1<TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::ContainValuesAndWhich(System.Collections.Generic.IEnumerable`1<TValue>,System.String,System.Object[])": {
          "Lines": {
            "751": 0,
            "753": 0,
            "756": 0,
            "758": 0,
            "760": 0,
            "763": 0,
            "765": 0,
            "766": 0,
            "767": 0,
            "770": 0,
            "771": 0,
            "773": 0,
            "775": 0,
            "776": 0,
            "777": 0,
            "778": 0,
            "779": 0,
            "782": 0,
            "783": 0,
            "784": 0,
            "785": 0,
            "789": 0,
            "790": 0,
            "791": 0,
            "792": 0,
            "793": 0
          },
          "Branches": [
            {
              "Line": 751,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 751,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 758,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 758,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 763,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 763,
              "Offset": 56,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 771,
              "Offset": 124,
              "EndOffset": 126,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 773,
              "Offset": 133,
              "EndOffset": 135,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 773,
              "Offset": 133,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 771,
              "Offset": 124,
              "EndOffset": 235,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "System.Collections.Generic.IEnumerable`1<TValue> FluentAssertions.Collections.GenericDictionaryAssertions`2::RepetitionPreservingIntersect(System.Collections.Generic.IEnumerable`1<TValue>,System.Collections.Generic.IEnumerable`1<TValue>)": {
          "Lines": {
            "803": 0,
            "804": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContainValue(TValue,System.String,System.Object[])": {
          "Lines": {
            "826": 0,
            "828": 0,
            "829": 0,
            "830": 0,
            "833": 0,
            "835": 0,
            "836": 0,
            "837": 0,
            "840": 0
          },
          "Branches": [
            {
              "Line": 826,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 826,
              "Offset": 6,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 833,
              "Offset": 72,
              "EndOffset": 74,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 833,
              "Offset": 72,
              "EndOffset": 121,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContainValues(TValue[])": {
          "Lines": {
            "850": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContainValues(System.Collections.Generic.IEnumerable`1<TValue>,System.String,System.Object[])": {
          "Lines": {
            "868": 0,
            "870": 0,
            "873": 0,
            "875": 0,
            "877": 0,
            "880": 0,
            "882": 0,
            "883": 0,
            "884": 0,
            "887": 0,
            "888": 0,
            "890": 0,
            "892": 0,
            "893": 0,
            "894": 0,
            "895": 0,
            "896": 0,
            "899": 0,
            "900": 0,
            "901": 0,
            "902": 0,
            "906": 0
          },
          "Branches": [
            {
              "Line": 868,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 868,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 875,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 875,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 880,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 880,
              "Offset": 56,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 888,
              "Offset": 124,
              "EndOffset": 126,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 890,
              "Offset": 133,
              "EndOffset": 135,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 890,
              "Offset": 133,
              "EndOffset": 183,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 888,
              "Offset": 124,
              "EndOffset": 235,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::Contain(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[])": {
          "Lines": {
            "920": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::Contain(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>>,System.String,System.Object[])": {
          "Lines": {
            "938": 0,
            "940": 0,
            "943": 0,
            "945": 0,
            "947": 0,
            "948": 0,
            "951": 0,
            "953": 0,
            "954": 0,
            "955": 0,
            "958": 0,
            "959": 0,
            "961": 0,
            "963": 0,
            "965": 0,
            "966": 0,
            "967": 0,
            "968": 0,
            "969": 0,
            "972": 0,
            "973": 0,
            "974": 0,
            "975": 0,
            "979": 0,
            "981": 0,
            "983": 0,
            "985": 0,
            "986": 0,
            "987": 0,
            "988": 0,
            "989": 0,
            "992": 0,
            "993": 0,
            "995": 0,
            "996": 0,
            "997": 0,
            "1001": 0
          },
          "Branches": [
            {
              "Line": 938,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 938,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 945,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 945,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 951,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 951,
              "Offset": 56,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 958,
              "Offset": 107,
              "EndOffset": 109,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 958,
              "Offset": 107,
              "EndOffset": 132,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 961,
              "Offset": 168,
              "EndOffset": 170,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 963,
              "Offset": 177,
              "EndOffset": 179,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 963,
              "Offset": 177,
              "EndOffset": 227,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 961,
              "Offset": 168,
              "EndOffset": 279,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            },
            {
              "Line": 981,
              "Offset": 309,
              "EndOffset": 314,
              "Path": 0,
              "Ordinal": 12,
              "Hits": 0
            },
            {
              "Line": 983,
              "Offset": 318,
              "EndOffset": 320,
              "Path": 0,
              "Ordinal": 14,
              "Hits": 0
            },
            {
              "Line": 985,
              "Offset": 356,
              "EndOffset": 358,
              "Path": 0,
              "Ordinal": 16,
              "Hits": 0
            },
            {
              "Line": 985,
              "Offset": 356,
              "EndOffset": 381,
              "Path": 1,
              "Ordinal": 17,
              "Hits": 0
            },
            {
              "Line": 983,
              "Offset": 318,
              "EndOffset": 395,
              "Path": 1,
              "Ordinal": 15,
              "Hits": 0
            },
            {
              "Line": 981,
              "Offset": 309,
              "EndOffset": 493,
              "Path": 1,
              "Ordinal": 13,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::Contain(System.Collections.Generic.KeyValuePair`2<TKey,TValue>,System.String,System.Object[])": {
          "Lines": {
            "1019": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::Contain(TKey,TValue,System.String,System.Object[])": {
          "Lines": {
            "1038": 0,
            "1040": 0,
            "1041": 0,
            "1042": 0,
            "1043": 0,
            "1046": 0,
            "1048": 0,
            "1049": 0,
            "1050": 0,
            "1051": 0,
            "1052": 0,
            "1055": 0,
            "1056": 0,
            "1057": 0,
            "1058": 0,
            "1061": 0
          },
          "Branches": [
            {
              "Line": 1038,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1038,
              "Offset": 6,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1046,
              "Offset": 79,
              "EndOffset": 81,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1046,
              "Offset": 79,
              "EndOffset": 162,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContain(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[])": {
          "Lines": {
            "1075": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContain(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>>,System.String,System.Object[])": {
          "Lines": {
            "1093": 0,
            "1095": 0,
            "1098": 0,
            "1100": 0,
            "1102": 0,
            "1103": 0,
            "1106": 0,
            "1108": 0,
            "1109": 0,
            "1110": 0,
            "1113": 0,
            "1115": 0,
            "1117": 0,
            "1119": 0,
            "1121": 0,
            "1123": 0,
            "1124": 0,
            "1125": 0,
            "1126": 0,
            "1129": 0,
            "1131": 0,
            "1132": 0,
            "1133": 0,
            "1138": 0
          },
          "Branches": [
            {
              "Line": 1093,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1093,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1100,
              "Offset": 32,
              "EndOffset": 34,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1100,
              "Offset": 32,
              "EndOffset": 50,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 1106,
              "Offset": 56,
              "EndOffset": 58,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 1106,
              "Offset": 56,
              "EndOffset": 100,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            },
            {
              "Line": 1115,
              "Offset": 130,
              "EndOffset": 135,
              "Path": 0,
              "Ordinal": 6,
              "Hits": 0
            },
            {
              "Line": 1119,
              "Offset": 165,
              "EndOffset": 167,
              "Path": 0,
              "Ordinal": 8,
              "Hits": 0
            },
            {
              "Line": 1121,
              "Offset": 171,
              "EndOffset": 173,
              "Path": 0,
              "Ordinal": 10,
              "Hits": 0
            },
            {
              "Line": 1121,
              "Offset": 171,
              "EndOffset": 208,
              "Path": 1,
              "Ordinal": 11,
              "Hits": 0
            },
            {
              "Line": 1115,
              "Offset": 130,
              "EndOffset": 275,
              "Path": 1,
              "Ordinal": 7,
              "Hits": 0
            },
            {
              "Line": 1119,
              "Offset": 165,
              "EndOffset": 275,
              "Path": 1,
              "Ordinal": 9,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContain(System.Collections.Generic.KeyValuePair`2<TKey,TValue>,System.String,System.Object[])": {
          "Lines": {
            "1156": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>> FluentAssertions.Collections.GenericDictionaryAssertions`2::NotContain(TKey,TValue,System.String,System.Object[])": {
          "Lines": {
            "1175": 0,
            "1177": 0,
            "1178": 0,
            "1179": 0,
            "1180": 0,
            "1183": 0,
            "1185": 0,
            "1186": 0,
            "1187": 0,
            "1188": 0,
            "1191": 0
          },
          "Branches": [
            {
              "Line": 1175,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 1175,
              "Offset": 6,
              "EndOffset": 65,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 1183,
              "Offset": 79,
              "EndOffset": 81,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 1183,
              "Offset": 79,
              "EndOffset": 154,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "System.String FluentAssertions.Collections.GenericDictionaryAssertions`2::get_Identifier()": {
          "Lines": {
            "1199": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Collections.GenericDictionaryAssertions`2::.ctor(System.Collections.Generic.IDictionary`2<TKey,TValue>)": {
          "Lines": {
            "21": 0,
            "23": 0,
            "25": 0,
            "27": 0
          },
          "Branches": [
            {
              "Line": 23,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\NonGenericCollectionAssertions.cs": {
      "FluentAssertions.Collections.NonGenericCollectionAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::HaveCount(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "39": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "46": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "53": 0
          },
          "Branches": [
            {
              "Line": 39,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 39,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::NotHaveCount(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "69": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "76": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "83": 0
          },
          "Branches": [
            {
              "Line": 69,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 69,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::HaveCountGreaterThan(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "99": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "106": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "113": 0
          },
          "Branches": [
            {
              "Line": 99,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 99,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::HaveCountGreaterOrEqualTo(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "129": 0,
            "131": 0,
            "132": 0,
            "133": 0,
            "136": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "141": 0,
            "143": 0
          },
          "Branches": [
            {
              "Line": 129,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 129,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::HaveCountLessThan(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "159": 0,
            "161": 0,
            "162": 0,
            "163": 0,
            "166": 0,
            "168": 0,
            "169": 0,
            "170": 0,
            "171": 0,
            "173": 0
          },
          "Branches": [
            {
              "Line": 159,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 159,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::HaveCountLessOrEqualTo(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "189": 0,
            "191": 0,
            "192": 0,
            "193": 0,
            "196": 0,
            "198": 0,
            "199": 0,
            "200": 0,
            "201": 0,
            "203": 0
          },
          "Branches": [
            {
              "Line": 189,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 189,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::HaveCount(System.Linq.Expressions.Expression`1<System.Func`2<System.Int32,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "220": 0,
            "222": 0,
            "225": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "232": 0,
            "234": 0,
            "236": 0,
            "238": 0,
            "239": 0,
            "240": 0,
            "241": 0,
            "244": 0
          },
          "Branches": [
            {
              "Line": 220,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 220,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 225,
              "Offset": 25,
              "EndOffset": 74,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 236,
              "Offset": 93,
              "EndOffset": 95,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 236,
              "Offset": 93,
              "EndOffset": 151,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Int32 FluentAssertions.Collections.NonGenericCollectionAssertions::GetMostLocalCount()": {
          "Lines": {
            "249": 0,
            "251": 0,
            "255": 0
          },
          "Branches": [
            {
              "Line": 249,
              "Offset": 13,
              "EndOffset": 15,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 249,
              "Offset": 13,
              "EndOffset": 22,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::Contain(System.Object,System.String,System.Object[])": {
          "Lines": {
            "274": 0,
            "276": 0,
            "279": 0
          },
          "Branches": [
            {
              "Line": 274,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 274,
              "Offset": 8,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.NonGenericCollectionAssertions> FluentAssertions.Collections.NonGenericCollectionAssertions::NotContain(System.Object,System.String,System.Object[])": {
          "Lines": {
            "297": 0,
            "299": 0,
            "302": 0
          },
          "Branches": [
            {
              "Line": 297,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 297,
              "Offset": 8,
              "EndOffset": 20,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.NonGenericCollectionAssertions::BeEquivalentTo(System.Collections.IEnumerable,System.String,System.Object[])": {
          "Lines": {
            "325": 0,
            "326": 0
          },
          "Branches": [
            {
              "Line": 325,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 325,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.NonGenericCollectionAssertions::BeEquivalentTo(System.Collections.IEnumerable,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<System.Collections.IEnumerable>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<System.Collections.IEnumerable>>,System.String,System.Object[])": {
          "Lines": {
            "355": 0,
            "357": 0,
            "358": 0,
            "359": 0,
            "360": 0,
            "361": 0,
            "362": 0,
            "363": 0,
            "364": 0,
            "365": 0,
            "366": 0,
            "368": 0,
            "369": 0,
            "370": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Collections.NonGenericCollectionAssertions::.ctor(System.Collections.IEnumerable)": {
          "Lines": {
            "18": 0,
            "20": 0,
            "22": 0,
            "24": 0
          },
          "Branches": [
            {
              "Line": 20,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 20,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\SelfReferencingCollectionAssertions.cs": {
      "FluentAssertions.Collections.SelfReferencingCollectionAssertions`2": {
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::HaveCount(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "40": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "47": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "54": 0
          },
          "Branches": [
            {
              "Line": 40,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 40,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::HaveCount(System.Linq.Expressions.Expression`1<System.Func`2<System.Int32,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "71": 0,
            "73": 0,
            "76": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "83": 0,
            "85": 0,
            "87": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "95": 0
          },
          "Branches": [
            {
              "Line": 71,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 71,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 25,
              "EndOffset": 27,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 76,
              "Offset": 25,
              "EndOffset": 74,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 98,
              "EndOffset": 100,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 87,
              "Offset": 98,
              "EndOffset": 156,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::NotHaveCount(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "111": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "118": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "125": 0
          },
          "Branches": [
            {
              "Line": 111,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 111,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::HaveCountGreaterThan(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "141": 0,
            "143": 0,
            "144": 0,
            "145": 0,
            "148": 0,
            "150": 0,
            "151": 0,
            "152": 0,
            "153": 0,
            "155": 0
          },
          "Branches": [
            {
              "Line": 141,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 141,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::HaveCountGreaterOrEqualTo(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "171": 0,
            "173": 0,
            "174": 0,
            "175": 0,
            "178": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "185": 0
          },
          "Branches": [
            {
              "Line": 171,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 171,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::HaveCountLessThan(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "201": 0,
            "203": 0,
            "204": 0,
            "205": 0,
            "208": 0,
            "210": 0,
            "211": 0,
            "212": 0,
            "213": 0,
            "215": 0
          },
          "Branches": [
            {
              "Line": 201,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 201,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::HaveCountLessOrEqualTo(System.Int32,System.String,System.Object[])": {
          "Lines": {
            "231": 0,
            "233": 0,
            "234": 0,
            "235": 0,
            "238": 0,
            "240": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "245": 0
          },
          "Branches": [
            {
              "Line": 231,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 231,
              "Offset": 6,
              "EndOffset": 46,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::Equal(T[])": {
          "Lines": {
            "255": 0,
            "257": 0,
            "259": 0
          },
          "Branches": []
        },
        "System.Func`3<T,T,System.Boolean> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::GetComparer()": {
          "Lines": {
            "264": 0,
            "266": 0,
            "269": 0
          },
          "Branches": [
            {
              "Line": 264,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 266,
              "Offset": 28,
              "EndOffset": 30,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 266,
              "Offset": 28,
              "EndOffset": 53,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 264,
              "Offset": 20,
              "EndOffset": 54,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 269,
              "Offset": 60,
              "EndOffset": 62,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 269,
              "Offset": 60,
              "EndOffset": 85,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::Equal(System.Collections.Generic.IEnumerable`1<TExpected>,System.Func`3<T,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "292": 0,
            "294": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::StartWith(System.Collections.Generic.IEnumerable`1<T>,System.String,System.Object[])": {
          "Lines": {
            "313": 0,
            "315": 0,
            "318": 0,
            "319": 0
          },
          "Branches": [
            {
              "Line": 313,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 313,
              "Offset": 1,
              "EndOffset": 13,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::StartWith(System.Collections.Generic.IEnumerable`1<TExpected>,System.Func`3<T,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "342": 0,
            "344": 0,
            "347": 0,
            "348": 0
          },
          "Branches": [
            {
              "Line": 342,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 342,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::EndWith(System.Collections.Generic.IEnumerable`1<T>,System.String,System.Object[])": {
          "Lines": {
            "367": 0,
            "369": 0,
            "372": 0,
            "373": 0
          },
          "Branches": [
            {
              "Line": 367,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 367,
              "Offset": 1,
              "EndOffset": 13,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::EndWith(System.Collections.Generic.IEnumerable`1<TExpected>,System.Func`3<T,TExpected,System.Boolean>,System.String,System.Object[])": {
          "Lines": {
            "396": 0,
            "398": 0,
            "401": 0,
            "402": 0
          },
          "Branches": [
            {
              "Line": 396,
              "Offset": 1,
              "EndOffset": 3,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 396,
              "Offset": 1,
              "EndOffset": 19,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::Contain(T,System.String,System.Object[])": {
          "Lines": {
            "418": 0,
            "420": 0,
            "421": 0,
            "422": 0,
            "425": 0,
            "427": 0,
            "428": 0,
            "429": 0,
            "432": 0,
            "433": 0,
            "434": 0
          },
          "Branches": [
            {
              "Line": 418,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 418,
              "Offset": 19,
              "EndOffset": 73,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 425,
              "Offset": 90,
              "EndOffset": 92,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 425,
              "Offset": 90,
              "EndOffset": 144,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::Contain(System.Collections.Generic.IEnumerable`1<T>,T[])": {
          "Lines": {
            "445": 0,
            "446": 0,
            "448": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::Contain(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "464": 0,
            "466": 0,
            "467": 0,
            "468": 0,
            "471": 0,
            "473": 0,
            "474": 0,
            "475": 0,
            "476": 0,
            "478": 0
          },
          "Branches": [
            {
              "Line": 464,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 464,
              "Offset": 6,
              "EndOffset": 55,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::OnlyContain(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "495": 0,
            "497": 0,
            "498": 0,
            "499": 0,
            "500": 0,
            "501": 0,
            "503": 0,
            "504": 0,
            "506": 0,
            "507": 0,
            "508": 0,
            "509": 0,
            "512": 0
          },
          "Branches": [
            {
              "Line": 504,
              "Offset": 102,
              "EndOffset": 104,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 504,
              "Offset": 102,
              "EndOffset": 146,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::NotContain(T,System.String,System.Object[])": {
          "Lines": {
            "528": 0,
            "530": 0,
            "531": 0,
            "532": 0,
            "535": 0,
            "537": 0,
            "538": 0,
            "539": 0,
            "542": 0,
            "543": 0,
            "544": 0
          },
          "Branches": [
            {
              "Line": 528,
              "Offset": 19,
              "EndOffset": 21,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 528,
              "Offset": 19,
              "EndOffset": 64,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 535,
              "Offset": 81,
              "EndOffset": 83,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 535,
              "Offset": 81,
              "EndOffset": 135,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::NotContain(System.Collections.Generic.IEnumerable`1<T>,T[])": {
          "Lines": {
            "554": 0,
            "555": 0,
            "556": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<TAssertions> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::NotContain(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "572": 0,
            "574": 0,
            "575": 0,
            "576": 0,
            "579": 0,
            "580": 0,
            "582": 0,
            "584": 0,
            "585": 0,
            "586": 0,
            "587": 0,
            "590": 0
          },
          "Branches": [
            {
              "Line": 572,
              "Offset": 12,
              "EndOffset": 14,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 572,
              "Offset": 12,
              "EndOffset": 61,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 582,
              "Offset": 103,
              "EndOffset": 105,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 582,
              "Offset": 103,
              "EndOffset": 156,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::ContainSingle(System.String,System.Object[])": {
          "Lines": {
            "605": 0,
            "607": 0,
            "608": 0,
            "609": 0,
            "612": 0,
            "615": 0,
            "616": 0,
            "620": 0,
            "624": 0
          },
          "Branches": [
            {
              "Line": 605,
              "Offset": 6,
              "EndOffset": 8,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 605,
              "Offset": 6,
              "EndOffset": 37,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 612,
              "Offset": 50,
              "EndOffset": 52,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 612,
              "Offset": 50,
              "EndOffset": 58,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 612,
              "Offset": 54,
              "EndOffset": 89,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 612,
              "Offset": 54,
              "EndOffset": 127,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndWhichConstraint`2<TAssertions,T> FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::ContainSingle(System.Linq.Expressions.Expression`1<System.Func`2<T,System.Boolean>>,System.String,System.Object[])": {
          "Lines": {
            "641": 0,
            "642": 0,
            "644": 0,
            "646": 0,
            "647": 0,
            "648": 0,
            "651": 0,
            "652": 0,
            "653": 0,
            "654": 0,
            "655": 0,
            "657": 0,
            "658": 0,
            "659": 0,
            "661": 0,
            "662": 0,
            "663": 0,
            "664": 0,
            "665": 0,
            "667": 0,
            "668": 0,
            "669": 0,
            "676": 0
          },
          "Branches": [
            {
              "Line": 644,
              "Offset": 23,
              "EndOffset": 25,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 644,
              "Offset": 23,
              "EndOffset": 69,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            },
            {
              "Line": 659,
              "Offset": 150,
              "EndOffset": 152,
              "Path": 0,
              "Ordinal": 2,
              "Hits": 0
            },
            {
              "Line": 659,
              "Offset": 150,
              "EndOffset": 189,
              "Path": 1,
              "Ordinal": 3,
              "Hits": 0
            },
            {
              "Line": 665,
              "Offset": 191,
              "EndOffset": 193,
              "Path": 0,
              "Ordinal": 4,
              "Hits": 0
            },
            {
              "Line": 665,
              "Offset": 191,
              "EndOffset": 240,
              "Path": 1,
              "Ordinal": 5,
              "Hits": 0
            }
          ]
        },
        "System.Void FluentAssertions.Collections.SelfReferencingCollectionAssertions`2::.ctor(System.Collections.Generic.IEnumerable`1<T>)": {
          "Lines": {
            "19": 0,
            "21": 0,
            "23": 0,
            "25": 0
          },
          "Branches": [
            {
              "Line": 21,
              "Offset": 7,
              "EndOffset": 9,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 21,
              "Offset": 7,
              "EndOffset": 16,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\StringCollectionAssertions.cs": {
      "FluentAssertions.Collections.StringCollectionAssertions": {
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::Equal(System.String[])": {
          "Lines": {
            "23": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::Equal(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "33": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::BeEquivalentTo(System.String[])": {
          "Lines": {
            "44": 0,
            "46": 0
          },
          "Branches": [
            {
              "Line": 44,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 44,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::BeEquivalentTo(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "64": 0,
            "66": 0
          },
          "Branches": [
            {
              "Line": 64,
              "Offset": 8,
              "EndOffset": 10,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 64,
              "Offset": 8,
              "EndOffset": 33,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 0
            }
          ]
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::BeEquivalentTo(System.Collections.Generic.IEnumerable`1<System.String>,System.Func`2<FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<System.String>,FluentAssertions.Equivalency.EquivalencyAssertionOptions`1<System.String>>,System.String,System.Object[])": {
          "Lines": {
            "92": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "105": 0,
            "106": 0,
            "108": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::ContainInOrder(System.String[])": {
          "Lines": {
            "118": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::ContainInOrder(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object[])": {
          "Lines": {
            "136": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::Contain(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "146": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::Contain(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object,System.Object[])": {
          "Lines": {
            "165": 0,
            "166": 0,
            "167": 0
          },
          "Branches": []
        },
        "FluentAssertions.AndConstraint`1<FluentAssertions.Collections.StringCollectionAssertions> FluentAssertions.Collections.StringCollectionAssertions::NotContain(System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.Object,System.Object[])": {
          "Lines": {
            "186": 0,
            "187": 0,
            "188": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Collections.StringCollectionAssertions::.ctor(System.Collections.Generic.IEnumerable`1<System.String>)": {
          "Lines": {
            "12": 0,
            "14": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\projects\\fluentassertions-vf06b\\Src\\FluentAssertions\\Collections\\WhichValueConstraint.cs": {
      "FluentAssertions.Collections.WhichValueConstraint`2": {
        "TValue FluentAssertions.Collections.WhichValueConstraint`2::get_WhichValue()": {
          "Lines": {
            "14": 0
          },
          "Branches": []
        },
        "System.Void FluentAssertions.Collections.WhichValueConstraint`2::.ctor(FluentAssertions.Collections.GenericDictionaryAssertions`2<TKey,TValue>,TValue)": {
          "Lines": {
            "6": 0,
            "8": 0,
            "9": 0
          },
          "Branches": []
        }
      }
    }
  },
  "C:\\Users\\User\\source\\repos\\Lab1\\UnitTestProject1\\bin\\Debug\\Lab1.exe": {
    "C:\\Users\\User\\source\\repos\\Lab1\\Lab1\\Employee.cs": {
      "Lab1.Employee": {
        "System.String Lab1.Employee::get_FirstName()": {
          "Lines": {
            "12": 0
          },
          "Branches": []
        },
        "System.String Lab1.Employee::get_LastName()": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.DateTime Lab1.Employee::get_StartDate()": {
          "Lines": {
            "14": 8
          },
          "Branches": []
        },
        "System.DateTime Lab1.Employee::get_EndDate()": {
          "Lines": {
            "15": 8
          },
          "Branches": []
        },
        "System.Double Lab1.Employee::get_Salary()": {
          "Lines": {
            "16": 6
          },
          "Branches": []
        },
        "System.String Lab1.Employee::GetFullName()": {
          "Lines": {
            "19": 0,
            "20": 0,
            "21": 0
          },
          "Branches": []
        },
        "System.Boolean Lab1.Employee::IsActive()": {
          "Lines": {
            "24": 0,
            "25": 0,
            "26": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\Users\\User\\source\\repos\\Lab1\\Lab1\\Product.cs": {
      "Lab1.Product": {
        "System.String Lab1.Product::get_Name()": {
          "Lines": {
            "13": 0
          },
          "Branches": []
        },
        "System.String Lab1.Product::get_Description()": {
          "Lines": {
            "14": 0
          },
          "Branches": []
        },
        "System.DateTime Lab1.Product::get_StartDate()": {
          "Lines": {
            "15": 2
          },
          "Branches": []
        },
        "System.DateTime Lab1.Product::get_EndDate()": {
          "Lines": {
            "16": 2
          },
          "Branches": []
        },
        "System.Double Lab1.Product::get_Price()": {
          "Lines": {
            "17": 0
          },
          "Branches": []
        },
        "System.Double Lab1.Product::get_VAT()": {
          "Lines": {
            "18": 0
          },
          "Branches": []
        },
        "System.Boolean Lab1.Product::IsValid()": {
          "Lines": {
            "22": 1,
            "23": 1,
            "24": 0,
            "25": 0,
            "27": 1,
            "28": 1
          },
          "Branches": [
            {
              "Line": 23,
              "Offset": 20,
              "EndOffset": 22,
              "Path": 0,
              "Ordinal": 0,
              "Hits": 0
            },
            {
              "Line": 23,
              "Offset": 20,
              "EndOffset": 27,
              "Path": 1,
              "Ordinal": 1,
              "Hits": 1
            }
          ]
        },
        "System.Void Lab1.Product::ComputeVat()": {
          "Lines": {
            "31": 0,
            "32": 0,
            "33": 0
          },
          "Branches": []
        }
      }
    },
    "C:\\Users\\User\\source\\repos\\Lab1\\Lab1\\Program.cs": {
      "Lab1.Program": {
        "System.Void Lab1.Program::Main(System.String[])": {
          "Lines": {
            "14": 0,
            "15": 0,
            "17": 0,
            "20": 0
          },
          "Branches": []
        }
      }
    }
  }
}